
#define _CRT_SECURE_NO_WARNINGS
#include <map>
#include <string>
#include <iostream>
#include <stdio.h>


// Generated from ReentParser.g4 by ANTLR 4.9.2


#include "ReentParserListener.h"

#include "ReentParser.h"


using namespace antlrcpp;
using namespace antlr4;

ReentParser::ReentParser(TokenStream *input) : Parser(input) {
  _interpreter = new atn::ParserATNSimulator(this, _atn, _decisionToDFA, _sharedContextCache);
}

ReentParser::~ReentParser() {
  delete _interpreter;
}

std::string ReentParser::getGrammarFileName() const {
  return "ReentParser.g4";
}

const std::vector<std::string>& ReentParser::getRuleNames() const {
  return _ruleNames;
}

dfa::Vocabulary& ReentParser::getVocabulary() const {
  return _vocabulary;
}


//----------------- TranslationUnitContext ------------------------------------------------------------------

ReentParser::TranslationUnitContext::TranslationUnitContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TranslationUnitContext::EOF() {
  return getToken(ReentParser::EOF, 0);
}

ReentParser::DeclarationseqContext* ReentParser::TranslationUnitContext::declarationseq() {
  return getRuleContext<ReentParser::DeclarationseqContext>(0);
}


size_t ReentParser::TranslationUnitContext::getRuleIndex() const {
  return ReentParser::RuleTranslationUnit;
}

void ReentParser::TranslationUnitContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTranslationUnit(this);
}

void ReentParser::TranslationUnitContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTranslationUnit(this);
}

ReentParser::TranslationUnitContext* ReentParser::translationUnit() {
  TranslationUnitContext *_localctx = _tracker.createInstance<TranslationUnitContext>(_ctx, getState());
  enterRule(_localctx, 0, ReentParser::RuleTranslationUnit);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(565);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::PlanPragma)
      | (1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Asm)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Chain)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Namespace - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Reenterable - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Static_assert - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Template - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Using - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Semi - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(564);
      declarationseq();
    }
    setState(567);
    match(ReentParser::EOF);

    		if (gpu_block_opened)
    			throw FailedPredicateException(this, "'#pragma plan gpu end' expected");
    		if (common_block_opened)
    			throw FailedPredicateException(this, "'#pragma plan common end' expected");
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AnyIdentifierContext ------------------------------------------------------------------

ReentParser::AnyIdentifierContext::AnyIdentifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Id() {
  return getToken(ReentParser::Id, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::In() {
  return getToken(ReentParser::In, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Out() {
  return getToken(ReentParser::Out, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Set() {
  return getToken(ReentParser::Set, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Reset() {
  return getToken(ReentParser::Reset, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Depends() {
  return getToken(ReentParser::Depends, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Plan() {
  return getToken(ReentParser::Plan, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Common() {
  return getToken(ReentParser::Common, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Gpu() {
  return getToken(ReentParser::Gpu, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Begin() {
  return getToken(ReentParser::Begin, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::End() {
  return getToken(ReentParser::End, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Local() {
  return getToken(ReentParser::Local, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Global() {
  return getToken(ReentParser::Global, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::MarkState() {
  return getToken(ReentParser::MarkState, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::MarkPreCondition() {
  return getToken(ReentParser::MarkPreCondition, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Vectorized() {
  return getToken(ReentParser::Vectorized, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Clustered() {
  return getToken(ReentParser::Clustered, 0);
}

tree::TerminalNode* ReentParser::AnyIdentifierContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}


size_t ReentParser::AnyIdentifierContext::getRuleIndex() const {
  return ReentParser::RuleAnyIdentifier;
}

void ReentParser::AnyIdentifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAnyIdentifier(this);
}

void ReentParser::AnyIdentifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAnyIdentifier(this);
}

ReentParser::AnyIdentifierContext* ReentParser::anyIdentifier() {
  AnyIdentifierContext *_localctx = _tracker.createInstance<AnyIdentifierContext>(_ctx, getState());
  enterRule(_localctx, 2, ReentParser::RuleAnyIdentifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(570);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

    || _la == ReentParser::Identifier)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PrimaryExpressionContext ------------------------------------------------------------------

ReentParser::PrimaryExpressionContext::PrimaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::LiteralContext *> ReentParser::PrimaryExpressionContext::literal() {
  return getRuleContexts<ReentParser::LiteralContext>();
}

ReentParser::LiteralContext* ReentParser::PrimaryExpressionContext::literal(size_t i) {
  return getRuleContext<ReentParser::LiteralContext>(i);
}

tree::TerminalNode* ReentParser::PrimaryExpressionContext::This() {
  return getToken(ReentParser::This, 0);
}

tree::TerminalNode* ReentParser::PrimaryExpressionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::PrimaryExpressionContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::PrimaryExpressionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::Reent_funs_idContext* ReentParser::PrimaryExpressionContext::reent_funs_id() {
  return getRuleContext<ReentParser::Reent_funs_idContext>(0);
}

ReentParser::Chain_funs_idContext* ReentParser::PrimaryExpressionContext::chain_funs_id() {
  return getRuleContext<ReentParser::Chain_funs_idContext>(0);
}

ReentParser::IdExpressionContext* ReentParser::PrimaryExpressionContext::idExpression() {
  return getRuleContext<ReentParser::IdExpressionContext>(0);
}

ReentParser::LambdaExpressionContext* ReentParser::PrimaryExpressionContext::lambdaExpression() {
  return getRuleContext<ReentParser::LambdaExpressionContext>(0);
}


size_t ReentParser::PrimaryExpressionContext::getRuleIndex() const {
  return ReentParser::RulePrimaryExpression;
}

void ReentParser::PrimaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPrimaryExpression(this);
}

void ReentParser::PrimaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPrimaryExpression(this);
}

ReentParser::PrimaryExpressionContext* ReentParser::primaryExpression() {
  PrimaryExpressionContext *_localctx = _tracker.createInstance<PrimaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 4, ReentParser::RulePrimaryExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(586);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(573); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(572);
                literal();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(575); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(577);
      match(ReentParser::This);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(578);
      match(ReentParser::LeftParen);
      setState(579);
      expression();
      setState(580);
      match(ReentParser::RightParen);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(582);
      reent_funs_id();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(583);
      chain_funs_id();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(584);
      idExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(585);
      lambdaExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IdExpressionContext ------------------------------------------------------------------

ReentParser::IdExpressionContext::IdExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::QualifiedIdContext* ReentParser::IdExpressionContext::qualifiedId() {
  return getRuleContext<ReentParser::QualifiedIdContext>(0);
}

ReentParser::UnqualifiedIdContext* ReentParser::IdExpressionContext::unqualifiedId() {
  return getRuleContext<ReentParser::UnqualifiedIdContext>(0);
}


size_t ReentParser::IdExpressionContext::getRuleIndex() const {
  return ReentParser::RuleIdExpression;
}

void ReentParser::IdExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIdExpression(this);
}

void ReentParser::IdExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIdExpression(this);
}

ReentParser::IdExpressionContext* ReentParser::idExpression() {
  IdExpressionContext *_localctx = _tracker.createInstance<IdExpressionContext>(_ctx, getState());
  enterRule(_localctx, 6, ReentParser::RuleIdExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(590);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(588);
      qualifiedId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(589);
      unqualifiedId();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_funs_idContext ------------------------------------------------------------------

ReentParser::Reent_funs_idContext::Reent_funs_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_first() {
  return getToken(ReentParser::Plan_first, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_last() {
  return getToken(ReentParser::Plan_last, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_stop() {
  return getToken(ReentParser::Plan_stop, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Clear_plan() {
  return getToken(ReentParser::Clear_plan, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_get_first() {
  return getToken(ReentParser::Plan_get_first, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_get_last() {
  return getToken(ReentParser::Plan_get_last, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_group_first() {
  return getToken(ReentParser::Plan_group_first, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_group_last() {
  return getToken(ReentParser::Plan_group_last, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_group_parallelize() {
  return getToken(ReentParser::Plan_group_parallelize, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_group_vectorize() {
  return getToken(ReentParser::Plan_group_vectorize, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_group_atomize() {
  return getToken(ReentParser::Plan_group_atomize, 0);
}

tree::TerminalNode* ReentParser::Reent_funs_idContext::Plan_group_soft_atomize() {
  return getToken(ReentParser::Plan_group_soft_atomize, 0);
}


size_t ReentParser::Reent_funs_idContext::getRuleIndex() const {
  return ReentParser::RuleReent_funs_id;
}

void ReentParser::Reent_funs_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_funs_id(this);
}

void ReentParser::Reent_funs_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_funs_id(this);
}

ReentParser::Reent_funs_idContext* ReentParser::reent_funs_id() {
  Reent_funs_idContext *_localctx = _tracker.createInstance<Reent_funs_idContext>(_ctx, getState());
  enterRule(_localctx, 8, ReentParser::RuleReent_funs_id);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(592);

    if (!((in_reenterable || in_chain))) throw FailedPredicateException(this, "(in_reenterable || in_chain)");
    setState(593);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Clear_plan || ((((_la - 85) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 85)) & ((1ULL << (ReentParser::Plan_first - 85))
      | (1ULL << (ReentParser::Plan_get_first - 85))
      | (1ULL << (ReentParser::Plan_get_last - 85))
      | (1ULL << (ReentParser::Plan_group_atomize - 85))
      | (1ULL << (ReentParser::Plan_group_first - 85))
      | (1ULL << (ReentParser::Plan_group_last - 85))
      | (1ULL << (ReentParser::Plan_group_parallelize - 85))
      | (1ULL << (ReentParser::Plan_group_soft_atomize - 85))
      | (1ULL << (ReentParser::Plan_group_vectorize - 85))
      | (1ULL << (ReentParser::Plan_last - 85))
      | (1ULL << (ReentParser::Plan_stop - 85)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chain_funs_idContext ------------------------------------------------------------------

ReentParser::Chain_funs_idContext::Chain_funs_idContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Chain_funs_idContext::Throw_first() {
  return getToken(ReentParser::Throw_first, 0);
}

tree::TerminalNode* ReentParser::Chain_funs_idContext::Throw_last() {
  return getToken(ReentParser::Throw_last, 0);
}


size_t ReentParser::Chain_funs_idContext::getRuleIndex() const {
  return ReentParser::RuleChain_funs_id;
}

void ReentParser::Chain_funs_idContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain_funs_id(this);
}

void ReentParser::Chain_funs_idContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain_funs_id(this);
}

ReentParser::Chain_funs_idContext* ReentParser::chain_funs_id() {
  Chain_funs_idContext *_localctx = _tracker.createInstance<Chain_funs_idContext>(_ctx, getState());
  enterRule(_localctx, 10, ReentParser::RuleChain_funs_id);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(595);

    if (!(in_chain)) throw FailedPredicateException(this, "in_chain");
    setState(596);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Throw_first

    || _la == ReentParser::Throw_last)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnqualifiedIdContext ------------------------------------------------------------------

ReentParser::UnqualifiedIdContext::UnqualifiedIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TemplateIdContext* ReentParser::UnqualifiedIdContext::templateId() {
  return getRuleContext<ReentParser::TemplateIdContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::UnqualifiedIdContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::OperatorFunctionIdContext* ReentParser::UnqualifiedIdContext::operatorFunctionId() {
  return getRuleContext<ReentParser::OperatorFunctionIdContext>(0);
}

ReentParser::ConversionFunctionIdContext* ReentParser::UnqualifiedIdContext::conversionFunctionId() {
  return getRuleContext<ReentParser::ConversionFunctionIdContext>(0);
}

ReentParser::LiteralOperatorIdContext* ReentParser::UnqualifiedIdContext::literalOperatorId() {
  return getRuleContext<ReentParser::LiteralOperatorIdContext>(0);
}

tree::TerminalNode* ReentParser::UnqualifiedIdContext::Tilde() {
  return getToken(ReentParser::Tilde, 0);
}

ReentParser::ClassNameContext* ReentParser::UnqualifiedIdContext::className() {
  return getRuleContext<ReentParser::ClassNameContext>(0);
}

ReentParser::DecltypeSpecifierContext* ReentParser::UnqualifiedIdContext::decltypeSpecifier() {
  return getRuleContext<ReentParser::DecltypeSpecifierContext>(0);
}


size_t ReentParser::UnqualifiedIdContext::getRuleIndex() const {
  return ReentParser::RuleUnqualifiedId;
}

void ReentParser::UnqualifiedIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnqualifiedId(this);
}

void ReentParser::UnqualifiedIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnqualifiedId(this);
}

ReentParser::UnqualifiedIdContext* ReentParser::unqualifiedId() {
  UnqualifiedIdContext *_localctx = _tracker.createInstance<UnqualifiedIdContext>(_ctx, getState());
  enterRule(_localctx, 12, ReentParser::RuleUnqualifiedId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(608);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(598);
      templateId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(599);
      anyIdentifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(600);
      operatorFunctionId();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(601);
      conversionFunctionId();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(602);
      literalOperatorId();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(603);
      match(ReentParser::Tilde);
      setState(606);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ReentParser::Begin:
        case ReentParser::Clustered:
        case ReentParser::Common:
        case ReentParser::Depends:
        case ReentParser::End:
        case ReentParser::Global:
        case ReentParser::Gpu:
        case ReentParser::Id:
        case ReentParser::In:
        case ReentParser::Local:
        case ReentParser::MarkPreCondition:
        case ReentParser::MarkState:
        case ReentParser::Out:
        case ReentParser::Plan:
        case ReentParser::Reset:
        case ReentParser::Set:
        case ReentParser::Vectorized:
        case ReentParser::Identifier: {
          setState(604);
          className();
          break;
        }

        case ReentParser::Decltype: {
          setState(605);
          decltypeSpecifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiedIdContext ------------------------------------------------------------------

ReentParser::QualifiedIdContext::QualifiedIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::NestedNameSpecifierContext* ReentParser::QualifiedIdContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

ReentParser::UnqualifiedIdContext* ReentParser::QualifiedIdContext::unqualifiedId() {
  return getRuleContext<ReentParser::UnqualifiedIdContext>(0);
}

tree::TerminalNode* ReentParser::QualifiedIdContext::Template() {
  return getToken(ReentParser::Template, 0);
}


size_t ReentParser::QualifiedIdContext::getRuleIndex() const {
  return ReentParser::RuleQualifiedId;
}

void ReentParser::QualifiedIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiedId(this);
}

void ReentParser::QualifiedIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiedId(this);
}

ReentParser::QualifiedIdContext* ReentParser::qualifiedId() {
  QualifiedIdContext *_localctx = _tracker.createInstance<QualifiedIdContext>(_ctx, getState());
  enterRule(_localctx, 14, ReentParser::RuleQualifiedId);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(610);
    nestedNameSpecifier(0);
    setState(612);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Template) {
      setState(611);
      match(ReentParser::Template);
    }
    setState(614);
    unqualifiedId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NestedNameSpecifierContext ------------------------------------------------------------------

ReentParser::NestedNameSpecifierContext::NestedNameSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NestedNameSpecifierContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

ReentParser::TheTypeNameContext* ReentParser::NestedNameSpecifierContext::theTypeName() {
  return getRuleContext<ReentParser::TheTypeNameContext>(0);
}

ReentParser::NamespaceNameContext* ReentParser::NestedNameSpecifierContext::namespaceName() {
  return getRuleContext<ReentParser::NamespaceNameContext>(0);
}

ReentParser::DecltypeSpecifierContext* ReentParser::NestedNameSpecifierContext::decltypeSpecifier() {
  return getRuleContext<ReentParser::DecltypeSpecifierContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::NestedNameSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::NestedNameSpecifierContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::SimpleTemplateIdContext* ReentParser::NestedNameSpecifierContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

tree::TerminalNode* ReentParser::NestedNameSpecifierContext::Template() {
  return getToken(ReentParser::Template, 0);
}


size_t ReentParser::NestedNameSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleNestedNameSpecifier;
}

void ReentParser::NestedNameSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNestedNameSpecifier(this);
}

void ReentParser::NestedNameSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNestedNameSpecifier(this);
}


ReentParser::NestedNameSpecifierContext* ReentParser::nestedNameSpecifier() {
   return nestedNameSpecifier(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::nestedNameSpecifier(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ReentParser::NestedNameSpecifierContext *_localctx = _tracker.createInstance<NestedNameSpecifierContext>(_ctx, parentState);
  ReentParser::NestedNameSpecifierContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 16;
  enterRecursionRule(_localctx, 16, ReentParser::RuleNestedNameSpecifier, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(620);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 7, _ctx)) {
    case 1: {
      setState(617);
      theTypeName();
      break;
    }

    case 2: {
      setState(618);
      namespaceName();
      break;
    }

    case 3: {
      setState(619);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
    setState(622);
    match(ReentParser::Doublecolon);
    _ctx->stop = _input->LT(-1);
    setState(636);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NestedNameSpecifierContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNestedNameSpecifier);
        setState(624);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(630);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 9, _ctx)) {
        case 1: {
          setState(625);
          anyIdentifier();
          break;
        }

        case 2: {
          setState(627);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ReentParser::Template) {
            setState(626);
            match(ReentParser::Template);
          }
          setState(629);
          simpleTemplateId();
          break;
        }

        default:
          break;
        }
        setState(632);
        match(ReentParser::Doublecolon); 
      }
      setState(638);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 10, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- LambdaExpressionContext ------------------------------------------------------------------

ReentParser::LambdaExpressionContext::LambdaExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::LambdaIntroducerContext* ReentParser::LambdaExpressionContext::lambdaIntroducer() {
  return getRuleContext<ReentParser::LambdaIntroducerContext>(0);
}

ReentParser::CompoundStatementContext* ReentParser::LambdaExpressionContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}

ReentParser::LambdaDeclaratorContext* ReentParser::LambdaExpressionContext::lambdaDeclarator() {
  return getRuleContext<ReentParser::LambdaDeclaratorContext>(0);
}


size_t ReentParser::LambdaExpressionContext::getRuleIndex() const {
  return ReentParser::RuleLambdaExpression;
}

void ReentParser::LambdaExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaExpression(this);
}

void ReentParser::LambdaExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaExpression(this);
}

ReentParser::LambdaExpressionContext* ReentParser::lambdaExpression() {
  LambdaExpressionContext *_localctx = _tracker.createInstance<LambdaExpressionContext>(_ctx, getState());
  enterRule(_localctx, 18, ReentParser::RuleLambdaExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(639);
    lambdaIntroducer();
    setState(641);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::LeftParen) {
      setState(640);
      lambdaDeclarator();
    }
    setState(643);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaIntroducerContext ------------------------------------------------------------------

ReentParser::LambdaIntroducerContext::LambdaIntroducerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::LambdaIntroducerContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::LambdaIntroducerContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::LambdaCaptureContext* ReentParser::LambdaIntroducerContext::lambdaCapture() {
  return getRuleContext<ReentParser::LambdaCaptureContext>(0);
}


size_t ReentParser::LambdaIntroducerContext::getRuleIndex() const {
  return ReentParser::RuleLambdaIntroducer;
}

void ReentParser::LambdaIntroducerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaIntroducer(this);
}

void ReentParser::LambdaIntroducerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaIntroducer(this);
}

ReentParser::LambdaIntroducerContext* ReentParser::lambdaIntroducer() {
  LambdaIntroducerContext *_localctx = _tracker.createInstance<LambdaIntroducerContext>(_ctx, getState());
  enterRule(_localctx, 20, ReentParser::RuleLambdaIntroducer);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(645);
    match(ReentParser::LeftBracket);
    setState(647);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::This - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
      | (1ULL << (ReentParser::And - 140))
      | (1ULL << (ReentParser::Assign - 140))
      | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
      setState(646);
      lambdaCapture();
    }
    setState(649);
    match(ReentParser::RightBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaCaptureContext ------------------------------------------------------------------

ReentParser::LambdaCaptureContext::LambdaCaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::CaptureListContext* ReentParser::LambdaCaptureContext::captureList() {
  return getRuleContext<ReentParser::CaptureListContext>(0);
}

ReentParser::CaptureDefaultContext* ReentParser::LambdaCaptureContext::captureDefault() {
  return getRuleContext<ReentParser::CaptureDefaultContext>(0);
}

tree::TerminalNode* ReentParser::LambdaCaptureContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}


size_t ReentParser::LambdaCaptureContext::getRuleIndex() const {
  return ReentParser::RuleLambdaCapture;
}

void ReentParser::LambdaCaptureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaCapture(this);
}

void ReentParser::LambdaCaptureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaCapture(this);
}

ReentParser::LambdaCaptureContext* ReentParser::lambdaCapture() {
  LambdaCaptureContext *_localctx = _tracker.createInstance<LambdaCaptureContext>(_ctx, getState());
  enterRule(_localctx, 22, ReentParser::RuleLambdaCapture);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(657);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 14, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(651);
      captureList();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(652);
      captureDefault();
      setState(655);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Comma) {
        setState(653);
        match(ReentParser::Comma);
        setState(654);
        captureList();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaptureDefaultContext ------------------------------------------------------------------

ReentParser::CaptureDefaultContext::CaptureDefaultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::CaptureDefaultContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::CaptureDefaultContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}


size_t ReentParser::CaptureDefaultContext::getRuleIndex() const {
  return ReentParser::RuleCaptureDefault;
}

void ReentParser::CaptureDefaultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaptureDefault(this);
}

void ReentParser::CaptureDefaultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaptureDefault(this);
}

ReentParser::CaptureDefaultContext* ReentParser::captureDefault() {
  CaptureDefaultContext *_localctx = _tracker.createInstance<CaptureDefaultContext>(_ctx, getState());
  enterRule(_localctx, 24, ReentParser::RuleCaptureDefault);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(659);
    _la = _input->LA(1);
    if (!(_la == ReentParser::And

    || _la == ReentParser::Assign)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaptureListContext ------------------------------------------------------------------

ReentParser::CaptureListContext::CaptureListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::CaptureContext *> ReentParser::CaptureListContext::capture() {
  return getRuleContexts<ReentParser::CaptureContext>();
}

ReentParser::CaptureContext* ReentParser::CaptureListContext::capture(size_t i) {
  return getRuleContext<ReentParser::CaptureContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::CaptureListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::CaptureListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}

tree::TerminalNode* ReentParser::CaptureListContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}


size_t ReentParser::CaptureListContext::getRuleIndex() const {
  return ReentParser::RuleCaptureList;
}

void ReentParser::CaptureListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCaptureList(this);
}

void ReentParser::CaptureListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCaptureList(this);
}

ReentParser::CaptureListContext* ReentParser::captureList() {
  CaptureListContext *_localctx = _tracker.createInstance<CaptureListContext>(_ctx, getState());
  enterRule(_localctx, 26, ReentParser::RuleCaptureList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(661);
    capture();
    setState(666);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(662);
      match(ReentParser::Comma);
      setState(663);
      capture();
      setState(668);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(670);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(669);
      match(ReentParser::Ellipsis);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CaptureContext ------------------------------------------------------------------

ReentParser::CaptureContext::CaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::SimpleCaptureContext* ReentParser::CaptureContext::simpleCapture() {
  return getRuleContext<ReentParser::SimpleCaptureContext>(0);
}

ReentParser::InitcaptureContext* ReentParser::CaptureContext::initcapture() {
  return getRuleContext<ReentParser::InitcaptureContext>(0);
}


size_t ReentParser::CaptureContext::getRuleIndex() const {
  return ReentParser::RuleCapture;
}

void ReentParser::CaptureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCapture(this);
}

void ReentParser::CaptureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCapture(this);
}

ReentParser::CaptureContext* ReentParser::capture() {
  CaptureContext *_localctx = _tracker.createInstance<CaptureContext>(_ctx, getState());
  enterRule(_localctx, 28, ReentParser::RuleCapture);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(674);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(672);
      simpleCapture();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(673);
      initcapture();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleCaptureContext ------------------------------------------------------------------

ReentParser::SimpleCaptureContext::SimpleCaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::SimpleCaptureContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::SimpleCaptureContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::SimpleCaptureContext::This() {
  return getToken(ReentParser::This, 0);
}


size_t ReentParser::SimpleCaptureContext::getRuleIndex() const {
  return ReentParser::RuleSimpleCapture;
}

void ReentParser::SimpleCaptureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleCapture(this);
}

void ReentParser::SimpleCaptureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleCapture(this);
}

ReentParser::SimpleCaptureContext* ReentParser::simpleCapture() {
  SimpleCaptureContext *_localctx = _tracker.createInstance<SimpleCaptureContext>(_ctx, getState());
  enterRule(_localctx, 30, ReentParser::RuleSimpleCapture);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(681);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::And:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(677);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::And) {
          setState(676);
          match(ReentParser::And);
        }
        setState(679);
        anyIdentifier();
        break;
      }

      case ReentParser::This: {
        enterOuterAlt(_localctx, 2);
        setState(680);
        match(ReentParser::This);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitcaptureContext ------------------------------------------------------------------

ReentParser::InitcaptureContext::InitcaptureContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::InitcaptureContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::InitializerContext* ReentParser::InitcaptureContext::initializer() {
  return getRuleContext<ReentParser::InitializerContext>(0);
}

tree::TerminalNode* ReentParser::InitcaptureContext::And() {
  return getToken(ReentParser::And, 0);
}


size_t ReentParser::InitcaptureContext::getRuleIndex() const {
  return ReentParser::RuleInitcapture;
}

void ReentParser::InitcaptureContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitcapture(this);
}

void ReentParser::InitcaptureContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitcapture(this);
}

ReentParser::InitcaptureContext* ReentParser::initcapture() {
  InitcaptureContext *_localctx = _tracker.createInstance<InitcaptureContext>(_ctx, getState());
  enterRule(_localctx, 32, ReentParser::RuleInitcapture);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(684);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::And) {
      setState(683);
      match(ReentParser::And);
    }
    setState(686);
    anyIdentifier();
    setState(687);
    initializer();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LambdaDeclaratorContext ------------------------------------------------------------------

ReentParser::LambdaDeclaratorContext::LambdaDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::LambdaDeclaratorContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::LambdaDeclaratorContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::ParameterDeclarationClauseContext* ReentParser::LambdaDeclaratorContext::parameterDeclarationClause() {
  return getRuleContext<ReentParser::ParameterDeclarationClauseContext>(0);
}

tree::TerminalNode* ReentParser::LambdaDeclaratorContext::Mutable() {
  return getToken(ReentParser::Mutable, 0);
}

ReentParser::ExceptionSpecificationContext* ReentParser::LambdaDeclaratorContext::exceptionSpecification() {
  return getRuleContext<ReentParser::ExceptionSpecificationContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::LambdaDeclaratorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::TrailingReturnTypeContext* ReentParser::LambdaDeclaratorContext::trailingReturnType() {
  return getRuleContext<ReentParser::TrailingReturnTypeContext>(0);
}


size_t ReentParser::LambdaDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleLambdaDeclarator;
}

void ReentParser::LambdaDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLambdaDeclarator(this);
}

void ReentParser::LambdaDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLambdaDeclarator(this);
}

ReentParser::LambdaDeclaratorContext* ReentParser::lambdaDeclarator() {
  LambdaDeclaratorContext *_localctx = _tracker.createInstance<LambdaDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 34, ReentParser::RuleLambdaDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(689);
    match(ReentParser::LeftParen);
    setState(691);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(690);
      parameterDeclarationClause();
    }
    setState(693);
    match(ReentParser::RightParen);
    setState(695);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Mutable) {
      setState(694);
      match(ReentParser::Mutable);
    }
    setState(698);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Noexcept

    || _la == ReentParser::Throw) {
      setState(697);
      exceptionSpecification();
    }
    setState(701);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(700);
      attributeSpecifierSeq();
    }
    setState(704);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Arrow) {
      setState(703);
      trailingReturnType();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PostfixExpressionContext ------------------------------------------------------------------

ReentParser::PostfixExpressionContext::PostfixExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::PrimaryExpressionContext* ReentParser::PostfixExpressionContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::PostfixExpressionContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

ReentParser::TypeNameSpecifierContext* ReentParser::PostfixExpressionContext::typeNameSpecifier() {
  return getRuleContext<ReentParser::TypeNameSpecifierContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::PostfixExpressionContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}

ReentParser::TheTypeIdContext* ReentParser::PostfixExpressionContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Less() {
  return getToken(ReentParser::Less, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Greater() {
  return getToken(ReentParser::Greater, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::PostfixExpressionContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Dynamic_cast() {
  return getToken(ReentParser::Dynamic_cast, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Static_cast() {
  return getToken(ReentParser::Static_cast, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Reinterpret_cast() {
  return getToken(ReentParser::Reinterpret_cast, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Const_cast() {
  return getToken(ReentParser::Const_cast, 0);
}

ReentParser::TypeIdOfTheTypeIdContext* ReentParser::PostfixExpressionContext::typeIdOfTheTypeId() {
  return getRuleContext<ReentParser::TypeIdOfTheTypeIdContext>(0);
}

ReentParser::PostfixExpressionContext* ReentParser::PostfixExpressionContext::postfixExpression() {
  return getRuleContext<ReentParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::ExpressionListContext* ReentParser::PostfixExpressionContext::expressionList() {
  return getRuleContext<ReentParser::ExpressionListContext>(0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Dot() {
  return getToken(ReentParser::Dot, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Arrow() {
  return getToken(ReentParser::Arrow, 0);
}

ReentParser::PseudoDestructorNameContext* ReentParser::PostfixExpressionContext::pseudoDestructorName() {
  return getRuleContext<ReentParser::PseudoDestructorNameContext>(0);
}

ReentParser::IdExpressionContext* ReentParser::PostfixExpressionContext::idExpression() {
  return getRuleContext<ReentParser::IdExpressionContext>(0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::Template() {
  return getToken(ReentParser::Template, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::PlusPlus() {
  return getToken(ReentParser::PlusPlus, 0);
}

tree::TerminalNode* ReentParser::PostfixExpressionContext::MinusMinus() {
  return getToken(ReentParser::MinusMinus, 0);
}


size_t ReentParser::PostfixExpressionContext::getRuleIndex() const {
  return ReentParser::RulePostfixExpression;
}

void ReentParser::PostfixExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPostfixExpression(this);
}

void ReentParser::PostfixExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPostfixExpression(this);
}


ReentParser::PostfixExpressionContext* ReentParser::postfixExpression() {
   return postfixExpression(0);
}

ReentParser::PostfixExpressionContext* ReentParser::postfixExpression(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ReentParser::PostfixExpressionContext *_localctx = _tracker.createInstance<PostfixExpressionContext>(_ctx, parentState);
  ReentParser::PostfixExpressionContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 36;
  enterRecursionRule(_localctx, 36, ReentParser::RulePostfixExpression, precedence);

    size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(731);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 28, _ctx)) {
    case 1: {
      setState(707);
      primaryExpression();
      break;
    }

    case 2: {
      setState(710);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ReentParser::Auto:
        case ReentParser::Begin:
        case ReentParser::Bool:
        case ReentParser::Char:
        case ReentParser::Char16:
        case ReentParser::Char32:
        case ReentParser::Clustered:
        case ReentParser::Common:
        case ReentParser::Decltype:
        case ReentParser::Depends:
        case ReentParser::Double:
        case ReentParser::End:
        case ReentParser::Float:
        case ReentParser::Global:
        case ReentParser::Gpu:
        case ReentParser::Id:
        case ReentParser::In:
        case ReentParser::Int:
        case ReentParser::Local:
        case ReentParser::Long:
        case ReentParser::MarkPreCondition:
        case ReentParser::MarkState:
        case ReentParser::Out:
        case ReentParser::Plan:
        case ReentParser::Reset:
        case ReentParser::Set:
        case ReentParser::Short:
        case ReentParser::Signed:
        case ReentParser::Unsigned:
        case ReentParser::Vectorized:
        case ReentParser::Void:
        case ReentParser::Wchar:
        case ReentParser::Doublecolon:
        case ReentParser::Identifier: {
          setState(708);
          simpleTypeSpecifier();
          break;
        }

        case ReentParser::Typename_: {
          setState(709);
          typeNameSpecifier();
          break;
        }

      default:
        throw NoViableAltException(this);
      }

      setState(712);
      bracedInitList();
      break;
    }

    case 3: {
      setState(714);
      theTypeId();
      break;
    }

    case 4: {
      setState(715);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Const_cast

      || _la == ReentParser::Dynamic_cast || _la == ReentParser::Reinterpret_cast

      || _la == ReentParser::Static_cast)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(716);
      match(ReentParser::Less);
      setState(717);
      theTypeId();
      setState(718);
      match(ReentParser::Greater);
      setState(719);
      match(ReentParser::LeftParen);
      setState(720);
      expression();
      setState(721);
      match(ReentParser::RightParen);
      break;
    }

    case 5: {
      setState(723);
      typeIdOfTheTypeId();
      setState(724);
      match(ReentParser::LeftParen);
      setState(727);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 27, _ctx)) {
      case 1: {
        setState(725);
        expression();
        break;
      }

      case 2: {
        setState(726);
        theTypeId();
        break;
      }

      default:
        break;
      }
      setState(729);
      match(ReentParser::RightParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(762);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        setState(760);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 33, _ctx)) {
        case 1: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(733);

          if (!(precpred(_ctx, 8))) throw FailedPredicateException(this, "precpred(_ctx, 8)");
          setState(734);
          match(ReentParser::LeftBracket);
          setState(737);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 29, _ctx)) {
          case 1: {
            setState(735);
            expression();
            break;
          }

          case 2: {
            setState(736);
            bracedInitList();
            break;
          }

          default:
            break;
          }
          setState(739);
          match(ReentParser::RightBracket);
          break;
        }

        case 2: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(741);

          if (!(precpred(_ctx, 7))) throw FailedPredicateException(this, "precpred(_ctx, 7)");
          setState(742);
          match(ReentParser::LeftParen);
          setState(744);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 30, _ctx)) {
          case 1: {
            setState(743);
            expressionList();
            break;
          }

          default:
            break;
          }
          setState(746);
          match(ReentParser::RightParen);
          break;
        }

        case 3: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          _localctx->planned = previousContext;
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(747);

          if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
          setState(748);
          _la = _input->LA(1);
          if (!(_la == ReentParser::Arrow

          || _la == ReentParser::Dot)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          setState(756);
          _errHandler->sync(this);
          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 32, _ctx)) {
          case 1: {
            setState(750);
            _errHandler->sync(this);

            _la = _input->LA(1);
            if (_la == ReentParser::Template) {
              setState(749);
              match(ReentParser::Template);
            }
            setState(752);
            dynamic_cast<PostfixExpressionContext *>(_localctx)->ident = idExpression();

                      			if ((dynamic_cast<PostfixExpressionContext *>(_localctx)->planned != nullptr ? _input->getText(dynamic_cast<PostfixExpressionContext *>(_localctx)->planned->start, dynamic_cast<PostfixExpressionContext *>(_localctx)->planned->stop) : nullptr) == "__planned__")
                      				if (!in_chain && !in_reenterable)
                      					throw FailedPredicateException(this, "__planned__[.|->]Id not in Chain/Reenterable Procedure");
                      				else if (!_in_gpu_local)
                      					throw FailedPredicateException(this, "__planned__[.|->]Id not inside _local(...) clause in current Chain/Reenterable header");
                      				else
                      					_reent_planned_refs.insert((dynamic_cast<PostfixExpressionContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<PostfixExpressionContext *>(_localctx)->ident->start, dynamic_cast<PostfixExpressionContext *>(_localctx)->ident->stop) : nullptr));
                      		
            break;
          }

          case 2: {
            setState(755);
            pseudoDestructorName();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 4: {
          _localctx = _tracker.createInstance<PostfixExpressionContext>(parentContext, parentState);
          pushNewRecursionContext(_localctx, startState, RulePostfixExpression);
          setState(758);

          if (!(precpred(_ctx, 3))) throw FailedPredicateException(this, "precpred(_ctx, 3)");
          setState(759);
          _la = _input->LA(1);
          if (!(_la == ReentParser::PlusPlus

          || _la == ReentParser::MinusMinus)) {
          _errHandler->recoverInline(this);
          }
          else {
            _errHandler->reportMatch(this);
            consume();
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(764);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 34, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- TypeIdOfTheTypeIdContext ------------------------------------------------------------------

ReentParser::TypeIdOfTheTypeIdContext::TypeIdOfTheTypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TypeIdOfTheTypeIdContext::Typeid_() {
  return getToken(ReentParser::Typeid_, 0);
}


size_t ReentParser::TypeIdOfTheTypeIdContext::getRuleIndex() const {
  return ReentParser::RuleTypeIdOfTheTypeId;
}

void ReentParser::TypeIdOfTheTypeIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeIdOfTheTypeId(this);
}

void ReentParser::TypeIdOfTheTypeIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeIdOfTheTypeId(this);
}

ReentParser::TypeIdOfTheTypeIdContext* ReentParser::typeIdOfTheTypeId() {
  TypeIdOfTheTypeIdContext *_localctx = _tracker.createInstance<TypeIdOfTheTypeIdContext>(_ctx, getState());
  enterRule(_localctx, 38, ReentParser::RuleTypeIdOfTheTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(765);
    match(ReentParser::Typeid_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionListContext ------------------------------------------------------------------

ReentParser::ExpressionListContext::ExpressionListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::InitializerListContext* ReentParser::ExpressionListContext::initializerList() {
  return getRuleContext<ReentParser::InitializerListContext>(0);
}


size_t ReentParser::ExpressionListContext::getRuleIndex() const {
  return ReentParser::RuleExpressionList;
}

void ReentParser::ExpressionListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionList(this);
}

void ReentParser::ExpressionListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionList(this);
}

ReentParser::ExpressionListContext* ReentParser::expressionList() {
  ExpressionListContext *_localctx = _tracker.createInstance<ExpressionListContext>(_ctx, getState());
  enterRule(_localctx, 40, ReentParser::RuleExpressionList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(767);
    initializerList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PseudoDestructorNameContext ------------------------------------------------------------------

ReentParser::PseudoDestructorNameContext::PseudoDestructorNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::PseudoDestructorNameContext::Tilde() {
  return getToken(ReentParser::Tilde, 0);
}

std::vector<ReentParser::TheTypeNameContext *> ReentParser::PseudoDestructorNameContext::theTypeName() {
  return getRuleContexts<ReentParser::TheTypeNameContext>();
}

ReentParser::TheTypeNameContext* ReentParser::PseudoDestructorNameContext::theTypeName(size_t i) {
  return getRuleContext<ReentParser::TheTypeNameContext>(i);
}

ReentParser::NestedNameSpecifierContext* ReentParser::PseudoDestructorNameContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::PseudoDestructorNameContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

tree::TerminalNode* ReentParser::PseudoDestructorNameContext::Template() {
  return getToken(ReentParser::Template, 0);
}

ReentParser::SimpleTemplateIdContext* ReentParser::PseudoDestructorNameContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

ReentParser::DecltypeSpecifierContext* ReentParser::PseudoDestructorNameContext::decltypeSpecifier() {
  return getRuleContext<ReentParser::DecltypeSpecifierContext>(0);
}


size_t ReentParser::PseudoDestructorNameContext::getRuleIndex() const {
  return ReentParser::RulePseudoDestructorName;
}

void ReentParser::PseudoDestructorNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPseudoDestructorName(this);
}

void ReentParser::PseudoDestructorNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPseudoDestructorName(this);
}

ReentParser::PseudoDestructorNameContext* ReentParser::pseudoDestructorName() {
  PseudoDestructorNameContext *_localctx = _tracker.createInstance<PseudoDestructorNameContext>(_ctx, getState());
  enterRule(_localctx, 42, ReentParser::RulePseudoDestructorName);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(788);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 37, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(770);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 35, _ctx)) {
      case 1: {
        setState(769);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(775);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ReentParser::Begin)
        | (1ULL << ReentParser::Clustered)
        | (1ULL << ReentParser::Common)
        | (1ULL << ReentParser::Depends)
        | (1ULL << ReentParser::End)
        | (1ULL << ReentParser::Global)
        | (1ULL << ReentParser::Gpu)
        | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
        | (1ULL << (ReentParser::Local - 65))
        | (1ULL << (ReentParser::MarkPreCondition - 65))
        | (1ULL << (ReentParser::MarkState - 65))
        | (1ULL << (ReentParser::Out - 65))
        | (1ULL << (ReentParser::Plan - 65))
        | (1ULL << (ReentParser::Reset - 65))
        | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

      || _la == ReentParser::Identifier) {
        setState(772);
        theTypeName();
        setState(773);
        match(ReentParser::Doublecolon);
      }
      setState(777);
      match(ReentParser::Tilde);
      setState(778);
      theTypeName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(779);
      nestedNameSpecifier(0);
      setState(780);
      match(ReentParser::Template);
      setState(781);
      simpleTemplateId();
      setState(782);
      match(ReentParser::Doublecolon);
      setState(783);
      match(ReentParser::Tilde);
      setState(784);
      theTypeName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(786);
      match(ReentParser::Tilde);
      setState(787);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryExpressionContext ------------------------------------------------------------------

ReentParser::UnaryExpressionContext::UnaryExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::PostfixExpressionContext* ReentParser::UnaryExpressionContext::postfixExpression() {
  return getRuleContext<ReentParser::PostfixExpressionContext>(0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::Sizeof() {
  return getToken(ReentParser::Sizeof, 0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::TheTypeIdContext* ReentParser::UnaryExpressionContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::UnaryExpressionContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::UnaryExpressionContext* ReentParser::UnaryExpressionContext::unaryExpression() {
  return getRuleContext<ReentParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::PlusPlus() {
  return getToken(ReentParser::PlusPlus, 0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::MinusMinus() {
  return getToken(ReentParser::MinusMinus, 0);
}

ReentParser::UnaryOperatorContext* ReentParser::UnaryExpressionContext::unaryOperator() {
  return getRuleContext<ReentParser::UnaryOperatorContext>(0);
}

ReentParser::CastExpressionContext* ReentParser::UnaryExpressionContext::castExpression() {
  return getRuleContext<ReentParser::CastExpressionContext>(0);
}

tree::TerminalNode* ReentParser::UnaryExpressionContext::Alignof() {
  return getToken(ReentParser::Alignof, 0);
}

ReentParser::NoExceptExpressionContext* ReentParser::UnaryExpressionContext::noExceptExpression() {
  return getRuleContext<ReentParser::NoExceptExpressionContext>(0);
}

ReentParser::NewExpressionContext* ReentParser::UnaryExpressionContext::newExpression() {
  return getRuleContext<ReentParser::NewExpressionContext>(0);
}

ReentParser::DeleteExpressionContext* ReentParser::UnaryExpressionContext::deleteExpression() {
  return getRuleContext<ReentParser::DeleteExpressionContext>(0);
}


size_t ReentParser::UnaryExpressionContext::getRuleIndex() const {
  return ReentParser::RuleUnaryExpression;
}

void ReentParser::UnaryExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryExpression(this);
}

void ReentParser::UnaryExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryExpression(this);
}

ReentParser::UnaryExpressionContext* ReentParser::unaryExpression() {
  UnaryExpressionContext *_localctx = _tracker.createInstance<UnaryExpressionContext>(_ctx, getState());
  enterRule(_localctx, 44, ReentParser::RuleUnaryExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(816);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 39, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(790);
      postfixExpression(0);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(791);
      match(ReentParser::Sizeof);
      setState(801);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ReentParser::LeftParen: {
          setState(792);
          match(ReentParser::LeftParen);
          setState(793);
          theTypeId();
          setState(794);
          match(ReentParser::RightParen);
          break;
        }

        case ReentParser::Ellipsis: {
          setState(796);
          match(ReentParser::Ellipsis);
          setState(797);
          match(ReentParser::LeftParen);
          setState(798);
          anyIdentifier();
          setState(799);
          match(ReentParser::RightParen);
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(803);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Sizeof || _la == ReentParser::PlusPlus

      || _la == ReentParser::MinusMinus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(804);
      unaryExpression();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(805);
      unaryOperator();
      setState(806);
      castExpression();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(808);
      match(ReentParser::Alignof);
      setState(809);
      match(ReentParser::LeftParen);
      setState(810);
      theTypeId();
      setState(811);
      match(ReentParser::RightParen);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(813);
      noExceptExpression();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(814);
      newExpression();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(815);
      deleteExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UnaryOperatorContext ------------------------------------------------------------------

ReentParser::UnaryOperatorContext::UnaryOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::Or() {
  return getToken(ReentParser::Or, 0);
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::Star() {
  return getToken(ReentParser::Star, 0);
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::Plus() {
  return getToken(ReentParser::Plus, 0);
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::Tilde() {
  return getToken(ReentParser::Tilde, 0);
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::Minus() {
  return getToken(ReentParser::Minus, 0);
}

tree::TerminalNode* ReentParser::UnaryOperatorContext::Not() {
  return getToken(ReentParser::Not, 0);
}


size_t ReentParser::UnaryOperatorContext::getRuleIndex() const {
  return ReentParser::RuleUnaryOperator;
}

void ReentParser::UnaryOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUnaryOperator(this);
}

void ReentParser::UnaryOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUnaryOperator(this);
}

ReentParser::UnaryOperatorContext* ReentParser::unaryOperator() {
  UnaryOperatorContext *_localctx = _tracker.createInstance<UnaryOperatorContext>(_ctx, getState());
  enterRule(_localctx, 46, ReentParser::RuleUnaryOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(818);
    _la = _input->LA(1);
    if (!(((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (ReentParser::Plus - 156))
      | (1ULL << (ReentParser::Minus - 156))
      | (1ULL << (ReentParser::Star - 156))
      | (1ULL << (ReentParser::And - 156))
      | (1ULL << (ReentParser::Or - 156))
      | (1ULL << (ReentParser::Tilde - 156))
      | (1ULL << (ReentParser::Not - 156)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewExpressionContext ------------------------------------------------------------------

ReentParser::NewExpressionContext::NewExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NewExpressionContext::New() {
  return getToken(ReentParser::New, 0);
}

ReentParser::NewTypeIdContext* ReentParser::NewExpressionContext::newTypeId() {
  return getRuleContext<ReentParser::NewTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::NewExpressionContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

ReentParser::NewPlacementContext* ReentParser::NewExpressionContext::newPlacement() {
  return getRuleContext<ReentParser::NewPlacementContext>(0);
}

ReentParser::NewInitializerContext* ReentParser::NewExpressionContext::newInitializer() {
  return getRuleContext<ReentParser::NewInitializerContext>(0);
}

tree::TerminalNode* ReentParser::NewExpressionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::TheTypeIdContext* ReentParser::NewExpressionContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::NewExpressionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::NewExpressionContext::getRuleIndex() const {
  return ReentParser::RuleNewExpression;
}

void ReentParser::NewExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewExpression(this);
}

void ReentParser::NewExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewExpression(this);
}

ReentParser::NewExpressionContext* ReentParser::newExpression() {
  NewExpressionContext *_localctx = _tracker.createInstance<NewExpressionContext>(_ctx, getState());
  enterRule(_localctx, 48, ReentParser::RuleNewExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(821);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Doublecolon) {
      setState(820);
      match(ReentParser::Doublecolon);
    }
    setState(823);
    match(ReentParser::New);
    setState(825);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 41, _ctx)) {
    case 1: {
      setState(824);
      newPlacement();
      break;
    }

    default:
      break;
    }
    setState(832);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Cfunnel:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Class:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Const:
      case ReentParser::Csem:
      case ReentParser::Cvar:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::Double:
      case ReentParser::End:
      case ReentParser::Enum:
      case ReentParser::Float:
      case ReentParser::Funnel:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Plan_item_type:
      case ReentParser::Plan_type:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Soft_transact_array:
      case ReentParser::Soft_transact_in:
      case ReentParser::Soft_transact_out:
      case ReentParser::Soft_transact_var:
      case ReentParser::Struct:
      case ReentParser::Typename_:
      case ReentParser::Union:
      case ReentParser::Unsigned:
      case ReentParser::Vectorized:
      case ReentParser::Void:
      case ReentParser::Volatile:
      case ReentParser::Wchar:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        setState(827);
        newTypeId();
        break;
      }

      case ReentParser::LeftParen: {
        setState(828);
        match(ReentParser::LeftParen);
        setState(829);
        theTypeId();
        setState(830);
        match(ReentParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(835);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::LeftParen

    || _la == ReentParser::LeftBrace) {
      setState(834);
      newInitializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewPlacementContext ------------------------------------------------------------------

ReentParser::NewPlacementContext::NewPlacementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NewPlacementContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionListContext* ReentParser::NewPlacementContext::expressionList() {
  return getRuleContext<ReentParser::ExpressionListContext>(0);
}

tree::TerminalNode* ReentParser::NewPlacementContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::NewPlacementContext::getRuleIndex() const {
  return ReentParser::RuleNewPlacement;
}

void ReentParser::NewPlacementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewPlacement(this);
}

void ReentParser::NewPlacementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewPlacement(this);
}

ReentParser::NewPlacementContext* ReentParser::newPlacement() {
  NewPlacementContext *_localctx = _tracker.createInstance<NewPlacementContext>(_ctx, getState());
  enterRule(_localctx, 50, ReentParser::RuleNewPlacement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(837);
    match(ReentParser::LeftParen);
    setState(838);
    expressionList();
    setState(839);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewTypeIdContext ------------------------------------------------------------------

ReentParser::NewTypeIdContext::NewTypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TypeSpecifierSeqContext* ReentParser::NewTypeIdContext::typeSpecifierSeq() {
  return getRuleContext<ReentParser::TypeSpecifierSeqContext>(0);
}

ReentParser::NewDeclaratorContext* ReentParser::NewTypeIdContext::newDeclarator() {
  return getRuleContext<ReentParser::NewDeclaratorContext>(0);
}


size_t ReentParser::NewTypeIdContext::getRuleIndex() const {
  return ReentParser::RuleNewTypeId;
}

void ReentParser::NewTypeIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewTypeId(this);
}

void ReentParser::NewTypeIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewTypeId(this);
}

ReentParser::NewTypeIdContext* ReentParser::newTypeId() {
  NewTypeIdContext *_localctx = _tracker.createInstance<NewTypeIdContext>(_ctx, getState());
  enterRule(_localctx, 52, ReentParser::RuleNewTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(841);
    typeSpecifierSeq();
    setState(843);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 44, _ctx)) {
    case 1: {
      setState(842);
      newDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NewDeclaratorContext ------------------------------------------------------------------

ReentParser::NewDeclaratorContext::NewDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::PointerOperatorContext* ReentParser::NewDeclaratorContext::pointerOperator() {
  return getRuleContext<ReentParser::PointerOperatorContext>(0);
}

ReentParser::NewDeclaratorContext* ReentParser::NewDeclaratorContext::newDeclarator() {
  return getRuleContext<ReentParser::NewDeclaratorContext>(0);
}

ReentParser::NoPointerNewDeclaratorContext* ReentParser::NewDeclaratorContext::noPointerNewDeclarator() {
  return getRuleContext<ReentParser::NoPointerNewDeclaratorContext>(0);
}


size_t ReentParser::NewDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleNewDeclarator;
}

void ReentParser::NewDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewDeclarator(this);
}

void ReentParser::NewDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewDeclarator(this);
}

ReentParser::NewDeclaratorContext* ReentParser::newDeclarator() {
  NewDeclaratorContext *_localctx = _tracker.createInstance<NewDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 54, ReentParser::RuleNewDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(850);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Star:
      case ReentParser::And:
      case ReentParser::AndAnd:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(845);
        pointerOperator();
        setState(847);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 45, _ctx)) {
        case 1: {
          setState(846);
          newDeclarator();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(849);
        noPointerNewDeclarator(0);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoPointerNewDeclaratorContext ------------------------------------------------------------------

ReentParser::NoPointerNewDeclaratorContext::NoPointerNewDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NoPointerNewDeclaratorContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

ReentParser::ExpressionContext* ReentParser::NoPointerNewDeclaratorContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::NoPointerNewDeclaratorContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::NoPointerNewDeclaratorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::NoPointerNewDeclaratorContext* ReentParser::NoPointerNewDeclaratorContext::noPointerNewDeclarator() {
  return getRuleContext<ReentParser::NoPointerNewDeclaratorContext>(0);
}

ReentParser::ConstantExpressionContext* ReentParser::NoPointerNewDeclaratorContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}


size_t ReentParser::NoPointerNewDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleNoPointerNewDeclarator;
}

void ReentParser::NoPointerNewDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoPointerNewDeclarator(this);
}

void ReentParser::NoPointerNewDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoPointerNewDeclarator(this);
}


ReentParser::NoPointerNewDeclaratorContext* ReentParser::noPointerNewDeclarator() {
   return noPointerNewDeclarator(0);
}

ReentParser::NoPointerNewDeclaratorContext* ReentParser::noPointerNewDeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ReentParser::NoPointerNewDeclaratorContext *_localctx = _tracker.createInstance<NoPointerNewDeclaratorContext>(_ctx, parentState);
  ReentParser::NoPointerNewDeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 56;
  enterRecursionRule(_localctx, 56, ReentParser::RuleNoPointerNewDeclarator, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(853);
    match(ReentParser::LeftBracket);
    setState(854);
    expression();
    setState(855);
    match(ReentParser::RightBracket);
    setState(857);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 47, _ctx)) {
    case 1: {
      setState(856);
      attributeSpecifierSeq();
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(868);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NoPointerNewDeclaratorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNoPointerNewDeclarator);
        setState(859);

        if (!(precpred(_ctx, 1))) throw FailedPredicateException(this, "precpred(_ctx, 1)");
        setState(860);
        match(ReentParser::LeftBracket);
        setState(861);
        constantExpression();
        setState(862);
        match(ReentParser::RightBracket);
        setState(864);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 48, _ctx)) {
        case 1: {
          setState(863);
          attributeSpecifierSeq();
          break;
        }

        default:
          break;
        } 
      }
      setState(870);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 49, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- NewInitializerContext ------------------------------------------------------------------

ReentParser::NewInitializerContext::NewInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NewInitializerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::NewInitializerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::ExpressionListContext* ReentParser::NewInitializerContext::expressionList() {
  return getRuleContext<ReentParser::ExpressionListContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::NewInitializerContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}


size_t ReentParser::NewInitializerContext::getRuleIndex() const {
  return ReentParser::RuleNewInitializer;
}

void ReentParser::NewInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNewInitializer(this);
}

void ReentParser::NewInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNewInitializer(this);
}

ReentParser::NewInitializerContext* ReentParser::newInitializer() {
  NewInitializerContext *_localctx = _tracker.createInstance<NewInitializerContext>(_ctx, getState());
  enterRule(_localctx, 58, ReentParser::RuleNewInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(877);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftParen: {
        enterOuterAlt(_localctx, 1);
        setState(871);
        match(ReentParser::LeftParen);
        setState(873);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 50, _ctx)) {
        case 1: {
          setState(872);
          expressionList();
          break;
        }

        default:
          break;
        }
        setState(875);
        match(ReentParser::RightParen);
        break;
      }

      case ReentParser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(876);
        bracedInitList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeleteExpressionContext ------------------------------------------------------------------

ReentParser::DeleteExpressionContext::DeleteExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::DeleteExpressionContext::Delete() {
  return getToken(ReentParser::Delete, 0);
}

ReentParser::CastExpressionContext* ReentParser::DeleteExpressionContext::castExpression() {
  return getRuleContext<ReentParser::CastExpressionContext>(0);
}

tree::TerminalNode* ReentParser::DeleteExpressionContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

tree::TerminalNode* ReentParser::DeleteExpressionContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::DeleteExpressionContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}


size_t ReentParser::DeleteExpressionContext::getRuleIndex() const {
  return ReentParser::RuleDeleteExpression;
}

void ReentParser::DeleteExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeleteExpression(this);
}

void ReentParser::DeleteExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeleteExpression(this);
}

ReentParser::DeleteExpressionContext* ReentParser::deleteExpression() {
  DeleteExpressionContext *_localctx = _tracker.createInstance<DeleteExpressionContext>(_ctx, getState());
  enterRule(_localctx, 60, ReentParser::RuleDeleteExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(880);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Doublecolon) {
      setState(879);
      match(ReentParser::Doublecolon);
    }
    setState(882);
    match(ReentParser::Delete);
    setState(885);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 53, _ctx)) {
    case 1: {
      setState(883);
      match(ReentParser::LeftBracket);
      setState(884);
      match(ReentParser::RightBracket);
      break;
    }

    default:
      break;
    }
    setState(887);
    castExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoExceptExpressionContext ------------------------------------------------------------------

ReentParser::NoExceptExpressionContext::NoExceptExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NoExceptExpressionContext::Noexcept() {
  return getToken(ReentParser::Noexcept, 0);
}

tree::TerminalNode* ReentParser::NoExceptExpressionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::NoExceptExpressionContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::NoExceptExpressionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::NoExceptExpressionContext::getRuleIndex() const {
  return ReentParser::RuleNoExceptExpression;
}

void ReentParser::NoExceptExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoExceptExpression(this);
}

void ReentParser::NoExceptExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoExceptExpression(this);
}

ReentParser::NoExceptExpressionContext* ReentParser::noExceptExpression() {
  NoExceptExpressionContext *_localctx = _tracker.createInstance<NoExceptExpressionContext>(_ctx, getState());
  enterRule(_localctx, 62, ReentParser::RuleNoExceptExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(889);
    match(ReentParser::Noexcept);
    setState(890);
    match(ReentParser::LeftParen);
    setState(891);
    expression();
    setState(892);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CastExpressionContext ------------------------------------------------------------------

ReentParser::CastExpressionContext::CastExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::UnaryExpressionContext* ReentParser::CastExpressionContext::unaryExpression() {
  return getRuleContext<ReentParser::UnaryExpressionContext>(0);
}

tree::TerminalNode* ReentParser::CastExpressionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::TheTypeIdContext* ReentParser::CastExpressionContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::CastExpressionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::CastExpressionContext* ReentParser::CastExpressionContext::castExpression() {
  return getRuleContext<ReentParser::CastExpressionContext>(0);
}


size_t ReentParser::CastExpressionContext::getRuleIndex() const {
  return ReentParser::RuleCastExpression;
}

void ReentParser::CastExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCastExpression(this);
}

void ReentParser::CastExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCastExpression(this);
}

ReentParser::CastExpressionContext* ReentParser::castExpression() {
  CastExpressionContext *_localctx = _tracker.createInstance<CastExpressionContext>(_ctx, getState());
  enterRule(_localctx, 64, ReentParser::RuleCastExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(900);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 54, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(894);
      unaryExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(895);
      match(ReentParser::LeftParen);
      setState(896);
      theTypeId();
      setState(897);
      match(ReentParser::RightParen);
      setState(898);
      castExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerMemberExpressionContext ------------------------------------------------------------------

ReentParser::PointerMemberExpressionContext::PointerMemberExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::CastExpressionContext *> ReentParser::PointerMemberExpressionContext::castExpression() {
  return getRuleContexts<ReentParser::CastExpressionContext>();
}

ReentParser::CastExpressionContext* ReentParser::PointerMemberExpressionContext::castExpression(size_t i) {
  return getRuleContext<ReentParser::CastExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::PointerMemberExpressionContext::DotStar() {
  return getTokens(ReentParser::DotStar);
}

tree::TerminalNode* ReentParser::PointerMemberExpressionContext::DotStar(size_t i) {
  return getToken(ReentParser::DotStar, i);
}

std::vector<tree::TerminalNode *> ReentParser::PointerMemberExpressionContext::ArrowStar() {
  return getTokens(ReentParser::ArrowStar);
}

tree::TerminalNode* ReentParser::PointerMemberExpressionContext::ArrowStar(size_t i) {
  return getToken(ReentParser::ArrowStar, i);
}


size_t ReentParser::PointerMemberExpressionContext::getRuleIndex() const {
  return ReentParser::RulePointerMemberExpression;
}

void ReentParser::PointerMemberExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerMemberExpression(this);
}

void ReentParser::PointerMemberExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerMemberExpression(this);
}

ReentParser::PointerMemberExpressionContext* ReentParser::pointerMemberExpression() {
  PointerMemberExpressionContext *_localctx = _tracker.createInstance<PointerMemberExpressionContext>(_ctx, getState());
  enterRule(_localctx, 66, ReentParser::RulePointerMemberExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(902);
    castExpression();
    setState(907);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::ArrowStar

    || _la == ReentParser::DotStar) {
      setState(903);
      _la = _input->LA(1);
      if (!(_la == ReentParser::ArrowStar

      || _la == ReentParser::DotStar)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(904);
      castExpression();
      setState(909);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MultiplicativeExpressionContext ------------------------------------------------------------------

ReentParser::MultiplicativeExpressionContext::MultiplicativeExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::PointerMemberExpressionContext *> ReentParser::MultiplicativeExpressionContext::pointerMemberExpression() {
  return getRuleContexts<ReentParser::PointerMemberExpressionContext>();
}

ReentParser::PointerMemberExpressionContext* ReentParser::MultiplicativeExpressionContext::pointerMemberExpression(size_t i) {
  return getRuleContext<ReentParser::PointerMemberExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::MultiplicativeExpressionContext::Star() {
  return getTokens(ReentParser::Star);
}

tree::TerminalNode* ReentParser::MultiplicativeExpressionContext::Star(size_t i) {
  return getToken(ReentParser::Star, i);
}

std::vector<tree::TerminalNode *> ReentParser::MultiplicativeExpressionContext::Div() {
  return getTokens(ReentParser::Div);
}

tree::TerminalNode* ReentParser::MultiplicativeExpressionContext::Div(size_t i) {
  return getToken(ReentParser::Div, i);
}

std::vector<tree::TerminalNode *> ReentParser::MultiplicativeExpressionContext::Mod() {
  return getTokens(ReentParser::Mod);
}

tree::TerminalNode* ReentParser::MultiplicativeExpressionContext::Mod(size_t i) {
  return getToken(ReentParser::Mod, i);
}


size_t ReentParser::MultiplicativeExpressionContext::getRuleIndex() const {
  return ReentParser::RuleMultiplicativeExpression;
}

void ReentParser::MultiplicativeExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMultiplicativeExpression(this);
}

void ReentParser::MultiplicativeExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMultiplicativeExpression(this);
}

ReentParser::MultiplicativeExpressionContext* ReentParser::multiplicativeExpression() {
  MultiplicativeExpressionContext *_localctx = _tracker.createInstance<MultiplicativeExpressionContext>(_ctx, getState());
  enterRule(_localctx, 68, ReentParser::RuleMultiplicativeExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(910);
    pointerMemberExpression();
    setState(915);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (((((_la - 158) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 158)) & ((1ULL << (ReentParser::Star - 158))
      | (1ULL << (ReentParser::Div - 158))
      | (1ULL << (ReentParser::Mod - 158)))) != 0)) {
      setState(911);
      _la = _input->LA(1);
      if (!(((((_la - 158) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 158)) & ((1ULL << (ReentParser::Star - 158))
        | (1ULL << (ReentParser::Div - 158))
        | (1ULL << (ReentParser::Mod - 158)))) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(912);
      pointerMemberExpression();
      setState(917);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AdditiveExpressionContext ------------------------------------------------------------------

ReentParser::AdditiveExpressionContext::AdditiveExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::MultiplicativeExpressionContext *> ReentParser::AdditiveExpressionContext::multiplicativeExpression() {
  return getRuleContexts<ReentParser::MultiplicativeExpressionContext>();
}

ReentParser::MultiplicativeExpressionContext* ReentParser::AdditiveExpressionContext::multiplicativeExpression(size_t i) {
  return getRuleContext<ReentParser::MultiplicativeExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::AdditiveExpressionContext::Plus() {
  return getTokens(ReentParser::Plus);
}

tree::TerminalNode* ReentParser::AdditiveExpressionContext::Plus(size_t i) {
  return getToken(ReentParser::Plus, i);
}

std::vector<tree::TerminalNode *> ReentParser::AdditiveExpressionContext::Minus() {
  return getTokens(ReentParser::Minus);
}

tree::TerminalNode* ReentParser::AdditiveExpressionContext::Minus(size_t i) {
  return getToken(ReentParser::Minus, i);
}


size_t ReentParser::AdditiveExpressionContext::getRuleIndex() const {
  return ReentParser::RuleAdditiveExpression;
}

void ReentParser::AdditiveExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAdditiveExpression(this);
}

void ReentParser::AdditiveExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAdditiveExpression(this);
}

ReentParser::AdditiveExpressionContext* ReentParser::additiveExpression() {
  AdditiveExpressionContext *_localctx = _tracker.createInstance<AdditiveExpressionContext>(_ctx, getState());
  enterRule(_localctx, 70, ReentParser::RuleAdditiveExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(918);
    multiplicativeExpression();
    setState(923);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Plus

    || _la == ReentParser::Minus) {
      setState(919);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Plus

      || _la == ReentParser::Minus)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(920);
      multiplicativeExpression();
      setState(925);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftExpressionContext ------------------------------------------------------------------

ReentParser::ShiftExpressionContext::ShiftExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AdditiveExpressionContext *> ReentParser::ShiftExpressionContext::additiveExpression() {
  return getRuleContexts<ReentParser::AdditiveExpressionContext>();
}

ReentParser::AdditiveExpressionContext* ReentParser::ShiftExpressionContext::additiveExpression(size_t i) {
  return getRuleContext<ReentParser::AdditiveExpressionContext>(i);
}

std::vector<ReentParser::ShiftOperatorContext *> ReentParser::ShiftExpressionContext::shiftOperator() {
  return getRuleContexts<ReentParser::ShiftOperatorContext>();
}

ReentParser::ShiftOperatorContext* ReentParser::ShiftExpressionContext::shiftOperator(size_t i) {
  return getRuleContext<ReentParser::ShiftOperatorContext>(i);
}


size_t ReentParser::ShiftExpressionContext::getRuleIndex() const {
  return ReentParser::RuleShiftExpression;
}

void ReentParser::ShiftExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftExpression(this);
}

void ReentParser::ShiftExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftExpression(this);
}

ReentParser::ShiftExpressionContext* ReentParser::shiftExpression() {
  ShiftExpressionContext *_localctx = _tracker.createInstance<ShiftExpressionContext>(_ctx, getState());
  enterRule(_localctx, 72, ReentParser::RuleShiftExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(926);
    additiveExpression();
    setState(932);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(927);
        shiftOperator();
        setState(928);
        additiveExpression(); 
      }
      setState(934);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 58, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ShiftOperatorContext ------------------------------------------------------------------

ReentParser::ShiftOperatorContext::ShiftOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ReentParser::ShiftOperatorContext::Greater() {
  return getTokens(ReentParser::Greater);
}

tree::TerminalNode* ReentParser::ShiftOperatorContext::Greater(size_t i) {
  return getToken(ReentParser::Greater, i);
}

std::vector<tree::TerminalNode *> ReentParser::ShiftOperatorContext::Less() {
  return getTokens(ReentParser::Less);
}

tree::TerminalNode* ReentParser::ShiftOperatorContext::Less(size_t i) {
  return getToken(ReentParser::Less, i);
}


size_t ReentParser::ShiftOperatorContext::getRuleIndex() const {
  return ReentParser::RuleShiftOperator;
}

void ReentParser::ShiftOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShiftOperator(this);
}

void ReentParser::ShiftOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShiftOperator(this);
}

ReentParser::ShiftOperatorContext* ReentParser::shiftOperator() {
  ShiftOperatorContext *_localctx = _tracker.createInstance<ShiftOperatorContext>(_ctx, getState());
  enterRule(_localctx, 74, ReentParser::RuleShiftOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(939);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Greater: {
        enterOuterAlt(_localctx, 1);
        setState(935);
        match(ReentParser::Greater);
        setState(936);
        match(ReentParser::Greater);
        break;
      }

      case ReentParser::Less: {
        enterOuterAlt(_localctx, 2);
        setState(937);
        match(ReentParser::Less);
        setState(938);
        match(ReentParser::Less);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RelationalExpressionContext ------------------------------------------------------------------

ReentParser::RelationalExpressionContext::RelationalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::ShiftExpressionContext *> ReentParser::RelationalExpressionContext::shiftExpression() {
  return getRuleContexts<ReentParser::ShiftExpressionContext>();
}

ReentParser::ShiftExpressionContext* ReentParser::RelationalExpressionContext::shiftExpression(size_t i) {
  return getRuleContext<ReentParser::ShiftExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::RelationalExpressionContext::Less() {
  return getTokens(ReentParser::Less);
}

tree::TerminalNode* ReentParser::RelationalExpressionContext::Less(size_t i) {
  return getToken(ReentParser::Less, i);
}

std::vector<tree::TerminalNode *> ReentParser::RelationalExpressionContext::Greater() {
  return getTokens(ReentParser::Greater);
}

tree::TerminalNode* ReentParser::RelationalExpressionContext::Greater(size_t i) {
  return getToken(ReentParser::Greater, i);
}

std::vector<tree::TerminalNode *> ReentParser::RelationalExpressionContext::LessEqual() {
  return getTokens(ReentParser::LessEqual);
}

tree::TerminalNode* ReentParser::RelationalExpressionContext::LessEqual(size_t i) {
  return getToken(ReentParser::LessEqual, i);
}

std::vector<tree::TerminalNode *> ReentParser::RelationalExpressionContext::GreaterEqual() {
  return getTokens(ReentParser::GreaterEqual);
}

tree::TerminalNode* ReentParser::RelationalExpressionContext::GreaterEqual(size_t i) {
  return getToken(ReentParser::GreaterEqual, i);
}


size_t ReentParser::RelationalExpressionContext::getRuleIndex() const {
  return ReentParser::RuleRelationalExpression;
}

void ReentParser::RelationalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRelationalExpression(this);
}

void ReentParser::RelationalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRelationalExpression(this);
}

ReentParser::RelationalExpressionContext* ReentParser::relationalExpression() {
  RelationalExpressionContext *_localctx = _tracker.createInstance<RelationalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 76, ReentParser::RuleRelationalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(941);
    shiftExpression();
    setState(946);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(942);
        _la = _input->LA(1);
        if (!(((((_la - 167) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 167)) & ((1ULL << (ReentParser::Less - 167))
          | (1ULL << (ReentParser::Greater - 167))
          | (1ULL << (ReentParser::LessEqual - 167))
          | (1ULL << (ReentParser::GreaterEqual - 167)))) != 0))) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(943);
        shiftExpression(); 
      }
      setState(948);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 60, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EqualityExpressionContext ------------------------------------------------------------------

ReentParser::EqualityExpressionContext::EqualityExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::RelationalExpressionContext *> ReentParser::EqualityExpressionContext::relationalExpression() {
  return getRuleContexts<ReentParser::RelationalExpressionContext>();
}

ReentParser::RelationalExpressionContext* ReentParser::EqualityExpressionContext::relationalExpression(size_t i) {
  return getRuleContext<ReentParser::RelationalExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::EqualityExpressionContext::Equal() {
  return getTokens(ReentParser::Equal);
}

tree::TerminalNode* ReentParser::EqualityExpressionContext::Equal(size_t i) {
  return getToken(ReentParser::Equal, i);
}

std::vector<tree::TerminalNode *> ReentParser::EqualityExpressionContext::NotEqual() {
  return getTokens(ReentParser::NotEqual);
}

tree::TerminalNode* ReentParser::EqualityExpressionContext::NotEqual(size_t i) {
  return getToken(ReentParser::NotEqual, i);
}


size_t ReentParser::EqualityExpressionContext::getRuleIndex() const {
  return ReentParser::RuleEqualityExpression;
}

void ReentParser::EqualityExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEqualityExpression(this);
}

void ReentParser::EqualityExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEqualityExpression(this);
}

ReentParser::EqualityExpressionContext* ReentParser::equalityExpression() {
  EqualityExpressionContext *_localctx = _tracker.createInstance<EqualityExpressionContext>(_ctx, getState());
  enterRule(_localctx, 78, ReentParser::RuleEqualityExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(949);
    relationalExpression();
    setState(954);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Equal

    || _la == ReentParser::NotEqual) {
      setState(950);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Equal

      || _la == ReentParser::NotEqual)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(951);
      relationalExpression();
      setState(956);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AndExpressionContext ------------------------------------------------------------------

ReentParser::AndExpressionContext::AndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::EqualityExpressionContext *> ReentParser::AndExpressionContext::equalityExpression() {
  return getRuleContexts<ReentParser::EqualityExpressionContext>();
}

ReentParser::EqualityExpressionContext* ReentParser::AndExpressionContext::equalityExpression(size_t i) {
  return getRuleContext<ReentParser::EqualityExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::AndExpressionContext::And() {
  return getTokens(ReentParser::And);
}

tree::TerminalNode* ReentParser::AndExpressionContext::And(size_t i) {
  return getToken(ReentParser::And, i);
}


size_t ReentParser::AndExpressionContext::getRuleIndex() const {
  return ReentParser::RuleAndExpression;
}

void ReentParser::AndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAndExpression(this);
}

void ReentParser::AndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAndExpression(this);
}

ReentParser::AndExpressionContext* ReentParser::andExpression() {
  AndExpressionContext *_localctx = _tracker.createInstance<AndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 80, ReentParser::RuleAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(957);
    equalityExpression();
    setState(962);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::And) {
      setState(958);
      match(ReentParser::And);
      setState(959);
      equalityExpression();
      setState(964);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExclusiveOrExpressionContext ------------------------------------------------------------------

ReentParser::ExclusiveOrExpressionContext::ExclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AndExpressionContext *> ReentParser::ExclusiveOrExpressionContext::andExpression() {
  return getRuleContexts<ReentParser::AndExpressionContext>();
}

ReentParser::AndExpressionContext* ReentParser::ExclusiveOrExpressionContext::andExpression(size_t i) {
  return getRuleContext<ReentParser::AndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::ExclusiveOrExpressionContext::Caret() {
  return getTokens(ReentParser::Caret);
}

tree::TerminalNode* ReentParser::ExclusiveOrExpressionContext::Caret(size_t i) {
  return getToken(ReentParser::Caret, i);
}


size_t ReentParser::ExclusiveOrExpressionContext::getRuleIndex() const {
  return ReentParser::RuleExclusiveOrExpression;
}

void ReentParser::ExclusiveOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExclusiveOrExpression(this);
}

void ReentParser::ExclusiveOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExclusiveOrExpression(this);
}

ReentParser::ExclusiveOrExpressionContext* ReentParser::exclusiveOrExpression() {
  ExclusiveOrExpressionContext *_localctx = _tracker.createInstance<ExclusiveOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 82, ReentParser::RuleExclusiveOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(965);
    andExpression();
    setState(970);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Caret) {
      setState(966);
      match(ReentParser::Caret);
      setState(967);
      andExpression();
      setState(972);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InclusiveOrExpressionContext ------------------------------------------------------------------

ReentParser::InclusiveOrExpressionContext::InclusiveOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::ExclusiveOrExpressionContext *> ReentParser::InclusiveOrExpressionContext::exclusiveOrExpression() {
  return getRuleContexts<ReentParser::ExclusiveOrExpressionContext>();
}

ReentParser::ExclusiveOrExpressionContext* ReentParser::InclusiveOrExpressionContext::exclusiveOrExpression(size_t i) {
  return getRuleContext<ReentParser::ExclusiveOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::InclusiveOrExpressionContext::Or() {
  return getTokens(ReentParser::Or);
}

tree::TerminalNode* ReentParser::InclusiveOrExpressionContext::Or(size_t i) {
  return getToken(ReentParser::Or, i);
}


size_t ReentParser::InclusiveOrExpressionContext::getRuleIndex() const {
  return ReentParser::RuleInclusiveOrExpression;
}

void ReentParser::InclusiveOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInclusiveOrExpression(this);
}

void ReentParser::InclusiveOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInclusiveOrExpression(this);
}

ReentParser::InclusiveOrExpressionContext* ReentParser::inclusiveOrExpression() {
  InclusiveOrExpressionContext *_localctx = _tracker.createInstance<InclusiveOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 84, ReentParser::RuleInclusiveOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(973);
    exclusiveOrExpression();
    setState(978);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Or) {
      setState(974);
      match(ReentParser::Or);
      setState(975);
      exclusiveOrExpression();
      setState(980);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalAndExpressionContext ------------------------------------------------------------------

ReentParser::LogicalAndExpressionContext::LogicalAndExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::InclusiveOrExpressionContext *> ReentParser::LogicalAndExpressionContext::inclusiveOrExpression() {
  return getRuleContexts<ReentParser::InclusiveOrExpressionContext>();
}

ReentParser::InclusiveOrExpressionContext* ReentParser::LogicalAndExpressionContext::inclusiveOrExpression(size_t i) {
  return getRuleContext<ReentParser::InclusiveOrExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::LogicalAndExpressionContext::AndAnd() {
  return getTokens(ReentParser::AndAnd);
}

tree::TerminalNode* ReentParser::LogicalAndExpressionContext::AndAnd(size_t i) {
  return getToken(ReentParser::AndAnd, i);
}


size_t ReentParser::LogicalAndExpressionContext::getRuleIndex() const {
  return ReentParser::RuleLogicalAndExpression;
}

void ReentParser::LogicalAndExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalAndExpression(this);
}

void ReentParser::LogicalAndExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalAndExpression(this);
}

ReentParser::LogicalAndExpressionContext* ReentParser::logicalAndExpression() {
  LogicalAndExpressionContext *_localctx = _tracker.createInstance<LogicalAndExpressionContext>(_ctx, getState());
  enterRule(_localctx, 86, ReentParser::RuleLogicalAndExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(981);
    inclusiveOrExpression();
    setState(986);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::AndAnd) {
      setState(982);
      match(ReentParser::AndAnd);
      setState(983);
      inclusiveOrExpression();
      setState(988);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LogicalOrExpressionContext ------------------------------------------------------------------

ReentParser::LogicalOrExpressionContext::LogicalOrExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::LogicalAndExpressionContext *> ReentParser::LogicalOrExpressionContext::logicalAndExpression() {
  return getRuleContexts<ReentParser::LogicalAndExpressionContext>();
}

ReentParser::LogicalAndExpressionContext* ReentParser::LogicalOrExpressionContext::logicalAndExpression(size_t i) {
  return getRuleContext<ReentParser::LogicalAndExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::LogicalOrExpressionContext::OrOr() {
  return getTokens(ReentParser::OrOr);
}

tree::TerminalNode* ReentParser::LogicalOrExpressionContext::OrOr(size_t i) {
  return getToken(ReentParser::OrOr, i);
}


size_t ReentParser::LogicalOrExpressionContext::getRuleIndex() const {
  return ReentParser::RuleLogicalOrExpression;
}

void ReentParser::LogicalOrExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLogicalOrExpression(this);
}

void ReentParser::LogicalOrExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLogicalOrExpression(this);
}

ReentParser::LogicalOrExpressionContext* ReentParser::logicalOrExpression() {
  LogicalOrExpressionContext *_localctx = _tracker.createInstance<LogicalOrExpressionContext>(_ctx, getState());
  enterRule(_localctx, 88, ReentParser::RuleLogicalOrExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(989);
    logicalAndExpression();
    setState(994);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::OrOr) {
      setState(990);
      match(ReentParser::OrOr);
      setState(991);
      logicalAndExpression();
      setState(996);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionalExpressionContext ------------------------------------------------------------------

ReentParser::ConditionalExpressionContext::ConditionalExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::LogicalOrExpressionContext* ReentParser::ConditionalExpressionContext::logicalOrExpression() {
  return getRuleContext<ReentParser::LogicalOrExpressionContext>(0);
}

tree::TerminalNode* ReentParser::ConditionalExpressionContext::Question() {
  return getToken(ReentParser::Question, 0);
}

ReentParser::ExpressionContext* ReentParser::ConditionalExpressionContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::ConditionalExpressionContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::ConditionalExpressionContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}


size_t ReentParser::ConditionalExpressionContext::getRuleIndex() const {
  return ReentParser::RuleConditionalExpression;
}

void ReentParser::ConditionalExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConditionalExpression(this);
}

void ReentParser::ConditionalExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConditionalExpression(this);
}

ReentParser::ConditionalExpressionContext* ReentParser::conditionalExpression() {
  ConditionalExpressionContext *_localctx = _tracker.createInstance<ConditionalExpressionContext>(_ctx, getState());
  enterRule(_localctx, 90, ReentParser::RuleConditionalExpression);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(997);
    logicalOrExpression();
    setState(1003);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Question) {
      setState(998);
      match(ReentParser::Question);
      setState(999);
      expression();
      setState(1000);
      match(ReentParser::Colon);
      setState(1001);
      assignmentExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentExpressionContext ------------------------------------------------------------------

ReentParser::AssignmentExpressionContext::AssignmentExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ConditionalExpressionContext* ReentParser::AssignmentExpressionContext::conditionalExpression() {
  return getRuleContext<ReentParser::ConditionalExpressionContext>(0);
}

ReentParser::LogicalOrExpressionContext* ReentParser::AssignmentExpressionContext::logicalOrExpression() {
  return getRuleContext<ReentParser::LogicalOrExpressionContext>(0);
}

ReentParser::AssignmentOperatorContext* ReentParser::AssignmentExpressionContext::assignmentOperator() {
  return getRuleContext<ReentParser::AssignmentOperatorContext>(0);
}

ReentParser::InitializerClauseContext* ReentParser::AssignmentExpressionContext::initializerClause() {
  return getRuleContext<ReentParser::InitializerClauseContext>(0);
}

ReentParser::ThrowExpressionContext* ReentParser::AssignmentExpressionContext::throwExpression() {
  return getRuleContext<ReentParser::ThrowExpressionContext>(0);
}


size_t ReentParser::AssignmentExpressionContext::getRuleIndex() const {
  return ReentParser::RuleAssignmentExpression;
}

void ReentParser::AssignmentExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentExpression(this);
}

void ReentParser::AssignmentExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentExpression(this);
}

ReentParser::AssignmentExpressionContext* ReentParser::assignmentExpression() {
  AssignmentExpressionContext *_localctx = _tracker.createInstance<AssignmentExpressionContext>(_ctx, getState());
  enterRule(_localctx, 92, ReentParser::RuleAssignmentExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1011);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1005);
      conditionalExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1006);
      logicalOrExpression();
      setState(1007);
      assignmentOperator();
      setState(1008);
      initializerClause();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1010);
      throwExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssignmentOperatorContext ------------------------------------------------------------------

ReentParser::AssignmentOperatorContext::AssignmentOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::StarAssign() {
  return getToken(ReentParser::StarAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::DivAssign() {
  return getToken(ReentParser::DivAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::ModAssign() {
  return getToken(ReentParser::ModAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::PlusAssign() {
  return getToken(ReentParser::PlusAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::MinusAssign() {
  return getToken(ReentParser::MinusAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::RightShiftAssign() {
  return getToken(ReentParser::RightShiftAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::LeftShiftAssign() {
  return getToken(ReentParser::LeftShiftAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::AndAssign() {
  return getToken(ReentParser::AndAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::XorAssign() {
  return getToken(ReentParser::XorAssign, 0);
}

tree::TerminalNode* ReentParser::AssignmentOperatorContext::OrAssign() {
  return getToken(ReentParser::OrAssign, 0);
}


size_t ReentParser::AssignmentOperatorContext::getRuleIndex() const {
  return ReentParser::RuleAssignmentOperator;
}

void ReentParser::AssignmentOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssignmentOperator(this);
}

void ReentParser::AssignmentOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssignmentOperator(this);
}

ReentParser::AssignmentOperatorContext* ReentParser::assignmentOperator() {
  AssignmentOperatorContext *_localctx = _tracker.createInstance<AssignmentOperatorContext>(_ctx, getState());
  enterRule(_localctx, 94, ReentParser::RuleAssignmentOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1013);
    _la = _input->LA(1);
    if (!(((((_la - 166) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 166)) & ((1ULL << (ReentParser::Assign - 166))
      | (1ULL << (ReentParser::PlusAssign - 166))
      | (1ULL << (ReentParser::MinusAssign - 166))
      | (1ULL << (ReentParser::StarAssign - 166))
      | (1ULL << (ReentParser::DivAssign - 166))
      | (1ULL << (ReentParser::ModAssign - 166))
      | (1ULL << (ReentParser::XorAssign - 166))
      | (1ULL << (ReentParser::AndAssign - 166))
      | (1ULL << (ReentParser::OrAssign - 166))
      | (1ULL << (ReentParser::LeftShiftAssign - 166))
      | (1ULL << (ReentParser::RightShiftAssign - 166)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionContext ------------------------------------------------------------------

ReentParser::ExpressionContext::ExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AssignmentExpressionContext *> ReentParser::ExpressionContext::assignmentExpression() {
  return getRuleContexts<ReentParser::AssignmentExpressionContext>();
}

ReentParser::AssignmentExpressionContext* ReentParser::ExpressionContext::assignmentExpression(size_t i) {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::ExpressionContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::ExpressionContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::ExpressionContext::getRuleIndex() const {
  return ReentParser::RuleExpression;
}

void ReentParser::ExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpression(this);
}

void ReentParser::ExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpression(this);
}

ReentParser::ExpressionContext* ReentParser::expression() {
  ExpressionContext *_localctx = _tracker.createInstance<ExpressionContext>(_ctx, getState());
  enterRule(_localctx, 96, ReentParser::RuleExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1015);
    assignmentExpression();
    setState(1020);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1016);
        match(ReentParser::Comma);
        setState(1017);
        assignmentExpression(); 
      }
      setState(1022);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstantExpressionContext ------------------------------------------------------------------

ReentParser::ConstantExpressionContext::ConstantExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ConditionalExpressionContext* ReentParser::ConstantExpressionContext::conditionalExpression() {
  return getRuleContext<ReentParser::ConditionalExpressionContext>(0);
}


size_t ReentParser::ConstantExpressionContext::getRuleIndex() const {
  return ReentParser::RuleConstantExpression;
}

void ReentParser::ConstantExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstantExpression(this);
}

void ReentParser::ConstantExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstantExpression(this);
}

ReentParser::ConstantExpressionContext* ReentParser::constantExpression() {
  ConstantExpressionContext *_localctx = _tracker.createInstance<ConstantExpressionContext>(_ctx, getState());
  enterRule(_localctx, 98, ReentParser::RuleConstantExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1023);
    conditionalExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementContext ------------------------------------------------------------------

ReentParser::StatementContext::StatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::LabeledStatementContext* ReentParser::StatementContext::labeledStatement() {
  return getRuleContext<ReentParser::LabeledStatementContext>(0);
}

ReentParser::Start_chainContext* ReentParser::StatementContext::start_chain() {
  return getRuleContext<ReentParser::Start_chainContext>(0);
}

ReentParser::Start_topologyContext* ReentParser::StatementContext::start_topology() {
  return getRuleContext<ReentParser::Start_topologyContext>(0);
}

ReentParser::Fill_into_planContext* ReentParser::StatementContext::fill_into_plan() {
  return getRuleContext<ReentParser::Fill_into_planContext>(0);
}

ReentParser::Fill_from_planContext* ReentParser::StatementContext::fill_from_plan() {
  return getRuleContext<ReentParser::Fill_from_planContext>(0);
}

ReentParser::Plan_criticalContext* ReentParser::StatementContext::plan_critical() {
  return getRuleContext<ReentParser::Plan_criticalContext>(0);
}

ReentParser::Reent_statementContext* ReentParser::StatementContext::reent_statement() {
  return getRuleContext<ReentParser::Reent_statementContext>(0);
}

ReentParser::Chain_statementContext* ReentParser::StatementContext::chain_statement() {
  return getRuleContext<ReentParser::Chain_statementContext>(0);
}

ReentParser::Reent_special_callContext* ReentParser::StatementContext::reent_special_call() {
  return getRuleContext<ReentParser::Reent_special_callContext>(0);
}

ReentParser::Atomic_blockContext* ReentParser::StatementContext::atomic_block() {
  return getRuleContext<ReentParser::Atomic_blockContext>(0);
}

ReentParser::Soft_atomic_blockContext* ReentParser::StatementContext::soft_atomic_block() {
  return getRuleContext<ReentParser::Soft_atomic_blockContext>(0);
}

ReentParser::Qualified_call_statementContext* ReentParser::StatementContext::qualified_call_statement() {
  return getRuleContext<ReentParser::Qualified_call_statementContext>(0);
}

ReentParser::DeclarationStatementContext* ReentParser::StatementContext::declarationStatement() {
  return getRuleContext<ReentParser::DeclarationStatementContext>(0);
}

ReentParser::ExpressionStatementContext* ReentParser::StatementContext::expressionStatement() {
  return getRuleContext<ReentParser::ExpressionStatementContext>(0);
}

ReentParser::CompoundStatementContext* ReentParser::StatementContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}

ReentParser::SelectionStatementContext* ReentParser::StatementContext::selectionStatement() {
  return getRuleContext<ReentParser::SelectionStatementContext>(0);
}

ReentParser::IterationStatementContext* ReentParser::StatementContext::iterationStatement() {
  return getRuleContext<ReentParser::IterationStatementContext>(0);
}

ReentParser::JumpStatementContext* ReentParser::StatementContext::jumpStatement() {
  return getRuleContext<ReentParser::JumpStatementContext>(0);
}

ReentParser::TryBlockContext* ReentParser::StatementContext::tryBlock() {
  return getRuleContext<ReentParser::TryBlockContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::StatementContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::StatementContext::getRuleIndex() const {
  return ReentParser::RuleStatement;
}

void ReentParser::StatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatement(this);
}

void ReentParser::StatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatement(this);
}

ReentParser::StatementContext* ReentParser::statement() {
  StatementContext *_localctx = _tracker.createInstance<StatementContext>(_ctx, getState());
  enterRule(_localctx, 100, ReentParser::RuleStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1049);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 72, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1025);
      labeledStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1026);
      start_chain();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1027);
      start_topology();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1028);
      fill_into_plan();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1029);
      fill_from_plan();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1030);
      plan_critical();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1031);
      reent_statement();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1032);
      chain_statement();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1033);
      reent_special_call();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1034);
      atomic_block();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1035);
      soft_atomic_block();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1036);
      qualified_call_statement();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1037);
      declarationStatement();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1039);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx)) {
      case 1: {
        setState(1038);
        attributeSpecifierSeq();
        break;
      }

      default:
        break;
      }
      setState(1047);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 71, _ctx)) {
      case 1: {
        setState(1041);
        expressionStatement();
        break;
      }

      case 2: {
        setState(1042);
        compoundStatement();
        break;
      }

      case 3: {
        setState(1043);
        selectionStatement();
        break;
      }

      case 4: {
        setState(1044);
        iterationStatement();
        break;
      }

      case 5: {
        setState(1045);
        jumpStatement();
        break;
      }

      case 6: {
        setState(1046);
        tryBlock();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LabeledStatementContext ------------------------------------------------------------------

ReentParser::LabeledStatementContext::LabeledStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::LabeledStatementContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::StatementContext* ReentParser::LabeledStatementContext::statement() {
  return getRuleContext<ReentParser::StatementContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::LabeledStatementContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::LabeledStatementContext::Case() {
  return getToken(ReentParser::Case, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::LabeledStatementContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::LabeledStatementContext::Default() {
  return getToken(ReentParser::Default, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::LabeledStatementContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::LabeledStatementContext::getRuleIndex() const {
  return ReentParser::RuleLabeledStatement;
}

void ReentParser::LabeledStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLabeledStatement(this);
}

void ReentParser::LabeledStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLabeledStatement(this);
}

ReentParser::LabeledStatementContext* ReentParser::labeledStatement() {
  LabeledStatementContext *_localctx = _tracker.createInstance<LabeledStatementContext>(_ctx, getState());
  enterRule(_localctx, 102, ReentParser::RuleLabeledStatement);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1052);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(1051);
      attributeSpecifierSeq();
    }
    setState(1058);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Identifier: {
        setState(1054);
        anyIdentifier();
        break;
      }

      case ReentParser::Case: {
        setState(1055);
        match(ReentParser::Case);
        setState(1056);
        constantExpression();
        break;
      }

      case ReentParser::Default: {
        setState(1057);
        match(ReentParser::Default);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1060);
    match(ReentParser::Colon);
    setState(1061);
    statement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fill_into_planContext ------------------------------------------------------------------

ReentParser::Fill_into_planContext::Fill_into_planContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Fill_into_planContext::Star() {
  return getToken(ReentParser::Star, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Fill_into_planContext::Less() {
  return getTokens(ReentParser::Less);
}

tree::TerminalNode* ReentParser::Fill_into_planContext::Less(size_t i) {
  return getToken(ReentParser::Less, i);
}

tree::TerminalNode* ReentParser::Fill_into_planContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

std::vector<ReentParser::Reent_fillerContext *> ReentParser::Fill_into_planContext::reent_filler() {
  return getRuleContexts<ReentParser::Reent_fillerContext>();
}

ReentParser::Reent_fillerContext* ReentParser::Fill_into_planContext::reent_filler(size_t i) {
  return getRuleContext<ReentParser::Reent_fillerContext>(i);
}

tree::TerminalNode* ReentParser::Fill_into_planContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

tree::TerminalNode* ReentParser::Fill_into_planContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::Fill_into_planContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Fill_into_planContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::Fill_into_planContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::Fill_into_planContext::getRuleIndex() const {
  return ReentParser::RuleFill_into_plan;
}

void ReentParser::Fill_into_planContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFill_into_plan(this);
}

void ReentParser::Fill_into_planContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFill_into_plan(this);
}

ReentParser::Fill_into_planContext* ReentParser::fill_into_plan() {
  Fill_into_planContext *_localctx = _tracker.createInstance<Fill_into_planContext>(_ctx, getState());
  enterRule(_localctx, 104, ReentParser::RuleFill_into_plan);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1063);
    match(ReentParser::Star);
    setState(1064);
    dynamic_cast<Fill_into_planContext *>(_localctx)->ident = match(ReentParser::Identifier);
    setState(1065);
    match(ReentParser::Less);
    setState(1066);
    match(ReentParser::Less);
    setState(1067);
    match(ReentParser::LeftBracket);
     if (reenterables.find((dynamic_cast<Fill_into_planContext *>(_localctx)->ident != nullptr ? dynamic_cast<Fill_into_planContext *>(_localctx)->ident->getText() : "")) == reenterables.end() || (reenterables[(dynamic_cast<Fill_into_planContext *>(_localctx)->ident != nullptr ? dynamic_cast<Fill_into_planContext *>(_localctx)->ident->getText() : "")] & static_flag) == 0)
    		throw FailedPredicateException(this, "This action can be applied to Static Reenterable Procedure only");
    	
    setState(1069);
    reent_filler();
    setState(1074);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(1070);
      match(ReentParser::Comma);
      setState(1071);
      reent_filler();
      setState(1076);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1077);
    match(ReentParser::RightBracket);
    setState(1078);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Fill_from_planContext ------------------------------------------------------------------

ReentParser::Fill_from_planContext::Fill_from_planContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Fill_from_planContext::Star() {
  return getToken(ReentParser::Star, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Fill_from_planContext::Greater() {
  return getTokens(ReentParser::Greater);
}

tree::TerminalNode* ReentParser::Fill_from_planContext::Greater(size_t i) {
  return getToken(ReentParser::Greater, i);
}

tree::TerminalNode* ReentParser::Fill_from_planContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

std::vector<ReentParser::Reent_readerContext *> ReentParser::Fill_from_planContext::reent_reader() {
  return getRuleContexts<ReentParser::Reent_readerContext>();
}

ReentParser::Reent_readerContext* ReentParser::Fill_from_planContext::reent_reader(size_t i) {
  return getRuleContext<ReentParser::Reent_readerContext>(i);
}

tree::TerminalNode* ReentParser::Fill_from_planContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

tree::TerminalNode* ReentParser::Fill_from_planContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::Fill_from_planContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Fill_from_planContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::Fill_from_planContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::Fill_from_planContext::getRuleIndex() const {
  return ReentParser::RuleFill_from_plan;
}

void ReentParser::Fill_from_planContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFill_from_plan(this);
}

void ReentParser::Fill_from_planContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFill_from_plan(this);
}

ReentParser::Fill_from_planContext* ReentParser::fill_from_plan() {
  Fill_from_planContext *_localctx = _tracker.createInstance<Fill_from_planContext>(_ctx, getState());
  enterRule(_localctx, 106, ReentParser::RuleFill_from_plan);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1080);
    match(ReentParser::Star);
    setState(1081);
    dynamic_cast<Fill_from_planContext *>(_localctx)->ident = match(ReentParser::Identifier);
    setState(1082);
    match(ReentParser::Greater);
    setState(1083);
    match(ReentParser::Greater);
    setState(1084);
    match(ReentParser::LeftBracket);
     if (reenterables.find((dynamic_cast<Fill_from_planContext *>(_localctx)->ident != nullptr ? dynamic_cast<Fill_from_planContext *>(_localctx)->ident->getText() : "")) == reenterables.end() || (reenterables[(dynamic_cast<Fill_from_planContext *>(_localctx)->ident != nullptr ? dynamic_cast<Fill_from_planContext *>(_localctx)->ident->getText() : "")] & static_flag) == 0)
    		throw FailedPredicateException(this, "This action can be applied to Static Reenterable Procedure only");
    	
    setState(1086);
    reent_reader();
    setState(1091);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(1087);
      match(ReentParser::Comma);
      setState(1088);
      reent_reader();
      setState(1093);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1094);
    match(ReentParser::RightBracket);
    setState(1095);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_fillerContext ------------------------------------------------------------------

ReentParser::Reent_fillerContext::Reent_fillerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_fillerContext::Underscore() {
  return getToken(ReentParser::Underscore, 0);
}

ReentParser::Reent_filler_arrayContext* ReentParser::Reent_fillerContext::reent_filler_array() {
  return getRuleContext<ReentParser::Reent_filler_arrayContext>(0);
}

ReentParser::ExpressionContext* ReentParser::Reent_fillerContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}


size_t ReentParser::Reent_fillerContext::getRuleIndex() const {
  return ReentParser::RuleReent_filler;
}

void ReentParser::Reent_fillerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_filler(this);
}

void ReentParser::Reent_fillerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_filler(this);
}

ReentParser::Reent_fillerContext* ReentParser::reent_filler() {
  Reent_fillerContext *_localctx = _tracker.createInstance<Reent_fillerContext>(_ctx, getState());
  enterRule(_localctx, 108, ReentParser::RuleReent_filler);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1100);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 77, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1097);
      match(ReentParser::Underscore);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1098);
      reent_filler_array();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1099);
      expression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_readerContext ------------------------------------------------------------------

ReentParser::Reent_readerContext::Reent_readerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_readerContext::Underscore() {
  return getToken(ReentParser::Underscore, 0);
}

ReentParser::Reent_filler_arrayContext* ReentParser::Reent_readerContext::reent_filler_array() {
  return getRuleContext<ReentParser::Reent_filler_arrayContext>(0);
}

tree::TerminalNode* ReentParser::Reent_readerContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}


size_t ReentParser::Reent_readerContext::getRuleIndex() const {
  return ReentParser::RuleReent_reader;
}

void ReentParser::Reent_readerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_reader(this);
}

void ReentParser::Reent_readerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_reader(this);
}

ReentParser::Reent_readerContext* ReentParser::reent_reader() {
  Reent_readerContext *_localctx = _tracker.createInstance<Reent_readerContext>(_ctx, getState());
  enterRule(_localctx, 110, ReentParser::RuleReent_reader);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1105);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1102);
      match(ReentParser::Underscore);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1103);
      reent_filler_array();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1104);
      match(ReentParser::Identifier);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_filler_arrayContext ------------------------------------------------------------------

ReentParser::Reent_filler_arrayContext::Reent_filler_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_filler_arrayContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Reent_filler_arrayContext::LeftBracket() {
  return getTokens(ReentParser::LeftBracket);
}

tree::TerminalNode* ReentParser::Reent_filler_arrayContext::LeftBracket(size_t i) {
  return getToken(ReentParser::LeftBracket, i);
}

std::vector<tree::TerminalNode *> ReentParser::Reent_filler_arrayContext::RightBracket() {
  return getTokens(ReentParser::RightBracket);
}

tree::TerminalNode* ReentParser::Reent_filler_arrayContext::RightBracket(size_t i) {
  return getToken(ReentParser::RightBracket, i);
}


size_t ReentParser::Reent_filler_arrayContext::getRuleIndex() const {
  return ReentParser::RuleReent_filler_array;
}

void ReentParser::Reent_filler_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_filler_array(this);
}

void ReentParser::Reent_filler_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_filler_array(this);
}

ReentParser::Reent_filler_arrayContext* ReentParser::reent_filler_array() {
  Reent_filler_arrayContext *_localctx = _tracker.createInstance<Reent_filler_arrayContext>(_ctx, getState());
  enterRule(_localctx, 112, ReentParser::RuleReent_filler_array);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1107);
    match(ReentParser::Identifier);
    setState(1110); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1108);
      match(ReentParser::LeftBracket);
      setState(1109);
      match(ReentParser::RightBracket);
      setState(1112); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ReentParser::LeftBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_statementContext ------------------------------------------------------------------

ReentParser::Reent_statementContext::Reent_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Plan_firstContext* ReentParser::Reent_statementContext::plan_first() {
  return getRuleContext<ReentParser::Plan_firstContext>(0);
}

ReentParser::Plan_lastContext* ReentParser::Reent_statementContext::plan_last() {
  return getRuleContext<ReentParser::Plan_lastContext>(0);
}

ReentParser::Plan_stopContext* ReentParser::Reent_statementContext::plan_stop() {
  return getRuleContext<ReentParser::Plan_stopContext>(0);
}

ReentParser::Clear_planContext* ReentParser::Reent_statementContext::clear_plan() {
  return getRuleContext<ReentParser::Clear_planContext>(0);
}

ReentParser::Plan_get_firstContext* ReentParser::Reent_statementContext::plan_get_first() {
  return getRuleContext<ReentParser::Plan_get_firstContext>(0);
}

ReentParser::Plan_get_lastContext* ReentParser::Reent_statementContext::plan_get_last() {
  return getRuleContext<ReentParser::Plan_get_lastContext>(0);
}

ReentParser::Plan_registerContext* ReentParser::Reent_statementContext::plan_register() {
  return getRuleContext<ReentParser::Plan_registerContext>(0);
}

ReentParser::Plan_registered_barrierContext* ReentParser::Reent_statementContext::plan_registered_barrier() {
  return getRuleContext<ReentParser::Plan_registered_barrierContext>(0);
}

ReentParser::Plan_group_firstContext* ReentParser::Reent_statementContext::plan_group_first() {
  return getRuleContext<ReentParser::Plan_group_firstContext>(0);
}

ReentParser::Plan_group_lastContext* ReentParser::Reent_statementContext::plan_group_last() {
  return getRuleContext<ReentParser::Plan_group_lastContext>(0);
}

ReentParser::Plan_group_parallelizeContext* ReentParser::Reent_statementContext::plan_group_parallelize() {
  return getRuleContext<ReentParser::Plan_group_parallelizeContext>(0);
}

ReentParser::Plan_group_vectorizeContext* ReentParser::Reent_statementContext::plan_group_vectorize() {
  return getRuleContext<ReentParser::Plan_group_vectorizeContext>(0);
}

ReentParser::Plan_group_atomizeContext* ReentParser::Reent_statementContext::plan_group_atomize() {
  return getRuleContext<ReentParser::Plan_group_atomizeContext>(0);
}


size_t ReentParser::Reent_statementContext::getRuleIndex() const {
  return ReentParser::RuleReent_statement;
}

void ReentParser::Reent_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_statement(this);
}

void ReentParser::Reent_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_statement(this);
}

ReentParser::Reent_statementContext* ReentParser::reent_statement() {
  Reent_statementContext *_localctx = _tracker.createInstance<Reent_statementContext>(_ctx, getState());
  enterRule(_localctx, 114, ReentParser::RuleReent_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1114);

    if (!((in_reenterable || in_chain))) throw FailedPredicateException(this, "(in_reenterable || in_chain)");
    setState(1128);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Plan_first: {
        setState(1115);
        plan_first();
        break;
      }

      case ReentParser::Plan_last: {
        setState(1116);
        plan_last();
        break;
      }

      case ReentParser::Plan_stop: {
        setState(1117);
        plan_stop();
        break;
      }

      case ReentParser::Clear_plan: {
        setState(1118);
        clear_plan();
        break;
      }

      case ReentParser::Plan_get_first: {
        setState(1119);
        plan_get_first();
        break;
      }

      case ReentParser::Plan_get_last: {
        setState(1120);
        plan_get_last();
        break;
      }

      case ReentParser::Plan_register: {
        setState(1121);
        plan_register();
        break;
      }

      case ReentParser::Plan_registered_barrier: {
        setState(1122);
        plan_registered_barrier();
        break;
      }

      case ReentParser::Plan_group_first: {
        setState(1123);
        plan_group_first();
        break;
      }

      case ReentParser::Plan_group_last: {
        setState(1124);
        plan_group_last();
        break;
      }

      case ReentParser::Plan_group_parallelize: {
        setState(1125);
        plan_group_parallelize();
        break;
      }

      case ReentParser::Plan_group_vectorize: {
        setState(1126);
        plan_group_vectorize();
        break;
      }

      case ReentParser::Plan_group_atomize: {
        setState(1127);
        plan_group_atomize();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chain_statementContext ------------------------------------------------------------------

ReentParser::Chain_statementContext::Chain_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Throw_firstContext* ReentParser::Chain_statementContext::throw_first() {
  return getRuleContext<ReentParser::Throw_firstContext>(0);
}

ReentParser::Throw_lastContext* ReentParser::Chain_statementContext::throw_last() {
  return getRuleContext<ReentParser::Throw_lastContext>(0);
}


size_t ReentParser::Chain_statementContext::getRuleIndex() const {
  return ReentParser::RuleChain_statement;
}

void ReentParser::Chain_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain_statement(this);
}

void ReentParser::Chain_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain_statement(this);
}

ReentParser::Chain_statementContext* ReentParser::chain_statement() {
  Chain_statementContext *_localctx = _tracker.createInstance<Chain_statementContext>(_ctx, getState());
  enterRule(_localctx, 116, ReentParser::RuleChain_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1130);

    if (!(in_chain)) throw FailedPredicateException(this, "in_chain");
    setState(1133);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Throw_first: {
        setState(1131);
        throw_first();
        break;
      }

      case ReentParser::Throw_last: {
        setState(1132);
        throw_last();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Atomic_blockContext ------------------------------------------------------------------

ReentParser::Atomic_blockContext::Atomic_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Atomic_blockContext::Plan_atomize() {
  return getToken(ReentParser::Plan_atomize, 0);
}

ReentParser::CompoundStatementContext* ReentParser::Atomic_blockContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}


size_t ReentParser::Atomic_blockContext::getRuleIndex() const {
  return ReentParser::RuleAtomic_block;
}

void ReentParser::Atomic_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAtomic_block(this);
}

void ReentParser::Atomic_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAtomic_block(this);
}

ReentParser::Atomic_blockContext* ReentParser::atomic_block() {
  Atomic_blockContext *_localctx = _tracker.createInstance<Atomic_blockContext>(_ctx, getState());
  enterRule(_localctx, 118, ReentParser::RuleAtomic_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1135);

    if (!((!in_reenterable && !in_chain))) throw FailedPredicateException(this, "(!in_reenterable && !in_chain)");
    setState(1136);
    match(ReentParser::Plan_atomize);
    setState(1137);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Soft_atomic_blockContext ------------------------------------------------------------------

ReentParser::Soft_atomic_blockContext::Soft_atomic_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Soft_atomic_blockContext::Transaction_atomic() {
  return getToken(ReentParser::Transaction_atomic, 0);
}

tree::TerminalNode* ReentParser::Soft_atomic_blockContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Soft_atomic_blockContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Soft_atomic_blockContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::CompoundStatementContext* ReentParser::Soft_atomic_blockContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}


size_t ReentParser::Soft_atomic_blockContext::getRuleIndex() const {
  return ReentParser::RuleSoft_atomic_block;
}

void ReentParser::Soft_atomic_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSoft_atomic_block(this);
}

void ReentParser::Soft_atomic_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSoft_atomic_block(this);
}

ReentParser::Soft_atomic_blockContext* ReentParser::soft_atomic_block() {
  Soft_atomic_blockContext *_localctx = _tracker.createInstance<Soft_atomic_blockContext>(_ctx, getState());
  enterRule(_localctx, 120, ReentParser::RuleSoft_atomic_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1139);
    match(ReentParser::Transaction_atomic);
    setState(1140);
    match(ReentParser::LeftParen);
    setState(1141);
    primaryExpression();
    setState(1142);
    match(ReentParser::RightParen);
    setState(1143);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_firstContext ------------------------------------------------------------------

ReentParser::Plan_firstContext::Plan_firstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_firstContext::Plan_first() {
  return getToken(ReentParser::Plan_first, 0);
}

tree::TerminalNode* ReentParser::Plan_firstContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::Planning_paramsContext* ReentParser::Plan_firstContext::planning_params() {
  return getRuleContext<ReentParser::Planning_paramsContext>(0);
}

tree::TerminalNode* ReentParser::Plan_firstContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_firstContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_firstContext::getRuleIndex() const {
  return ReentParser::RulePlan_first;
}

void ReentParser::Plan_firstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_first(this);
}

void ReentParser::Plan_firstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_first(this);
}

ReentParser::Plan_firstContext* ReentParser::plan_first() {
  Plan_firstContext *_localctx = _tracker.createInstance<Plan_firstContext>(_ctx, getState());
  enterRule(_localctx, 122, ReentParser::RulePlan_first);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1145);
    match(ReentParser::Plan_first);
    setState(1146);
    match(ReentParser::LeftParen);
    setState(1147);
    planning_params();
    setState(1148);
    match(ReentParser::RightParen);
    setState(1149);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_get_firstContext ------------------------------------------------------------------

ReentParser::Plan_get_firstContext::Plan_get_firstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_get_firstContext::Plan_get_first() {
  return getToken(ReentParser::Plan_get_first, 0);
}

tree::TerminalNode* ReentParser::Plan_get_firstContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::Plan_get_firstContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Plan_get_firstContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_get_firstContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_get_firstContext::getRuleIndex() const {
  return ReentParser::RulePlan_get_first;
}

void ReentParser::Plan_get_firstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_get_first(this);
}

void ReentParser::Plan_get_firstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_get_first(this);
}

ReentParser::Plan_get_firstContext* ReentParser::plan_get_first() {
  Plan_get_firstContext *_localctx = _tracker.createInstance<Plan_get_firstContext>(_ctx, getState());
  enterRule(_localctx, 124, ReentParser::RulePlan_get_first);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1151);
    match(ReentParser::Plan_get_first);
    setState(1152);
    match(ReentParser::LeftParen);
    setState(1153);
    expression();
    setState(1154);
    match(ReentParser::RightParen);
    setState(1155);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_lastContext ------------------------------------------------------------------

ReentParser::Plan_lastContext::Plan_lastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_lastContext::Plan_last() {
  return getToken(ReentParser::Plan_last, 0);
}

tree::TerminalNode* ReentParser::Plan_lastContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::Planning_paramsContext* ReentParser::Plan_lastContext::planning_params() {
  return getRuleContext<ReentParser::Planning_paramsContext>(0);
}

tree::TerminalNode* ReentParser::Plan_lastContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_lastContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_lastContext::getRuleIndex() const {
  return ReentParser::RulePlan_last;
}

void ReentParser::Plan_lastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_last(this);
}

void ReentParser::Plan_lastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_last(this);
}

ReentParser::Plan_lastContext* ReentParser::plan_last() {
  Plan_lastContext *_localctx = _tracker.createInstance<Plan_lastContext>(_ctx, getState());
  enterRule(_localctx, 126, ReentParser::RulePlan_last);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1157);
    match(ReentParser::Plan_last);
    setState(1158);
    match(ReentParser::LeftParen);
    setState(1159);
    planning_params();
    setState(1160);
    match(ReentParser::RightParen);
    setState(1161);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_get_lastContext ------------------------------------------------------------------

ReentParser::Plan_get_lastContext::Plan_get_lastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_get_lastContext::Plan_get_last() {
  return getToken(ReentParser::Plan_get_last, 0);
}

tree::TerminalNode* ReentParser::Plan_get_lastContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::Plan_get_lastContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Plan_get_lastContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_get_lastContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_get_lastContext::getRuleIndex() const {
  return ReentParser::RulePlan_get_last;
}

void ReentParser::Plan_get_lastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_get_last(this);
}

void ReentParser::Plan_get_lastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_get_last(this);
}

ReentParser::Plan_get_lastContext* ReentParser::plan_get_last() {
  Plan_get_lastContext *_localctx = _tracker.createInstance<Plan_get_lastContext>(_ctx, getState());
  enterRule(_localctx, 128, ReentParser::RulePlan_get_last);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1163);
    match(ReentParser::Plan_get_last);
    setState(1164);
    match(ReentParser::LeftParen);
    setState(1165);
    expression();
    setState(1166);
    match(ReentParser::RightParen);
    setState(1167);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_registerContext ------------------------------------------------------------------

ReentParser::Plan_registerContext::Plan_registerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_registerContext::Plan_register() {
  return getToken(ReentParser::Plan_register, 0);
}

tree::TerminalNode* ReentParser::Plan_registerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::Plan_registerContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::Plan_registerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_registerContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_registerContext::getRuleIndex() const {
  return ReentParser::RulePlan_register;
}

void ReentParser::Plan_registerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_register(this);
}

void ReentParser::Plan_registerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_register(this);
}

ReentParser::Plan_registerContext* ReentParser::plan_register() {
  Plan_registerContext *_localctx = _tracker.createInstance<Plan_registerContext>(_ctx, getState());
  enterRule(_localctx, 130, ReentParser::RulePlan_register);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1169);
    match(ReentParser::Plan_register);
    setState(1170);
    match(ReentParser::LeftParen);
    setState(1171);
    anyIdentifier();
    setState(1172);
    match(ReentParser::RightParen);
    setState(1173);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_registered_barrierContext ------------------------------------------------------------------

ReentParser::Plan_registered_barrierContext::Plan_registered_barrierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_registered_barrierContext::Plan_registered_barrier() {
  return getToken(ReentParser::Plan_registered_barrier, 0);
}

tree::TerminalNode* ReentParser::Plan_registered_barrierContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::Plan_registered_barrierContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::Plan_registered_barrierContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_registered_barrierContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_registered_barrierContext::getRuleIndex() const {
  return ReentParser::RulePlan_registered_barrier;
}

void ReentParser::Plan_registered_barrierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_registered_barrier(this);
}

void ReentParser::Plan_registered_barrierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_registered_barrier(this);
}

ReentParser::Plan_registered_barrierContext* ReentParser::plan_registered_barrier() {
  Plan_registered_barrierContext *_localctx = _tracker.createInstance<Plan_registered_barrierContext>(_ctx, getState());
  enterRule(_localctx, 132, ReentParser::RulePlan_registered_barrier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1175);
    match(ReentParser::Plan_registered_barrier);
    setState(1176);
    match(ReentParser::LeftParen);
    setState(1177);
    anyIdentifier();
    setState(1178);
    match(ReentParser::RightParen);
    setState(1179);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_criticalContext ------------------------------------------------------------------

ReentParser::Plan_criticalContext::Plan_criticalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_criticalContext::Plan_critical() {
  return getToken(ReentParser::Plan_critical, 0);
}

tree::TerminalNode* ReentParser::Plan_criticalContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::Plan_criticalContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::Plan_criticalContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::CompoundStatementContext* ReentParser::Plan_criticalContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}


size_t ReentParser::Plan_criticalContext::getRuleIndex() const {
  return ReentParser::RulePlan_critical;
}

void ReentParser::Plan_criticalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_critical(this);
}

void ReentParser::Plan_criticalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_critical(this);
}

ReentParser::Plan_criticalContext* ReentParser::plan_critical() {
  Plan_criticalContext *_localctx = _tracker.createInstance<Plan_criticalContext>(_ctx, getState());
  enterRule(_localctx, 134, ReentParser::RulePlan_critical);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1181);
    match(ReentParser::Plan_critical);
    setState(1182);
    match(ReentParser::LeftParen);
    setState(1183);
    anyIdentifier();
    setState(1184);
    match(ReentParser::RightParen);
    setState(1185);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_stopContext ------------------------------------------------------------------

ReentParser::Plan_stopContext::Plan_stopContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_stopContext::Plan_stop() {
  return getToken(ReentParser::Plan_stop, 0);
}

tree::TerminalNode* ReentParser::Plan_stopContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_stopContext::getRuleIndex() const {
  return ReentParser::RulePlan_stop;
}

void ReentParser::Plan_stopContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_stop(this);
}

void ReentParser::Plan_stopContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_stop(this);
}

ReentParser::Plan_stopContext* ReentParser::plan_stop() {
  Plan_stopContext *_localctx = _tracker.createInstance<Plan_stopContext>(_ctx, getState());
  enterRule(_localctx, 136, ReentParser::RulePlan_stop);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1187);
    match(ReentParser::Plan_stop);
    setState(1188);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Clear_planContext ------------------------------------------------------------------

ReentParser::Clear_planContext::Clear_planContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Clear_planContext::Clear_plan() {
  return getToken(ReentParser::Clear_plan, 0);
}

tree::TerminalNode* ReentParser::Clear_planContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Clear_planContext::getRuleIndex() const {
  return ReentParser::RuleClear_plan;
}

void ReentParser::Clear_planContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClear_plan(this);
}

void ReentParser::Clear_planContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClear_plan(this);
}

ReentParser::Clear_planContext* ReentParser::clear_plan() {
  Clear_planContext *_localctx = _tracker.createInstance<Clear_planContext>(_ctx, getState());
  enterRule(_localctx, 138, ReentParser::RuleClear_plan);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1190);
    match(ReentParser::Clear_plan);
    setState(1191);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_group_firstContext ------------------------------------------------------------------

ReentParser::Plan_group_firstContext::Plan_group_firstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_group_firstContext::Plan_group_first() {
  return getToken(ReentParser::Plan_group_first, 0);
}

tree::TerminalNode* ReentParser::Plan_group_firstContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_group_firstContext::getRuleIndex() const {
  return ReentParser::RulePlan_group_first;
}

void ReentParser::Plan_group_firstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_group_first(this);
}

void ReentParser::Plan_group_firstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_group_first(this);
}

ReentParser::Plan_group_firstContext* ReentParser::plan_group_first() {
  Plan_group_firstContext *_localctx = _tracker.createInstance<Plan_group_firstContext>(_ctx, getState());
  enterRule(_localctx, 140, ReentParser::RulePlan_group_first);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1193);
    match(ReentParser::Plan_group_first);
    setState(1194);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_group_lastContext ------------------------------------------------------------------

ReentParser::Plan_group_lastContext::Plan_group_lastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_group_lastContext::Plan_group_last() {
  return getToken(ReentParser::Plan_group_last, 0);
}

tree::TerminalNode* ReentParser::Plan_group_lastContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_group_lastContext::getRuleIndex() const {
  return ReentParser::RulePlan_group_last;
}

void ReentParser::Plan_group_lastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_group_last(this);
}

void ReentParser::Plan_group_lastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_group_last(this);
}

ReentParser::Plan_group_lastContext* ReentParser::plan_group_last() {
  Plan_group_lastContext *_localctx = _tracker.createInstance<Plan_group_lastContext>(_ctx, getState());
  enterRule(_localctx, 142, ReentParser::RulePlan_group_last);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1196);
    match(ReentParser::Plan_group_last);
    setState(1197);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_group_parallelizeContext ------------------------------------------------------------------

ReentParser::Plan_group_parallelizeContext::Plan_group_parallelizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_group_parallelizeContext::Plan_group_parallelize() {
  return getToken(ReentParser::Plan_group_parallelize, 0);
}

tree::TerminalNode* ReentParser::Plan_group_parallelizeContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_group_parallelizeContext::getRuleIndex() const {
  return ReentParser::RulePlan_group_parallelize;
}

void ReentParser::Plan_group_parallelizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_group_parallelize(this);
}

void ReentParser::Plan_group_parallelizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_group_parallelize(this);
}

ReentParser::Plan_group_parallelizeContext* ReentParser::plan_group_parallelize() {
  Plan_group_parallelizeContext *_localctx = _tracker.createInstance<Plan_group_parallelizeContext>(_ctx, getState());
  enterRule(_localctx, 144, ReentParser::RulePlan_group_parallelize);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1199);
    match(ReentParser::Plan_group_parallelize);
    setState(1200);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_group_atomizeContext ------------------------------------------------------------------

ReentParser::Plan_group_atomizeContext::Plan_group_atomizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_group_atomizeContext::Plan_group_atomize() {
  return getToken(ReentParser::Plan_group_atomize, 0);
}

tree::TerminalNode* ReentParser::Plan_group_atomizeContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_group_atomizeContext::getRuleIndex() const {
  return ReentParser::RulePlan_group_atomize;
}

void ReentParser::Plan_group_atomizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_group_atomize(this);
}

void ReentParser::Plan_group_atomizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_group_atomize(this);
}

ReentParser::Plan_group_atomizeContext* ReentParser::plan_group_atomize() {
  Plan_group_atomizeContext *_localctx = _tracker.createInstance<Plan_group_atomizeContext>(_ctx, getState());
  enterRule(_localctx, 146, ReentParser::RulePlan_group_atomize);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1202);
    match(ReentParser::Plan_group_atomize);
    setState(1203);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_group_soft_atomizeContext ------------------------------------------------------------------

ReentParser::Plan_group_soft_atomizeContext::Plan_group_soft_atomizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_group_soft_atomizeContext::Plan_group_soft_atomize() {
  return getToken(ReentParser::Plan_group_soft_atomize, 0);
}

tree::TerminalNode* ReentParser::Plan_group_soft_atomizeContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_group_soft_atomizeContext::getRuleIndex() const {
  return ReentParser::RulePlan_group_soft_atomize;
}

void ReentParser::Plan_group_soft_atomizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_group_soft_atomize(this);
}

void ReentParser::Plan_group_soft_atomizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_group_soft_atomize(this);
}

ReentParser::Plan_group_soft_atomizeContext* ReentParser::plan_group_soft_atomize() {
  Plan_group_soft_atomizeContext *_localctx = _tracker.createInstance<Plan_group_soft_atomizeContext>(_ctx, getState());
  enterRule(_localctx, 148, ReentParser::RulePlan_group_soft_atomize);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1205);
    match(ReentParser::Plan_group_soft_atomize);
    setState(1206);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_group_vectorizeContext ------------------------------------------------------------------

ReentParser::Plan_group_vectorizeContext::Plan_group_vectorizeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_group_vectorizeContext::Plan_group_vectorize() {
  return getToken(ReentParser::Plan_group_vectorize, 0);
}

tree::TerminalNode* ReentParser::Plan_group_vectorizeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::Plan_group_vectorizeContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Plan_group_vectorizeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Plan_group_vectorizeContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Plan_group_vectorizeContext::getRuleIndex() const {
  return ReentParser::RulePlan_group_vectorize;
}

void ReentParser::Plan_group_vectorizeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_group_vectorize(this);
}

void ReentParser::Plan_group_vectorizeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_group_vectorize(this);
}

ReentParser::Plan_group_vectorizeContext* ReentParser::plan_group_vectorize() {
  Plan_group_vectorizeContext *_localctx = _tracker.createInstance<Plan_group_vectorizeContext>(_ctx, getState());
  enterRule(_localctx, 150, ReentParser::RulePlan_group_vectorize);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1208);
    match(ReentParser::Plan_group_vectorize);

    		if (!allow_vectorized)
    			throw FailedPredicateException(this, "'plan_group_vectorize' without '#pragma plan vectorized'");
    	
    setState(1210);
    match(ReentParser::LeftParen);
    setState(1211);
    assignmentExpression();
    setState(1212);
    match(ReentParser::RightParen);
    setState(1213);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throw_firstContext ------------------------------------------------------------------

ReentParser::Throw_firstContext::Throw_firstContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Throw_firstContext::Throw_first() {
  return getToken(ReentParser::Throw_first, 0);
}

tree::TerminalNode* ReentParser::Throw_firstContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::Planning_paramsContext* ReentParser::Throw_firstContext::planning_params() {
  return getRuleContext<ReentParser::Planning_paramsContext>(0);
}

tree::TerminalNode* ReentParser::Throw_firstContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Throw_firstContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Throw_firstContext::getRuleIndex() const {
  return ReentParser::RuleThrow_first;
}

void ReentParser::Throw_firstContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow_first(this);
}

void ReentParser::Throw_firstContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow_first(this);
}

ReentParser::Throw_firstContext* ReentParser::throw_first() {
  Throw_firstContext *_localctx = _tracker.createInstance<Throw_firstContext>(_ctx, getState());
  enterRule(_localctx, 152, ReentParser::RuleThrow_first);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1215);
    match(ReentParser::Throw_first);
    setState(1216);
    match(ReentParser::LeftParen);
    setState(1217);
    planning_params();
    setState(1218);
    match(ReentParser::RightParen);
    setState(1219);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Throw_lastContext ------------------------------------------------------------------

ReentParser::Throw_lastContext::Throw_lastContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Throw_lastContext::Throw_last() {
  return getToken(ReentParser::Throw_last, 0);
}

tree::TerminalNode* ReentParser::Throw_lastContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::Planning_paramsContext* ReentParser::Throw_lastContext::planning_params() {
  return getRuleContext<ReentParser::Planning_paramsContext>(0);
}

tree::TerminalNode* ReentParser::Throw_lastContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Throw_lastContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Throw_lastContext::getRuleIndex() const {
  return ReentParser::RuleThrow_last;
}

void ReentParser::Throw_lastContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrow_last(this);
}

void ReentParser::Throw_lastContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrow_last(this);
}

ReentParser::Throw_lastContext* ReentParser::throw_last() {
  Throw_lastContext *_localctx = _tracker.createInstance<Throw_lastContext>(_ctx, getState());
  enterRule(_localctx, 154, ReentParser::RuleThrow_last);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1221);
    match(ReentParser::Throw_last);
    setState(1222);
    match(ReentParser::LeftParen);
    setState(1223);
    planning_params();
    setState(1224);
    match(ReentParser::RightParen);
    setState(1225);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Planning_paramsContext ------------------------------------------------------------------

ReentParser::Planning_paramsContext::Planning_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AssignmentExpressionContext *> ReentParser::Planning_paramsContext::assignmentExpression() {
  return getRuleContexts<ReentParser::AssignmentExpressionContext>();
}

ReentParser::AssignmentExpressionContext* ReentParser::Planning_paramsContext::assignmentExpression(size_t i) {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(i);
}

std::vector<ReentParser::Reent_parameter_cutContext *> ReentParser::Planning_paramsContext::reent_parameter_cut() {
  return getRuleContexts<ReentParser::Reent_parameter_cutContext>();
}

ReentParser::Reent_parameter_cutContext* ReentParser::Planning_paramsContext::reent_parameter_cut(size_t i) {
  return getRuleContext<ReentParser::Reent_parameter_cutContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::Planning_paramsContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::Planning_paramsContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::Planning_paramsContext::getRuleIndex() const {
  return ReentParser::RulePlanning_params;
}

void ReentParser::Planning_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlanning_params(this);
}

void ReentParser::Planning_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlanning_params(this);
}

ReentParser::Planning_paramsContext* ReentParser::planning_params() {
  Planning_paramsContext *_localctx = _tracker.createInstance<Planning_paramsContext>(_ctx, getState());
  enterRule(_localctx, 156, ReentParser::RulePlanning_params);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1227);
    assignmentExpression();
    setState(1229);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Not) {
      setState(1228);
      reent_parameter_cut();
    }
    setState(1238);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(1231);
      match(ReentParser::Comma);
      setState(1232);
      assignmentExpression();
      setState(1234);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Not) {
        setState(1233);
        reent_parameter_cut();
      }
      setState(1240);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_parameter_cutContext ------------------------------------------------------------------

ReentParser::Reent_parameter_cutContext::Reent_parameter_cutContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_parameter_cutContext::Not() {
  return getToken(ReentParser::Not, 0);
}


size_t ReentParser::Reent_parameter_cutContext::getRuleIndex() const {
  return ReentParser::RuleReent_parameter_cut;
}

void ReentParser::Reent_parameter_cutContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_parameter_cut(this);
}

void ReentParser::Reent_parameter_cutContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_parameter_cut(this);
}

ReentParser::Reent_parameter_cutContext* ReentParser::reent_parameter_cut() {
  Reent_parameter_cutContext *_localctx = _tracker.createInstance<Reent_parameter_cutContext>(_ctx, getState());
  enterRule(_localctx, 158, ReentParser::RuleReent_parameter_cut);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1241);
    match(ReentParser::Not);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_special_callContext ------------------------------------------------------------------

ReentParser::Reent_special_callContext::Reent_special_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Reent_continue_any_callContext* ReentParser::Reent_special_callContext::reent_continue_any_call() {
  return getRuleContext<ReentParser::Reent_continue_any_callContext>(0);
}

ReentParser::Reent_compact_continueContext* ReentParser::Reent_special_callContext::reent_compact_continue() {
  return getRuleContext<ReentParser::Reent_compact_continueContext>(0);
}

ReentParser::Reent_np_callContext* ReentParser::Reent_special_callContext::reent_np_call() {
  return getRuleContext<ReentParser::Reent_np_callContext>(0);
}


size_t ReentParser::Reent_special_callContext::getRuleIndex() const {
  return ReentParser::RuleReent_special_call;
}

void ReentParser::Reent_special_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_special_call(this);
}

void ReentParser::Reent_special_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_special_call(this);
}

ReentParser::Reent_special_callContext* ReentParser::reent_special_call() {
  Reent_special_callContext *_localctx = _tracker.createInstance<Reent_special_callContext>(_ctx, getState());
  enterRule(_localctx, 160, ReentParser::RuleReent_special_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1246);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1243);
      reent_continue_any_call();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1244);
      reent_compact_continue();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1245);
      reent_np_call();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_continue_any_callContext ------------------------------------------------------------------

ReentParser::Reent_continue_any_callContext::Reent_continue_any_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_continue_any_callContext::Continue() {
  return getToken(ReentParser::Continue, 0);
}

tree::TerminalNode* ReentParser::Reent_continue_any_callContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_continue_any_callContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_continue_any_callContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::Reent_continue_any_callContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::ExpressionContext* ReentParser::Reent_continue_any_callContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_continue_any_callContext::Div() {
  return getToken(ReentParser::Div, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Reent_continue_any_callContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}


size_t ReentParser::Reent_continue_any_callContext::getRuleIndex() const {
  return ReentParser::RuleReent_continue_any_call;
}

void ReentParser::Reent_continue_any_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_continue_any_call(this);
}

void ReentParser::Reent_continue_any_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_continue_any_call(this);
}

ReentParser::Reent_continue_any_callContext* ReentParser::reent_continue_any_call() {
  Reent_continue_any_callContext *_localctx = _tracker.createInstance<Reent_continue_any_callContext>(_ctx, getState());
  enterRule(_localctx, 162, ReentParser::RuleReent_continue_any_call);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1248);
    match(ReentParser::Continue);
    setState(1249);
    dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident = anyIdentifier();
     if (reenterables.find((dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident->start, dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident->stop) : nullptr)) == reenterables.end() || (reenterables[(dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident->start, dynamic_cast<Reent_continue_any_callContext *>(_localctx)->ident->stop) : nullptr)] & static_flag) == 0)
    		throw FailedPredicateException(this, "Continue can be applied to Static Reenterable Procedure only");
    	
    setState(1251);
    match(ReentParser::LeftParen);
    setState(1253);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx)) {
    case 1: {
      setState(1252);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1255);
    match(ReentParser::RightParen);
    setState(1258);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Div) {
      setState(1256);
      match(ReentParser::Div);
      setState(1257);
      primaryExpression();
    }
    setState(1260);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_compact_continueContext ------------------------------------------------------------------

ReentParser::Reent_compact_continueContext::Reent_compact_continueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_compact_continueContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_compact_continueContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::Reent_compact_continueContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

tree::TerminalNode* ReentParser::Reent_compact_continueContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_compact_continueContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::Reent_compact_continueContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::ExpressionContext* ReentParser::Reent_compact_continueContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_compact_continueContext::Div() {
  return getToken(ReentParser::Div, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Reent_compact_continueContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}


size_t ReentParser::Reent_compact_continueContext::getRuleIndex() const {
  return ReentParser::RuleReent_compact_continue;
}

void ReentParser::Reent_compact_continueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_compact_continue(this);
}

void ReentParser::Reent_compact_continueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_compact_continue(this);
}

ReentParser::Reent_compact_continueContext* ReentParser::reent_compact_continue() {
  Reent_compact_continueContext *_localctx = _tracker.createInstance<Reent_compact_continueContext>(_ctx, getState());
  enterRule(_localctx, 164, ReentParser::RuleReent_compact_continue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1262);
    dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident = anyIdentifier();
    setState(1263);
    match(ReentParser::LeftParen);
    setState(1264);
    match(ReentParser::LeftBracket);
     if (reenterables.find((dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident->start, dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident->stop) : nullptr)) == reenterables.end() || (reenterables[(dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident->start, dynamic_cast<Reent_compact_continueContext *>(_localctx)->ident->stop) : nullptr)] & static_flag) == 0)
    		throw FailedPredicateException(this, "Continuing ([Call]) can be applied to Static Reenterable Procedure only");
    	
    setState(1267);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx)) {
    case 1: {
      setState(1266);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1269);
    match(ReentParser::RightBracket);
    setState(1270);
    match(ReentParser::RightParen);
    setState(1273);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Div) {
      setState(1271);
      match(ReentParser::Div);
      setState(1272);
      primaryExpression();
    }
    setState(1275);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_np_callContext ------------------------------------------------------------------

ReentParser::Reent_np_callContext::Reent_np_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_np_callContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_np_callContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_np_callContext::Div() {
  return getToken(ReentParser::Div, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Reent_np_callContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_np_callContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::Reent_np_callContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::ExpressionContext* ReentParser::Reent_np_callContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}


size_t ReentParser::Reent_np_callContext::getRuleIndex() const {
  return ReentParser::RuleReent_np_call;
}

void ReentParser::Reent_np_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_np_call(this);
}

void ReentParser::Reent_np_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_np_call(this);
}

ReentParser::Reent_np_callContext* ReentParser::reent_np_call() {
  Reent_np_callContext *_localctx = _tracker.createInstance<Reent_np_callContext>(_ctx, getState());
  enterRule(_localctx, 166, ReentParser::RuleReent_np_call);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1277);
    dynamic_cast<Reent_np_callContext *>(_localctx)->ident = anyIdentifier();
    setState(1278);
    match(ReentParser::LeftParen);
    setState(1280);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx)) {
    case 1: {
      setState(1279);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1282);
    match(ReentParser::RightParen);
     if (_input->LT(1)->getText() == "/" && chains.find((dynamic_cast<Reent_np_callContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Reent_np_callContext *>(_localctx)->ident->start, dynamic_cast<Reent_np_callContext *>(_localctx)->ident->stop) : nullptr)) == chains.end() && reenterables.find((dynamic_cast<Reent_np_callContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Reent_np_callContext *>(_localctx)->ident->start, dynamic_cast<Reent_np_callContext *>(_localctx)->ident->stop) : nullptr)) == reenterables.end())
    		throw FailedPredicateException(this, "Clause '/NumberOfProcessors' can be applied to Chain/Reenterable Procedure only");
    	
    setState(1284);
    match(ReentParser::Div);
    setState(1285);
    primaryExpression();
    setState(1286);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_chainContext ------------------------------------------------------------------

ReentParser::Start_chainContext::Start_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Start_single_proc_chainContext* ReentParser::Start_chainContext::start_single_proc_chain() {
  return getRuleContext<ReentParser::Start_single_proc_chainContext>(0);
}

ReentParser::Start_multi_proc_chainContext* ReentParser::Start_chainContext::start_multi_proc_chain() {
  return getRuleContext<ReentParser::Start_multi_proc_chainContext>(0);
}


size_t ReentParser::Start_chainContext::getRuleIndex() const {
  return ReentParser::RuleStart_chain;
}

void ReentParser::Start_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_chain(this);
}

void ReentParser::Start_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_chain(this);
}

ReentParser::Start_chainContext* ReentParser::start_chain() {
  Start_chainContext *_localctx = _tracker.createInstance<Start_chainContext>(_ctx, getState());
  enterRule(_localctx, 168, ReentParser::RuleStart_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1290);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Plan_chain: {
        enterOuterAlt(_localctx, 1);
        setState(1288);
        start_single_proc_chain();
        break;
      }

      case ReentParser::Clustered:
      case ReentParser::Plan_parallel_chain: {
        enterOuterAlt(_localctx, 2);
        setState(1289);
        start_multi_proc_chain();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_single_proc_chainContext ------------------------------------------------------------------

ReentParser::Start_single_proc_chainContext::Start_single_proc_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Start_single_proc_chainContext::Plan_chain() {
  return getToken(ReentParser::Plan_chain, 0);
}

tree::TerminalNode* ReentParser::Start_single_proc_chainContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Start_single_proc_chainContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Start_single_proc_chainContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

ReentParser::Chain_descriptorContext* ReentParser::Start_single_proc_chainContext::chain_descriptor() {
  return getRuleContext<ReentParser::Chain_descriptorContext>(0);
}

tree::TerminalNode* ReentParser::Start_single_proc_chainContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Start_single_proc_chainContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::Start_single_proc_chainContext::getRuleIndex() const {
  return ReentParser::RuleStart_single_proc_chain;
}

void ReentParser::Start_single_proc_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_single_proc_chain(this);
}

void ReentParser::Start_single_proc_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_single_proc_chain(this);
}

ReentParser::Start_single_proc_chainContext* ReentParser::start_single_proc_chain() {
  Start_single_proc_chainContext *_localctx = _tracker.createInstance<Start_single_proc_chainContext>(_ctx, getState());
  enterRule(_localctx, 170, ReentParser::RuleStart_single_proc_chain);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1292);
    match(ReentParser::Plan_chain);
    setState(1293);
    match(ReentParser::LeftParen);
    setState(1294);
    primaryExpression();
    setState(1295);
    match(ReentParser::Comma);
    setState(1296);
    chain_descriptor();
    setState(1297);
    match(ReentParser::RightParen);
    setState(1298);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_multi_proc_chainContext ------------------------------------------------------------------

ReentParser::Start_multi_proc_chainContext::Start_multi_proc_chainContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Start_multi_proc_chainContext::Plan_parallel_chain() {
  return getToken(ReentParser::Plan_parallel_chain, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Start_multi_proc_chainContext::LeftParen() {
  return getTokens(ReentParser::LeftParen);
}

tree::TerminalNode* ReentParser::Start_multi_proc_chainContext::LeftParen(size_t i) {
  return getToken(ReentParser::LeftParen, i);
}

ReentParser::PrimaryExpressionContext* ReentParser::Start_multi_proc_chainContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Start_multi_proc_chainContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

ReentParser::Chain_descriptorContext* ReentParser::Start_multi_proc_chainContext::chain_descriptor() {
  return getRuleContext<ReentParser::Chain_descriptorContext>(0);
}

std::vector<tree::TerminalNode *> ReentParser::Start_multi_proc_chainContext::RightParen() {
  return getTokens(ReentParser::RightParen);
}

tree::TerminalNode* ReentParser::Start_multi_proc_chainContext::RightParen(size_t i) {
  return getToken(ReentParser::RightParen, i);
}

tree::TerminalNode* ReentParser::Start_multi_proc_chainContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::Start_multi_proc_chainContext::Clustered() {
  return getToken(ReentParser::Clustered, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::Start_multi_proc_chainContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}


size_t ReentParser::Start_multi_proc_chainContext::getRuleIndex() const {
  return ReentParser::RuleStart_multi_proc_chain;
}

void ReentParser::Start_multi_proc_chainContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_multi_proc_chain(this);
}

void ReentParser::Start_multi_proc_chainContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_multi_proc_chain(this);
}

ReentParser::Start_multi_proc_chainContext* ReentParser::start_multi_proc_chain() {
  Start_multi_proc_chainContext *_localctx = _tracker.createInstance<Start_multi_proc_chainContext>(_ctx, getState());
  enterRule(_localctx, 172, ReentParser::RuleStart_multi_proc_chain);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
     if (_input->LT(1)->getText() == "clustered")
    		if (!allow_clustered)
    			throw FailedPredicateException(this, "clustered chain without previous '#pragma plan clustered'");
    	
    setState(1306);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Clustered) {
      setState(1301);
      match(ReentParser::Clustered);
      setState(1302);
      match(ReentParser::LeftParen);
      setState(1303);
      assignmentExpression();
      setState(1304);
      match(ReentParser::RightParen);
    }
    setState(1308);
    match(ReentParser::Plan_parallel_chain);
    setState(1309);
    match(ReentParser::LeftParen);
    setState(1310);
    primaryExpression();
    setState(1311);
    match(ReentParser::Comma);
    setState(1312);
    chain_descriptor();
    setState(1313);
    match(ReentParser::RightParen);
    setState(1314);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chain_descriptorContext ------------------------------------------------------------------

ReentParser::Chain_descriptorContext::Chain_descriptorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Vector_chain_descriptorContext* ReentParser::Chain_descriptorContext::vector_chain_descriptor() {
  return getRuleContext<ReentParser::Vector_chain_descriptorContext>(0);
}

ReentParser::List_chain_descriptorContext* ReentParser::Chain_descriptorContext::list_chain_descriptor() {
  return getRuleContext<ReentParser::List_chain_descriptorContext>(0);
}


size_t ReentParser::Chain_descriptorContext::getRuleIndex() const {
  return ReentParser::RuleChain_descriptor;
}

void ReentParser::Chain_descriptorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain_descriptor(this);
}

void ReentParser::Chain_descriptorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain_descriptor(this);
}

ReentParser::Chain_descriptorContext* ReentParser::chain_descriptor() {
  Chain_descriptorContext *_localctx = _tracker.createInstance<Chain_descriptorContext>(_ctx, getState());
  enterRule(_localctx, 174, ReentParser::RuleChain_descriptor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1318);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1316);
      vector_chain_descriptor();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1317);
      list_chain_descriptor();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Vector_chain_descriptorContext ------------------------------------------------------------------

ReentParser::Vector_chain_descriptorContext::Vector_chain_descriptorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Vector_chain_descriptorContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

ReentParser::Chain_callContext* ReentParser::Vector_chain_descriptorContext::chain_call() {
  return getRuleContext<ReentParser::Chain_callContext>(0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Vector_chain_descriptorContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}


size_t ReentParser::Vector_chain_descriptorContext::getRuleIndex() const {
  return ReentParser::RuleVector_chain_descriptor;
}

void ReentParser::Vector_chain_descriptorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVector_chain_descriptor(this);
}

void ReentParser::Vector_chain_descriptorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVector_chain_descriptor(this);
}

ReentParser::Vector_chain_descriptorContext* ReentParser::vector_chain_descriptor() {
  Vector_chain_descriptorContext *_localctx = _tracker.createInstance<Vector_chain_descriptorContext>(_ctx, getState());
  enterRule(_localctx, 176, ReentParser::RuleVector_chain_descriptor);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1320);
    dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident = primaryExpression();
    setState(1321);

    if (!( chains.find((dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident->start, dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident->stop) : nullptr)) == chains.end() )) throw FailedPredicateException(this, " chains.find($ident.text) == chains.end() ");
    setState(1322);
    match(ReentParser::Comma);
    setState(1323);
    chain_call();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- List_chain_descriptorContext ------------------------------------------------------------------

ReentParser::List_chain_descriptorContext::List_chain_descriptorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::Chain_callContext *> ReentParser::List_chain_descriptorContext::chain_call() {
  return getRuleContexts<ReentParser::Chain_callContext>();
}

ReentParser::Chain_callContext* ReentParser::List_chain_descriptorContext::chain_call(size_t i) {
  return getRuleContext<ReentParser::Chain_callContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::List_chain_descriptorContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::List_chain_descriptorContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}

std::vector<tree::TerminalNode *> ReentParser::List_chain_descriptorContext::Arrow() {
  return getTokens(ReentParser::Arrow);
}

tree::TerminalNode* ReentParser::List_chain_descriptorContext::Arrow(size_t i) {
  return getToken(ReentParser::Arrow, i);
}


size_t ReentParser::List_chain_descriptorContext::getRuleIndex() const {
  return ReentParser::RuleList_chain_descriptor;
}

void ReentParser::List_chain_descriptorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterList_chain_descriptor(this);
}

void ReentParser::List_chain_descriptorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitList_chain_descriptor(this);
}

ReentParser::List_chain_descriptorContext* ReentParser::list_chain_descriptor() {
  List_chain_descriptorContext *_localctx = _tracker.createInstance<List_chain_descriptorContext>(_ctx, getState());
  enterRule(_localctx, 178, ReentParser::RuleList_chain_descriptor);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1325);
    chain_call();
    setState(1330);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma

    || _la == ReentParser::Arrow) {
      setState(1326);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Comma

      || _la == ReentParser::Arrow)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1327);
      chain_call();
      setState(1332);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_topologyContext ------------------------------------------------------------------

ReentParser::Start_topologyContext::Start_topologyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Start_topologyContext::Plan_topology() {
  return getToken(ReentParser::Plan_topology, 0);
}

tree::TerminalNode* ReentParser::Start_topologyContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::Start_topologyContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

tree::TerminalNode* ReentParser::Start_topologyContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::Start_topologyContext::Clustered() {
  return getToken(ReentParser::Clustered, 0);
}

tree::TerminalNode* ReentParser::Start_topologyContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::Start_topologyContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Start_topologyContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

std::vector<ReentParser::Topology_itemContext *> ReentParser::Start_topologyContext::topology_item() {
  return getRuleContexts<ReentParser::Topology_itemContext>();
}

ReentParser::Topology_itemContext* ReentParser::Start_topologyContext::topology_item(size_t i) {
  return getRuleContext<ReentParser::Topology_itemContext>(i);
}

tree::TerminalNode* ReentParser::Start_topologyContext::Div() {
  return getToken(ReentParser::Div, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Start_topologyContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}


size_t ReentParser::Start_topologyContext::getRuleIndex() const {
  return ReentParser::RuleStart_topology;
}

void ReentParser::Start_topologyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_topology(this);
}

void ReentParser::Start_topologyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_topology(this);
}

ReentParser::Start_topologyContext* ReentParser::start_topology() {
  Start_topologyContext *_localctx = _tracker.createInstance<Start_topologyContext>(_ctx, getState());
  enterRule(_localctx, 180, ReentParser::RuleStart_topology);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
     if (_input->LT(1)->getText() == "clustered")
    		if (!allow_clustered)
    			throw FailedPredicateException(this, "clustered topology without previous '#pragma plan clustered'");
    	
    setState(1339);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Clustered) {
      setState(1334);
      match(ReentParser::Clustered);
      setState(1335);
      match(ReentParser::LeftParen);
      setState(1336);
      assignmentExpression();
      setState(1337);
      match(ReentParser::RightParen);
    }
    setState(1341);
    match(ReentParser::Plan_topology);
    setState(1342);
    match(ReentParser::LeftBrace);
    setState(1344); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1343);
      topology_item();
      setState(1346); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ReentParser::Plan_parallel_chain

    || _la == ReentParser::Plan_parallel_reverse);
    setState(1348);
    match(ReentParser::RightBrace);
    setState(1351);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Div) {
      setState(1349);
      match(ReentParser::Div);
      setState(1350);
      primaryExpression();
    }
    setState(1353);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Topology_itemContext ------------------------------------------------------------------

ReentParser::Topology_itemContext::Topology_itemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Topology_itemContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::Topology_lineContext* ReentParser::Topology_itemContext::topology_line() {
  return getRuleContext<ReentParser::Topology_lineContext>(0);
}

ReentParser::Topology_reverseContext* ReentParser::Topology_itemContext::topology_reverse() {
  return getRuleContext<ReentParser::Topology_reverseContext>(0);
}


size_t ReentParser::Topology_itemContext::getRuleIndex() const {
  return ReentParser::RuleTopology_item;
}

void ReentParser::Topology_itemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopology_item(this);
}

void ReentParser::Topology_itemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopology_item(this);
}

ReentParser::Topology_itemContext* ReentParser::topology_item() {
  Topology_itemContext *_localctx = _tracker.createInstance<Topology_itemContext>(_ctx, getState());
  enterRule(_localctx, 182, ReentParser::RuleTopology_item);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1357);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Plan_parallel_chain: {
        setState(1355);
        topology_line();
        break;
      }

      case ReentParser::Plan_parallel_reverse: {
        setState(1356);
        topology_reverse();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1359);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Topology_lineContext ------------------------------------------------------------------

ReentParser::Topology_lineContext::Topology_lineContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Topology_lineContext::Plan_parallel_chain() {
  return getToken(ReentParser::Plan_parallel_chain, 0);
}

tree::TerminalNode* ReentParser::Topology_lineContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

std::vector<ReentParser::Topology_nodeContext *> ReentParser::Topology_lineContext::topology_node() {
  return getRuleContexts<ReentParser::Topology_nodeContext>();
}

ReentParser::Topology_nodeContext* ReentParser::Topology_lineContext::topology_node(size_t i) {
  return getRuleContext<ReentParser::Topology_nodeContext>(i);
}

tree::TerminalNode* ReentParser::Topology_lineContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

std::vector<tree::TerminalNode *> ReentParser::Topology_lineContext::Arrow() {
  return getTokens(ReentParser::Arrow);
}

tree::TerminalNode* ReentParser::Topology_lineContext::Arrow(size_t i) {
  return getToken(ReentParser::Arrow, i);
}

std::vector<tree::TerminalNode *> ReentParser::Topology_lineContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::Topology_lineContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::Topology_lineContext::getRuleIndex() const {
  return ReentParser::RuleTopology_line;
}

void ReentParser::Topology_lineContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopology_line(this);
}

void ReentParser::Topology_lineContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopology_line(this);
}

ReentParser::Topology_lineContext* ReentParser::topology_line() {
  Topology_lineContext *_localctx = _tracker.createInstance<Topology_lineContext>(_ctx, getState());
  enterRule(_localctx, 184, ReentParser::RuleTopology_line);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1361);
    match(ReentParser::Plan_parallel_chain);
    setState(1362);
    match(ReentParser::LeftParen);
    setState(1363);
    topology_node();
    setState(1368);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma

    || _la == ReentParser::Arrow) {
      setState(1364);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Comma

      || _la == ReentParser::Arrow)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1365);
      topology_node();
      setState(1370);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1371);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Topology_reverseContext ------------------------------------------------------------------

ReentParser::Topology_reverseContext::Topology_reverseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Topology_reverseContext::Plan_parallel_reverse() {
  return getToken(ReentParser::Plan_parallel_reverse, 0);
}

tree::TerminalNode* ReentParser::Topology_reverseContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

std::vector<ReentParser::Topology_nodeContext *> ReentParser::Topology_reverseContext::topology_node() {
  return getRuleContexts<ReentParser::Topology_nodeContext>();
}

ReentParser::Topology_nodeContext* ReentParser::Topology_reverseContext::topology_node(size_t i) {
  return getRuleContext<ReentParser::Topology_nodeContext>(i);
}

tree::TerminalNode* ReentParser::Topology_reverseContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Topology_reverseContext::Arrow() {
  return getToken(ReentParser::Arrow, 0);
}

tree::TerminalNode* ReentParser::Topology_reverseContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}


size_t ReentParser::Topology_reverseContext::getRuleIndex() const {
  return ReentParser::RuleTopology_reverse;
}

void ReentParser::Topology_reverseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopology_reverse(this);
}

void ReentParser::Topology_reverseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopology_reverse(this);
}

ReentParser::Topology_reverseContext* ReentParser::topology_reverse() {
  Topology_reverseContext *_localctx = _tracker.createInstance<Topology_reverseContext>(_ctx, getState());
  enterRule(_localctx, 186, ReentParser::RuleTopology_reverse);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1373);
    match(ReentParser::Plan_parallel_reverse);
    setState(1374);
    match(ReentParser::LeftParen);
    setState(1375);
    topology_node();
    setState(1376);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Comma

    || _la == ReentParser::Arrow)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1377);
    topology_node();
    setState(1378);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Topology_nodeContext ------------------------------------------------------------------

ReentParser::Topology_nodeContext::Topology_nodeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Topology_nodeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Topology_nodeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Topology_nodeContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}

tree::TerminalNode* ReentParser::Topology_nodeContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::Topology_nodeContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::ExpressionContext* ReentParser::Topology_nodeContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Topology_nodeContext::Div() {
  return getToken(ReentParser::Div, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Topology_nodeContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}

std::vector<tree::TerminalNode *> ReentParser::Topology_nodeContext::IntegerLiteral() {
  return getTokens(ReentParser::IntegerLiteral);
}

tree::TerminalNode* ReentParser::Topology_nodeContext::IntegerLiteral(size_t i) {
  return getToken(ReentParser::IntegerLiteral, i);
}


size_t ReentParser::Topology_nodeContext::getRuleIndex() const {
  return ReentParser::RuleTopology_node;
}

void ReentParser::Topology_nodeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTopology_node(this);
}

void ReentParser::Topology_nodeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTopology_node(this);
}

ReentParser::Topology_nodeContext* ReentParser::topology_node() {
  Topology_nodeContext *_localctx = _tracker.createInstance<Topology_nodeContext>(_ctx, getState());
  enterRule(_localctx, 188, ReentParser::RuleTopology_node);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1380);
    dynamic_cast<Topology_nodeContext *>(_localctx)->ident = match(ReentParser::Identifier);
    setState(1388);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::LeftBracket) {
      setState(1381);
      match(ReentParser::LeftBracket);
      setState(1383); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1382);
        match(ReentParser::IntegerLiteral);
        setState(1385); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == ReentParser::IntegerLiteral);
      setState(1387);
      match(ReentParser::RightBracket);
    }
     if (chains.find((dynamic_cast<Topology_nodeContext *>(_localctx)->ident != nullptr ? dynamic_cast<Topology_nodeContext *>(_localctx)->ident->getText() : "")) == chains.end()) throw FailedPredicateException(this, "Chain procedure Identifier expected in topology"); 
    setState(1391);
    match(ReentParser::LeftParen);
    setState(1393);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(1392);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1395);
    match(ReentParser::RightParen);
    setState(1398);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Div) {
      setState(1396);
      match(ReentParser::Div);
      setState(1397);
      primaryExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chain_callContext ------------------------------------------------------------------

ReentParser::Chain_callContext::Chain_callContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Chain_callContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Chain_callContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Chain_callContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}

ReentParser::ExpressionContext* ReentParser::Chain_callContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Chain_callContext::Div() {
  return getToken(ReentParser::Div, 0);
}

ReentParser::PrimaryExpressionContext* ReentParser::Chain_callContext::primaryExpression() {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(0);
}


size_t ReentParser::Chain_callContext::getRuleIndex() const {
  return ReentParser::RuleChain_call;
}

void ReentParser::Chain_callContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain_call(this);
}

void ReentParser::Chain_callContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain_call(this);
}

ReentParser::Chain_callContext* ReentParser::chain_call() {
  Chain_callContext *_localctx = _tracker.createInstance<Chain_callContext>(_ctx, getState());
  enterRule(_localctx, 190, ReentParser::RuleChain_call);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1400);
    dynamic_cast<Chain_callContext *>(_localctx)->ident = match(ReentParser::Identifier);
     if (chains.find((dynamic_cast<Chain_callContext *>(_localctx)->ident != nullptr ? dynamic_cast<Chain_callContext *>(_localctx)->ident->getText() : "")) == chains.end()) throw FailedPredicateException(this, "Chain procedure Identifier expected"); 
    setState(1402);
    match(ReentParser::LeftParen);
    setState(1404);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx)) {
    case 1: {
      setState(1403);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1406);
    match(ReentParser::RightParen);
    setState(1409);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Div) {
      setState(1407);
      match(ReentParser::Div);
      setState(1408);
      primaryExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Qualified_call_statementContext ------------------------------------------------------------------

ReentParser::Qualified_call_statementContext::Qualified_call_statementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::QualifiedIdContext* ReentParser::Qualified_call_statementContext::qualifiedId() {
  return getRuleContext<ReentParser::QualifiedIdContext>(0);
}

tree::TerminalNode* ReentParser::Qualified_call_statementContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Qualified_call_statementContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Qualified_call_statementContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::ExpressionContext* ReentParser::Qualified_call_statementContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}


size_t ReentParser::Qualified_call_statementContext::getRuleIndex() const {
  return ReentParser::RuleQualified_call_statement;
}

void ReentParser::Qualified_call_statementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualified_call_statement(this);
}

void ReentParser::Qualified_call_statementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualified_call_statement(this);
}

ReentParser::Qualified_call_statementContext* ReentParser::qualified_call_statement() {
  Qualified_call_statementContext *_localctx = _tracker.createInstance<Qualified_call_statementContext>(_ctx, getState());
  enterRule(_localctx, 192, ReentParser::RuleQualified_call_statement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1411);
    qualifiedId();
    setState(1412);
    match(ReentParser::LeftParen);
    setState(1414);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx)) {
    case 1: {
      setState(1413);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1416);
    match(ReentParser::RightParen);
    setState(1417);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExpressionStatementContext ------------------------------------------------------------------

ReentParser::ExpressionStatementContext::ExpressionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ExpressionStatementContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::ExpressionContext* ReentParser::ExpressionStatementContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}


size_t ReentParser::ExpressionStatementContext::getRuleIndex() const {
  return ReentParser::RuleExpressionStatement;
}

void ReentParser::ExpressionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpressionStatement(this);
}

void ReentParser::ExpressionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpressionStatement(this);
}

ReentParser::ExpressionStatementContext* ReentParser::expressionStatement() {
  ExpressionStatementContext *_localctx = _tracker.createInstance<ExpressionStatementContext>(_ctx, getState());
  enterRule(_localctx, 194, ReentParser::RuleExpressionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1420);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
    case 1: {
      setState(1419);
      expression();
      break;
    }

    default:
      break;
    }
    setState(1422);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CompoundStatementContext ------------------------------------------------------------------

ReentParser::CompoundStatementContext::CompoundStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::CompoundStatementContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::CompoundStatementContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

ReentParser::StatementSeqContext* ReentParser::CompoundStatementContext::statementSeq() {
  return getRuleContext<ReentParser::StatementSeqContext>(0);
}


size_t ReentParser::CompoundStatementContext::getRuleIndex() const {
  return ReentParser::RuleCompoundStatement;
}

void ReentParser::CompoundStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCompoundStatement(this);
}

void ReentParser::CompoundStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCompoundStatement(this);
}

ReentParser::CompoundStatementContext* ReentParser::compoundStatement() {
  CompoundStatementContext *_localctx = _tracker.createInstance<CompoundStatementContext>(_ctx, getState());
  enterRule(_localctx, 196, ReentParser::RuleCompoundStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1424);
    match(ReentParser::LeftBrace);
    setState(1426);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(1425);
      statementSeq();
      break;
    }

    default:
      break;
    }
    setState(1428);
    match(ReentParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StatementSeqContext ------------------------------------------------------------------

ReentParser::StatementSeqContext::StatementSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::StatementContext *> ReentParser::StatementSeqContext::statement() {
  return getRuleContexts<ReentParser::StatementContext>();
}

ReentParser::StatementContext* ReentParser::StatementSeqContext::statement(size_t i) {
  return getRuleContext<ReentParser::StatementContext>(i);
}


size_t ReentParser::StatementSeqContext::getRuleIndex() const {
  return ReentParser::RuleStatementSeq;
}

void ReentParser::StatementSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStatementSeq(this);
}

void ReentParser::StatementSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStatementSeq(this);
}

ReentParser::StatementSeqContext* ReentParser::statementSeq() {
  StatementSeqContext *_localctx = _tracker.createInstance<StatementSeqContext>(_ctx, getState());
  enterRule(_localctx, 198, ReentParser::RuleStatementSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1431); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1430);
              statement();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1433); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SelectionStatementContext ------------------------------------------------------------------

ReentParser::SelectionStatementContext::SelectionStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::SelectionStatementContext::If() {
  return getToken(ReentParser::If, 0);
}

tree::TerminalNode* ReentParser::SelectionStatementContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ConditionContext* ReentParser::SelectionStatementContext::condition() {
  return getRuleContext<ReentParser::ConditionContext>(0);
}

tree::TerminalNode* ReentParser::SelectionStatementContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

std::vector<ReentParser::StatementContext *> ReentParser::SelectionStatementContext::statement() {
  return getRuleContexts<ReentParser::StatementContext>();
}

ReentParser::StatementContext* ReentParser::SelectionStatementContext::statement(size_t i) {
  return getRuleContext<ReentParser::StatementContext>(i);
}

tree::TerminalNode* ReentParser::SelectionStatementContext::Else() {
  return getToken(ReentParser::Else, 0);
}

tree::TerminalNode* ReentParser::SelectionStatementContext::Switch() {
  return getToken(ReentParser::Switch, 0);
}


size_t ReentParser::SelectionStatementContext::getRuleIndex() const {
  return ReentParser::RuleSelectionStatement;
}

void ReentParser::SelectionStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelectionStatement(this);
}

void ReentParser::SelectionStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelectionStatement(this);
}

ReentParser::SelectionStatementContext* ReentParser::selectionStatement() {
  SelectionStatementContext *_localctx = _tracker.createInstance<SelectionStatementContext>(_ctx, getState());
  enterRule(_localctx, 200, ReentParser::RuleSelectionStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1450);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::If: {
        enterOuterAlt(_localctx, 1);
        setState(1435);
        match(ReentParser::If);
        setState(1436);
        match(ReentParser::LeftParen);
        setState(1437);
        condition();
        setState(1438);
        match(ReentParser::RightParen);
        setState(1439);
        statement();
        setState(1442);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx)) {
        case 1: {
          setState(1440);
          match(ReentParser::Else);
          setState(1441);
          statement();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::Switch: {
        enterOuterAlt(_localctx, 2);
        setState(1444);
        match(ReentParser::Switch);
        setState(1445);
        match(ReentParser::LeftParen);
        setState(1446);
        condition();
        setState(1447);
        match(ReentParser::RightParen);
        setState(1448);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConditionContext ------------------------------------------------------------------

ReentParser::ConditionContext::ConditionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ExpressionContext* ReentParser::ConditionContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::ConditionContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::DeclaratorContext* ReentParser::ConditionContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

tree::TerminalNode* ReentParser::ConditionContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::InitializerClauseContext* ReentParser::ConditionContext::initializerClause() {
  return getRuleContext<ReentParser::InitializerClauseContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::ConditionContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ConditionContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::ConditionContext::getRuleIndex() const {
  return ReentParser::RuleCondition;
}

void ReentParser::ConditionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCondition(this);
}

void ReentParser::ConditionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCondition(this);
}

ReentParser::ConditionContext* ReentParser::condition() {
  ConditionContext *_localctx = _tracker.createInstance<ConditionContext>(_ctx, getState());
  enterRule(_localctx, 202, ReentParser::RuleCondition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1463);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1452);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1454);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
        setState(1453);
        attributeSpecifierSeq();
      }
      setState(1456);
      declSpecifierSeq();
      setState(1457);
      declarator();
      setState(1461);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ReentParser::Assign: {
          setState(1458);
          match(ReentParser::Assign);
          setState(1459);
          initializerClause();
          break;
        }

        case ReentParser::LeftBrace: {
          setState(1460);
          bracedInitList();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- IterationStatementContext ------------------------------------------------------------------

ReentParser::IterationStatementContext::IterationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::IterationStatementContext::While() {
  return getToken(ReentParser::While, 0);
}

tree::TerminalNode* ReentParser::IterationStatementContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ConditionContext* ReentParser::IterationStatementContext::condition() {
  return getRuleContext<ReentParser::ConditionContext>(0);
}

tree::TerminalNode* ReentParser::IterationStatementContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::StatementContext* ReentParser::IterationStatementContext::statement() {
  return getRuleContext<ReentParser::StatementContext>(0);
}

tree::TerminalNode* ReentParser::IterationStatementContext::Do() {
  return getToken(ReentParser::Do, 0);
}

ReentParser::ExpressionContext* ReentParser::IterationStatementContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::IterationStatementContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::IterationStatementContext::For() {
  return getToken(ReentParser::For, 0);
}

ReentParser::ForInitStatementContext* ReentParser::IterationStatementContext::forInitStatement() {
  return getRuleContext<ReentParser::ForInitStatementContext>(0);
}

ReentParser::ForRangeDeclarationContext* ReentParser::IterationStatementContext::forRangeDeclaration() {
  return getRuleContext<ReentParser::ForRangeDeclarationContext>(0);
}

tree::TerminalNode* ReentParser::IterationStatementContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::ForRangeInitializerContext* ReentParser::IterationStatementContext::forRangeInitializer() {
  return getRuleContext<ReentParser::ForRangeInitializerContext>(0);
}


size_t ReentParser::IterationStatementContext::getRuleIndex() const {
  return ReentParser::RuleIterationStatement;
}

void ReentParser::IterationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIterationStatement(this);
}

void ReentParser::IterationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIterationStatement(this);
}

ReentParser::IterationStatementContext* ReentParser::iterationStatement() {
  IterationStatementContext *_localctx = _tracker.createInstance<IterationStatementContext>(_ctx, getState());
  enterRule(_localctx, 204, ReentParser::RuleIterationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1498);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::While: {
        enterOuterAlt(_localctx, 1);
        setState(1465);
        match(ReentParser::While);
        setState(1466);
        match(ReentParser::LeftParen);
        setState(1467);
        condition();
        setState(1468);
        match(ReentParser::RightParen);
        setState(1469);
        statement();
        break;
      }

      case ReentParser::Do: {
        enterOuterAlt(_localctx, 2);
        setState(1471);
        match(ReentParser::Do);
        setState(1472);
        statement();
        setState(1473);
        match(ReentParser::While);
        setState(1474);
        match(ReentParser::LeftParen);
        setState(1475);
        expression();
        setState(1476);
        match(ReentParser::RightParen);
        setState(1477);
        match(ReentParser::Semi);
        break;
      }

      case ReentParser::For: {
        enterOuterAlt(_localctx, 3);
        setState(1479);
        match(ReentParser::For);
        setState(1480);
        match(ReentParser::LeftParen);
        setState(1493);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx)) {
        case 1: {
          setState(1481);
          forInitStatement();
          setState(1483);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
          case 1: {
            setState(1482);
            condition();
            break;
          }

          default:
            break;
          }
          setState(1485);
          match(ReentParser::Semi);
          setState(1487);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
          case 1: {
            setState(1486);
            expression();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 2: {
          setState(1489);
          forRangeDeclaration();
          setState(1490);
          match(ReentParser::Colon);
          setState(1491);
          forRangeInitializer();
          break;
        }

        default:
          break;
        }
        setState(1495);
        match(ReentParser::RightParen);
        setState(1496);
        statement();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForInitStatementContext ------------------------------------------------------------------

ReentParser::ForInitStatementContext::ForInitStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ExpressionStatementContext* ReentParser::ForInitStatementContext::expressionStatement() {
  return getRuleContext<ReentParser::ExpressionStatementContext>(0);
}

ReentParser::SimpleDeclarationContext* ReentParser::ForInitStatementContext::simpleDeclaration() {
  return getRuleContext<ReentParser::SimpleDeclarationContext>(0);
}


size_t ReentParser::ForInitStatementContext::getRuleIndex() const {
  return ReentParser::RuleForInitStatement;
}

void ReentParser::ForInitStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForInitStatement(this);
}

void ReentParser::ForInitStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForInitStatement(this);
}

ReentParser::ForInitStatementContext* ReentParser::forInitStatement() {
  ForInitStatementContext *_localctx = _tracker.createInstance<ForInitStatementContext>(_ctx, getState());
  enterRule(_localctx, 206, ReentParser::RuleForInitStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1500);
      expressionStatement();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1501);
      simpleDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeDeclarationContext ------------------------------------------------------------------

ReentParser::ForRangeDeclarationContext::ForRangeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclSpecifierSeqContext* ReentParser::ForRangeDeclarationContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::DeclaratorContext* ReentParser::ForRangeDeclarationContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ForRangeDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::ForRangeDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleForRangeDeclaration;
}

void ReentParser::ForRangeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForRangeDeclaration(this);
}

void ReentParser::ForRangeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForRangeDeclaration(this);
}

ReentParser::ForRangeDeclarationContext* ReentParser::forRangeDeclaration() {
  ForRangeDeclarationContext *_localctx = _tracker.createInstance<ForRangeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 208, ReentParser::RuleForRangeDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1505);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(1504);
      attributeSpecifierSeq();
    }
    setState(1507);
    declSpecifierSeq();
    setState(1508);
    declarator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ForRangeInitializerContext ------------------------------------------------------------------

ReentParser::ForRangeInitializerContext::ForRangeInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ExpressionContext* ReentParser::ForRangeInitializerContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::ForRangeInitializerContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}


size_t ReentParser::ForRangeInitializerContext::getRuleIndex() const {
  return ReentParser::RuleForRangeInitializer;
}

void ReentParser::ForRangeInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterForRangeInitializer(this);
}

void ReentParser::ForRangeInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitForRangeInitializer(this);
}

ReentParser::ForRangeInitializerContext* ReentParser::forRangeInitializer() {
  ForRangeInitializerContext *_localctx = _tracker.createInstance<ForRangeInitializerContext>(_ctx, getState());
  enterRule(_localctx, 210, ReentParser::RuleForRangeInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1512);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1510);
      expression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1511);
      bracedInitList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- JumpStatementContext ------------------------------------------------------------------

ReentParser::JumpStatementContext::JumpStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::JumpStatementContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::JumpStatementContext::Break() {
  return getToken(ReentParser::Break, 0);
}

tree::TerminalNode* ReentParser::JumpStatementContext::Continue() {
  return getToken(ReentParser::Continue, 0);
}

tree::TerminalNode* ReentParser::JumpStatementContext::Return() {
  return getToken(ReentParser::Return, 0);
}

tree::TerminalNode* ReentParser::JumpStatementContext::Goto() {
  return getToken(ReentParser::Goto, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::JumpStatementContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::ExpressionContext* ReentParser::JumpStatementContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::JumpStatementContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}


size_t ReentParser::JumpStatementContext::getRuleIndex() const {
  return ReentParser::RuleJumpStatement;
}

void ReentParser::JumpStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterJumpStatement(this);
}

void ReentParser::JumpStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitJumpStatement(this);
}

ReentParser::JumpStatementContext* ReentParser::jumpStatement() {
  JumpStatementContext *_localctx = _tracker.createInstance<JumpStatementContext>(_ctx, getState());
  enterRule(_localctx, 212, ReentParser::RuleJumpStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Break: {
        setState(1514);
        match(ReentParser::Break);
        break;
      }

      case ReentParser::Continue: {
        setState(1515);
        match(ReentParser::Continue);
        break;
      }

      case ReentParser::Return: {
        setState(1516);
        match(ReentParser::Return);
        setState(1519);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx)) {
        case 1: {
          setState(1517);
          expression();
          break;
        }

        case 2: {
          setState(1518);
          bracedInitList();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::Goto: {
        setState(1521);
        match(ReentParser::Goto);
        setState(1522);
        anyIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(1525);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationStatementContext ------------------------------------------------------------------

ReentParser::DeclarationStatementContext::DeclarationStatementContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::BlockDeclarationContext* ReentParser::DeclarationStatementContext::blockDeclaration() {
  return getRuleContext<ReentParser::BlockDeclarationContext>(0);
}


size_t ReentParser::DeclarationStatementContext::getRuleIndex() const {
  return ReentParser::RuleDeclarationStatement;
}

void ReentParser::DeclarationStatementContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationStatement(this);
}

void ReentParser::DeclarationStatementContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationStatement(this);
}

ReentParser::DeclarationStatementContext* ReentParser::declarationStatement() {
  DeclarationStatementContext *_localctx = _tracker.createInstance<DeclarationStatementContext>(_ctx, getState());
  enterRule(_localctx, 214, ReentParser::RuleDeclarationStatement);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1527);
    blockDeclaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationseqContext ------------------------------------------------------------------

ReentParser::DeclarationseqContext::DeclarationseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::DeclarationContext *> ReentParser::DeclarationseqContext::declaration() {
  return getRuleContexts<ReentParser::DeclarationContext>();
}

ReentParser::DeclarationContext* ReentParser::DeclarationseqContext::declaration(size_t i) {
  return getRuleContext<ReentParser::DeclarationContext>(i);
}


size_t ReentParser::DeclarationseqContext::getRuleIndex() const {
  return ReentParser::RuleDeclarationseq;
}

void ReentParser::DeclarationseqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarationseq(this);
}

void ReentParser::DeclarationseqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarationseq(this);
}

ReentParser::DeclarationseqContext* ReentParser::declarationseq() {
  DeclarationseqContext *_localctx = _tracker.createInstance<DeclarationseqContext>(_ctx, getState());
  enterRule(_localctx, 216, ReentParser::RuleDeclarationseq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1530); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1529);
      declaration();
      setState(1532); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::PlanPragma)
      | (1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Asm)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Chain)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Namespace - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Reenterable - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Static_assert - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Template - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Using - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Semi - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclarationContext ------------------------------------------------------------------

ReentParser::DeclarationContext::DeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Plan_pragmaContext* ReentParser::DeclarationContext::plan_pragma() {
  return getRuleContext<ReentParser::Plan_pragmaContext>(0);
}

ReentParser::ReenterableDeclarationContext* ReentParser::DeclarationContext::reenterableDeclaration() {
  return getRuleContext<ReentParser::ReenterableDeclarationContext>(0);
}

ReentParser::ReenterableDefinitionContext* ReentParser::DeclarationContext::reenterableDefinition() {
  return getRuleContext<ReentParser::ReenterableDefinitionContext>(0);
}

ReentParser::ChainDeclarationContext* ReentParser::DeclarationContext::chainDeclaration() {
  return getRuleContext<ReentParser::ChainDeclarationContext>(0);
}

ReentParser::ChainDefinitionContext* ReentParser::DeclarationContext::chainDefinition() {
  return getRuleContext<ReentParser::ChainDefinitionContext>(0);
}

ReentParser::FunctionDefinitionContext* ReentParser::DeclarationContext::functionDefinition() {
  return getRuleContext<ReentParser::FunctionDefinitionContext>(0);
}

ReentParser::BlockDeclarationContext* ReentParser::DeclarationContext::blockDeclaration() {
  return getRuleContext<ReentParser::BlockDeclarationContext>(0);
}

ReentParser::TemplateDeclarationContext* ReentParser::DeclarationContext::templateDeclaration() {
  return getRuleContext<ReentParser::TemplateDeclarationContext>(0);
}

ReentParser::ExplicitInstantiationContext* ReentParser::DeclarationContext::explicitInstantiation() {
  return getRuleContext<ReentParser::ExplicitInstantiationContext>(0);
}

ReentParser::ExplicitSpecializationContext* ReentParser::DeclarationContext::explicitSpecialization() {
  return getRuleContext<ReentParser::ExplicitSpecializationContext>(0);
}

ReentParser::LinkageSpecificationContext* ReentParser::DeclarationContext::linkageSpecification() {
  return getRuleContext<ReentParser::LinkageSpecificationContext>(0);
}

ReentParser::NamespaceDefinitionContext* ReentParser::DeclarationContext::namespaceDefinition() {
  return getRuleContext<ReentParser::NamespaceDefinitionContext>(0);
}

ReentParser::EmptyDeclarationContext* ReentParser::DeclarationContext::emptyDeclaration() {
  return getRuleContext<ReentParser::EmptyDeclarationContext>(0);
}

ReentParser::AttributeDeclarationContext* ReentParser::DeclarationContext::attributeDeclaration() {
  return getRuleContext<ReentParser::AttributeDeclarationContext>(0);
}


size_t ReentParser::DeclarationContext::getRuleIndex() const {
  return ReentParser::RuleDeclaration;
}

void ReentParser::DeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaration(this);
}

void ReentParser::DeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaration(this);
}

ReentParser::DeclarationContext* ReentParser::declaration() {
  DeclarationContext *_localctx = _tracker.createInstance<DeclarationContext>(_ctx, getState());
  enterRule(_localctx, 218, ReentParser::RuleDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1548);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1534);
      plan_pragma();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1535);
      reenterableDeclaration();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1536);
      reenterableDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1537);
      chainDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1538);
      chainDefinition();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1539);
      functionDefinition();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1540);
      blockDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1541);
      templateDeclaration();
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1542);
      explicitInstantiation();
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1543);
      explicitSpecialization();
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1544);
      linkageSpecification();
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1545);
      namespaceDefinition();
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1546);
      emptyDeclaration();
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1547);
      attributeDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockDeclarationContext ------------------------------------------------------------------

ReentParser::BlockDeclarationContext::BlockDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::SimpleDeclarationContext* ReentParser::BlockDeclarationContext::simpleDeclaration() {
  return getRuleContext<ReentParser::SimpleDeclarationContext>(0);
}

ReentParser::AsmDefinitionContext* ReentParser::BlockDeclarationContext::asmDefinition() {
  return getRuleContext<ReentParser::AsmDefinitionContext>(0);
}

ReentParser::NamespaceAliasDefinitionContext* ReentParser::BlockDeclarationContext::namespaceAliasDefinition() {
  return getRuleContext<ReentParser::NamespaceAliasDefinitionContext>(0);
}

ReentParser::UsingDeclarationContext* ReentParser::BlockDeclarationContext::usingDeclaration() {
  return getRuleContext<ReentParser::UsingDeclarationContext>(0);
}

ReentParser::UsingDirectiveContext* ReentParser::BlockDeclarationContext::usingDirective() {
  return getRuleContext<ReentParser::UsingDirectiveContext>(0);
}

ReentParser::StaticAssertDeclarationContext* ReentParser::BlockDeclarationContext::staticAssertDeclaration() {
  return getRuleContext<ReentParser::StaticAssertDeclarationContext>(0);
}

ReentParser::AliasDeclarationContext* ReentParser::BlockDeclarationContext::aliasDeclaration() {
  return getRuleContext<ReentParser::AliasDeclarationContext>(0);
}

ReentParser::OpaqueEnumDeclarationContext* ReentParser::BlockDeclarationContext::opaqueEnumDeclaration() {
  return getRuleContext<ReentParser::OpaqueEnumDeclarationContext>(0);
}


size_t ReentParser::BlockDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleBlockDeclaration;
}

void ReentParser::BlockDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlockDeclaration(this);
}

void ReentParser::BlockDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlockDeclaration(this);
}

ReentParser::BlockDeclarationContext* ReentParser::blockDeclaration() {
  BlockDeclarationContext *_localctx = _tracker.createInstance<BlockDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 220, ReentParser::RuleBlockDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1558);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1550);
      simpleDeclaration();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1551);
      asmDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1552);
      namespaceAliasDefinition();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1553);
      usingDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1554);
      usingDirective();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1555);
      staticAssertDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1556);
      aliasDeclaration();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1557);
      opaqueEnumDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AliasDeclarationContext ------------------------------------------------------------------

ReentParser::AliasDeclarationContext::AliasDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AliasDeclarationContext::Using() {
  return getToken(ReentParser::Using, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::AliasDeclarationContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::AliasDeclarationContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::TheTypeIdContext* ReentParser::AliasDeclarationContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::AliasDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::AliasDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::AliasDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleAliasDeclaration;
}

void ReentParser::AliasDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAliasDeclaration(this);
}

void ReentParser::AliasDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAliasDeclaration(this);
}

ReentParser::AliasDeclarationContext* ReentParser::aliasDeclaration() {
  AliasDeclarationContext *_localctx = _tracker.createInstance<AliasDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 222, ReentParser::RuleAliasDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1560);
    match(ReentParser::Using);
    setState(1561);
    anyIdentifier();
    setState(1563);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(1562);
      attributeSpecifierSeq();
    }
    setState(1565);
    match(ReentParser::Assign);
    setState(1566);
    theTypeId();
    setState(1567);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleDeclarationContext ------------------------------------------------------------------

ReentParser::SimpleDeclarationContext::SimpleDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::SimpleDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::SimpleDeclarationContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::InitDeclaratorListContext* ReentParser::SimpleDeclarationContext::initDeclaratorList() {
  return getRuleContext<ReentParser::InitDeclaratorListContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::SimpleDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::SimpleDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleSimpleDeclaration;
}

void ReentParser::SimpleDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleDeclaration(this);
}

void ReentParser::SimpleDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleDeclaration(this);
}

ReentParser::SimpleDeclarationContext* ReentParser::simpleDeclaration() {
  SimpleDeclarationContext *_localctx = _tracker.createInstance<SimpleDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 224, ReentParser::RuleSimpleDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1581);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Cfunnel:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Class:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Const:
      case ReentParser::Constexpr:
      case ReentParser::Csem:
      case ReentParser::Cvar:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::Double:
      case ReentParser::End:
      case ReentParser::Enum:
      case ReentParser::Explicit:
      case ReentParser::Extern:
      case ReentParser::Float:
      case ReentParser::Friend:
      case ReentParser::Funnel:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Inline:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Markupdef:
      case ReentParser::Mutable:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Plan_item_type:
      case ReentParser::Plan_type:
      case ReentParser::Register:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Soft_transact_array:
      case ReentParser::Soft_transact_in:
      case ReentParser::Soft_transact_out:
      case ReentParser::Soft_transact_var:
      case ReentParser::Static:
      case ReentParser::Struct:
      case ReentParser::Thread_local:
      case ReentParser::Typedef:
      case ReentParser::Typename_:
      case ReentParser::Union:
      case ReentParser::Unsigned:
      case ReentParser::Vectorized:
      case ReentParser::Virtual:
      case ReentParser::Void:
      case ReentParser::Volatile:
      case ReentParser::Wchar:
      case ReentParser::Doublecolon:
      case ReentParser::Semi:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(1573);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << ReentParser::Auto)
          | (1ULL << ReentParser::Begin)
          | (1ULL << ReentParser::Bool)
          | (1ULL << ReentParser::Cfunnel)
          | (1ULL << ReentParser::Char)
          | (1ULL << ReentParser::Char16)
          | (1ULL << ReentParser::Char32)
          | (1ULL << ReentParser::Class)
          | (1ULL << ReentParser::Clustered)
          | (1ULL << ReentParser::Common)
          | (1ULL << ReentParser::Const)
          | (1ULL << ReentParser::Constexpr)
          | (1ULL << ReentParser::Csem)
          | (1ULL << ReentParser::Cvar)
          | (1ULL << ReentParser::Decltype)
          | (1ULL << ReentParser::Depends)
          | (1ULL << ReentParser::Double)
          | (1ULL << ReentParser::End)
          | (1ULL << ReentParser::Enum)
          | (1ULL << ReentParser::Explicit)
          | (1ULL << ReentParser::Extern)
          | (1ULL << ReentParser::Float)
          | (1ULL << ReentParser::Friend)
          | (1ULL << ReentParser::Funnel)
          | (1ULL << ReentParser::Global)
          | (1ULL << ReentParser::Gpu)
          | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
          | (1ULL << (ReentParser::Inline - 65))
          | (1ULL << (ReentParser::Int - 65))
          | (1ULL << (ReentParser::Local - 65))
          | (1ULL << (ReentParser::Long - 65))
          | (1ULL << (ReentParser::MarkPreCondition - 65))
          | (1ULL << (ReentParser::MarkState - 65))
          | (1ULL << (ReentParser::Markupdef - 65))
          | (1ULL << (ReentParser::Mutable - 65))
          | (1ULL << (ReentParser::Out - 65))
          | (1ULL << (ReentParser::Plan - 65))
          | (1ULL << (ReentParser::Plan_item_type - 65))
          | (1ULL << (ReentParser::Plan_type - 65))
          | (1ULL << (ReentParser::Register - 65))
          | (1ULL << (ReentParser::Reset - 65))
          | (1ULL << (ReentParser::Set - 65))
          | (1ULL << (ReentParser::Short - 65))
          | (1ULL << (ReentParser::Signed - 65))
          | (1ULL << (ReentParser::Soft_transact_array - 65))
          | (1ULL << (ReentParser::Soft_transact_in - 65))
          | (1ULL << (ReentParser::Soft_transact_out - 65))
          | (1ULL << (ReentParser::Soft_transact_var - 65))
          | (1ULL << (ReentParser::Static - 65))
          | (1ULL << (ReentParser::Struct - 65))
          | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
          | (1ULL << (ReentParser::Typename_ - 134))
          | (1ULL << (ReentParser::Union - 134))
          | (1ULL << (ReentParser::Unsigned - 134))
          | (1ULL << (ReentParser::Vectorized - 134))
          | (1ULL << (ReentParser::Virtual - 134))
          | (1ULL << (ReentParser::Void - 134))
          | (1ULL << (ReentParser::Volatile - 134))
          | (1ULL << (ReentParser::Wchar - 134))
          | (1ULL << (ReentParser::Doublecolon - 134))
          | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
          setState(1569);
          declSpecifierSeq();
          setState(1571);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & ((1ULL << ReentParser::Begin)
            | (1ULL << ReentParser::Clustered)
            | (1ULL << ReentParser::Common)
            | (1ULL << ReentParser::Decltype)
            | (1ULL << ReentParser::Depends)
            | (1ULL << ReentParser::End)
            | (1ULL << ReentParser::Global)
            | (1ULL << ReentParser::Gpu)
            | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
            | (1ULL << (ReentParser::Local - 65))
            | (1ULL << (ReentParser::MarkPreCondition - 65))
            | (1ULL << (ReentParser::MarkState - 65))
            | (1ULL << (ReentParser::Operator - 65))
            | (1ULL << (ReentParser::Out - 65))
            | (1ULL << (ReentParser::Plan - 65))
            | (1ULL << (ReentParser::Reset - 65))
            | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
            ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
            | (1ULL << (ReentParser::LeftParen - 140))
            | (1ULL << (ReentParser::Star - 140))
            | (1ULL << (ReentParser::And - 140))
            | (1ULL << (ReentParser::Tilde - 140))
            | (1ULL << (ReentParser::AndAnd - 140))
            | (1ULL << (ReentParser::Doublecolon - 140))
            | (1ULL << (ReentParser::Ellipsis - 140))
            | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
            setState(1570);
            initDeclaratorList();
          }
        }
        setState(1575);
        match(ReentParser::Semi);
        break;
      }

      case ReentParser::Alignas:
      case ReentParser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(1576);
        attributeSpecifierSeq();
        setState(1577);
        declSpecifierSeq();
        setState(1578);
        initDeclaratorList();
        setState(1579);
        match(ReentParser::Semi);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StaticAssertDeclarationContext ------------------------------------------------------------------

ReentParser::StaticAssertDeclarationContext::StaticAssertDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::StaticAssertDeclarationContext::Static_assert() {
  return getToken(ReentParser::Static_assert, 0);
}

tree::TerminalNode* ReentParser::StaticAssertDeclarationContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::StaticAssertDeclarationContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::StaticAssertDeclarationContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

tree::TerminalNode* ReentParser::StaticAssertDeclarationContext::StringLiteral() {
  return getToken(ReentParser::StringLiteral, 0);
}

tree::TerminalNode* ReentParser::StaticAssertDeclarationContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::StaticAssertDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::StaticAssertDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleStaticAssertDeclaration;
}

void ReentParser::StaticAssertDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStaticAssertDeclaration(this);
}

void ReentParser::StaticAssertDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStaticAssertDeclaration(this);
}

ReentParser::StaticAssertDeclarationContext* ReentParser::staticAssertDeclaration() {
  StaticAssertDeclarationContext *_localctx = _tracker.createInstance<StaticAssertDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 226, ReentParser::RuleStaticAssertDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1583);
    match(ReentParser::Static_assert);
    setState(1584);
    match(ReentParser::LeftParen);
    setState(1585);
    constantExpression();
    setState(1586);
    match(ReentParser::Comma);
    setState(1587);
    match(ReentParser::StringLiteral);
    setState(1588);
    match(ReentParser::RightParen);
    setState(1589);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EmptyDeclarationContext ------------------------------------------------------------------

ReentParser::EmptyDeclarationContext::EmptyDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::EmptyDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::EmptyDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleEmptyDeclaration;
}

void ReentParser::EmptyDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEmptyDeclaration(this);
}

void ReentParser::EmptyDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEmptyDeclaration(this);
}

ReentParser::EmptyDeclarationContext* ReentParser::emptyDeclaration() {
  EmptyDeclarationContext *_localctx = _tracker.createInstance<EmptyDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 228, ReentParser::RuleEmptyDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1591);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeDeclarationContext ------------------------------------------------------------------

ReentParser::AttributeDeclarationContext::AttributeDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::AttributeDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

tree::TerminalNode* ReentParser::AttributeDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::AttributeDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleAttributeDeclaration;
}

void ReentParser::AttributeDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeDeclaration(this);
}

void ReentParser::AttributeDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeDeclaration(this);
}

ReentParser::AttributeDeclarationContext* ReentParser::attributeDeclaration() {
  AttributeDeclarationContext *_localctx = _tracker.createInstance<AttributeDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 230, ReentParser::RuleAttributeDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1593);
    attributeSpecifierSeq();
    setState(1594);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSpecifierContext ------------------------------------------------------------------

ReentParser::DeclSpecifierContext::DeclSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::DeclSpecifierContext::Friend() {
  return getToken(ReentParser::Friend, 0);
}

tree::TerminalNode* ReentParser::DeclSpecifierContext::Typedef() {
  return getToken(ReentParser::Typedef, 0);
}

tree::TerminalNode* ReentParser::DeclSpecifierContext::Markupdef() {
  return getToken(ReentParser::Markupdef, 0);
}

tree::TerminalNode* ReentParser::DeclSpecifierContext::Constexpr() {
  return getToken(ReentParser::Constexpr, 0);
}

ReentParser::StorageClassSpecifierContext* ReentParser::DeclSpecifierContext::storageClassSpecifier() {
  return getRuleContext<ReentParser::StorageClassSpecifierContext>(0);
}

ReentParser::TypeSpecifierContext* ReentParser::DeclSpecifierContext::typeSpecifier() {
  return getRuleContext<ReentParser::TypeSpecifierContext>(0);
}

ReentParser::FunctionSpecifierContext* ReentParser::DeclSpecifierContext::functionSpecifier() {
  return getRuleContext<ReentParser::FunctionSpecifierContext>(0);
}


size_t ReentParser::DeclSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleDeclSpecifier;
}

void ReentParser::DeclSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclSpecifier(this);
}

void ReentParser::DeclSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclSpecifier(this);
}

ReentParser::DeclSpecifierContext* ReentParser::declSpecifier() {
  DeclSpecifierContext *_localctx = _tracker.createInstance<DeclSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 232, ReentParser::RuleDeclSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1603);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Friend: {
        enterOuterAlt(_localctx, 1);
        setState(1596);
        match(ReentParser::Friend);
        break;
      }

      case ReentParser::Typedef: {
        enterOuterAlt(_localctx, 2);
        setState(1597);
        match(ReentParser::Typedef);
        break;
      }

      case ReentParser::Markupdef: {
        enterOuterAlt(_localctx, 3);
        setState(1598);
        match(ReentParser::Markupdef);
        break;
      }

      case ReentParser::Constexpr: {
        enterOuterAlt(_localctx, 4);
        setState(1599);
        match(ReentParser::Constexpr);
        break;
      }

      case ReentParser::Extern:
      case ReentParser::Mutable:
      case ReentParser::Register:
      case ReentParser::Static:
      case ReentParser::Thread_local: {
        enterOuterAlt(_localctx, 5);
        setState(1600);
        storageClassSpecifier();
        break;
      }

      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Cfunnel:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Class:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Const:
      case ReentParser::Csem:
      case ReentParser::Cvar:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::Double:
      case ReentParser::End:
      case ReentParser::Enum:
      case ReentParser::Float:
      case ReentParser::Funnel:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Plan_item_type:
      case ReentParser::Plan_type:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Soft_transact_array:
      case ReentParser::Soft_transact_in:
      case ReentParser::Soft_transact_out:
      case ReentParser::Soft_transact_var:
      case ReentParser::Struct:
      case ReentParser::Typename_:
      case ReentParser::Union:
      case ReentParser::Unsigned:
      case ReentParser::Vectorized:
      case ReentParser::Void:
      case ReentParser::Volatile:
      case ReentParser::Wchar:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 6);
        setState(1601);
        typeSpecifier();
        break;
      }

      case ReentParser::Explicit:
      case ReentParser::Inline:
      case ReentParser::Virtual: {
        enterOuterAlt(_localctx, 7);
        setState(1602);
        functionSpecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclSpecifierSeqContext ------------------------------------------------------------------

ReentParser::DeclSpecifierSeqContext::DeclSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::DeclSpecifierContext *> ReentParser::DeclSpecifierSeqContext::declSpecifier() {
  return getRuleContexts<ReentParser::DeclSpecifierContext>();
}

ReentParser::DeclSpecifierContext* ReentParser::DeclSpecifierSeqContext::declSpecifier(size_t i) {
  return getRuleContext<ReentParser::DeclSpecifierContext>(i);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::DeclSpecifierSeqContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::DeclSpecifierSeqContext::getRuleIndex() const {
  return ReentParser::RuleDeclSpecifierSeq;
}

void ReentParser::DeclSpecifierSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclSpecifierSeq(this);
}

void ReentParser::DeclSpecifierSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclSpecifierSeq(this);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::declSpecifierSeq() {
  DeclSpecifierSeqContext *_localctx = _tracker.createInstance<DeclSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 234, ReentParser::RuleDeclSpecifierSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1606); 
    _errHandler->sync(this);
    alt = 1 + 1;
    do {
      switch (alt) {
        case 1 + 1: {
              setState(1605);
              declSpecifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1608); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx);
    } while (alt != 1 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1611);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      setState(1610);
      attributeSpecifierSeq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_special_typeContext ------------------------------------------------------------------

ReentParser::Reent_special_typeContext::Reent_special_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Reent_funnel_typeContext* ReentParser::Reent_special_typeContext::reent_funnel_type() {
  return getRuleContext<ReentParser::Reent_funnel_typeContext>(0);
}

ReentParser::Reent_cfunnel_typeContext* ReentParser::Reent_special_typeContext::reent_cfunnel_type() {
  return getRuleContext<ReentParser::Reent_cfunnel_typeContext>(0);
}

ReentParser::Reent_cvar_typeContext* ReentParser::Reent_special_typeContext::reent_cvar_type() {
  return getRuleContext<ReentParser::Reent_cvar_typeContext>(0);
}

ReentParser::Reent_csem_typeContext* ReentParser::Reent_special_typeContext::reent_csem_type() {
  return getRuleContext<ReentParser::Reent_csem_typeContext>(0);
}

ReentParser::Reent_soft_transact_arrayContext* ReentParser::Reent_special_typeContext::reent_soft_transact_array() {
  return getRuleContext<ReentParser::Reent_soft_transact_arrayContext>(0);
}

ReentParser::Reent_soft_transact_varContext* ReentParser::Reent_special_typeContext::reent_soft_transact_var() {
  return getRuleContext<ReentParser::Reent_soft_transact_varContext>(0);
}

ReentParser::Reent_soft_transact_inContext* ReentParser::Reent_special_typeContext::reent_soft_transact_in() {
  return getRuleContext<ReentParser::Reent_soft_transact_inContext>(0);
}

ReentParser::Reent_soft_transact_outContext* ReentParser::Reent_special_typeContext::reent_soft_transact_out() {
  return getRuleContext<ReentParser::Reent_soft_transact_outContext>(0);
}

ReentParser::Reent_plan_typeContext* ReentParser::Reent_special_typeContext::reent_plan_type() {
  return getRuleContext<ReentParser::Reent_plan_typeContext>(0);
}

ReentParser::Reent_plan_item_typeContext* ReentParser::Reent_special_typeContext::reent_plan_item_type() {
  return getRuleContext<ReentParser::Reent_plan_item_typeContext>(0);
}


size_t ReentParser::Reent_special_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_special_type;
}

void ReentParser::Reent_special_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_special_type(this);
}

void ReentParser::Reent_special_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_special_type(this);
}

ReentParser::Reent_special_typeContext* ReentParser::reent_special_type() {
  Reent_special_typeContext *_localctx = _tracker.createInstance<Reent_special_typeContext>(_ctx, getState());
  enterRule(_localctx, 236, ReentParser::RuleReent_special_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1623);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Funnel: {
        enterOuterAlt(_localctx, 1);
        setState(1613);
        reent_funnel_type();
        break;
      }

      case ReentParser::Cfunnel: {
        enterOuterAlt(_localctx, 2);
        setState(1614);
        reent_cfunnel_type();
        break;
      }

      case ReentParser::Cvar: {
        enterOuterAlt(_localctx, 3);
        setState(1615);
        reent_cvar_type();
        break;
      }

      case ReentParser::Csem: {
        enterOuterAlt(_localctx, 4);
        setState(1616);
        reent_csem_type();
        break;
      }

      case ReentParser::Soft_transact_array: {
        enterOuterAlt(_localctx, 5);
        setState(1617);
        reent_soft_transact_array();
        break;
      }

      case ReentParser::Soft_transact_var: {
        enterOuterAlt(_localctx, 6);
        setState(1618);
        reent_soft_transact_var();
        break;
      }

      case ReentParser::Soft_transact_in: {
        enterOuterAlt(_localctx, 7);
        setState(1619);
        reent_soft_transact_in();
        break;
      }

      case ReentParser::Soft_transact_out: {
        enterOuterAlt(_localctx, 8);
        setState(1620);
        reent_soft_transact_out();
        break;
      }

      case ReentParser::Plan_type: {
        enterOuterAlt(_localctx, 9);
        setState(1621);
        reent_plan_type();
        break;
      }

      case ReentParser::Plan_item_type: {
        enterOuterAlt(_localctx, 10);
        setState(1622);
        reent_plan_item_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_funnel_typeContext ------------------------------------------------------------------

ReentParser::Reent_funnel_typeContext::Reent_funnel_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_funnel_typeContext::Funnel() {
  return getToken(ReentParser::Funnel, 0);
}

tree::TerminalNode* ReentParser::Reent_funnel_typeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_funnel_typeContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_funnel_typeContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_funnel_typeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_funnel_typeContext::In() {
  return getToken(ReentParser::In, 0);
}

tree::TerminalNode* ReentParser::Reent_funnel_typeContext::Out() {
  return getToken(ReentParser::Out, 0);
}


size_t ReentParser::Reent_funnel_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_funnel_type;
}

void ReentParser::Reent_funnel_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_funnel_type(this);
}

void ReentParser::Reent_funnel_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_funnel_type(this);
}

ReentParser::Reent_funnel_typeContext* ReentParser::reent_funnel_type() {
  Reent_funnel_typeContext *_localctx = _tracker.createInstance<Reent_funnel_typeContext>(_ctx, getState());
  enterRule(_localctx, 238, ReentParser::RuleReent_funnel_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1625);
    match(ReentParser::Funnel);
    setState(1626);
    match(ReentParser::LeftParen);
    setState(1627);
    _la = _input->LA(1);
    if (!(_la == ReentParser::In

    || _la == ReentParser::Out)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1628);
    match(ReentParser::Comma);
    setState(1629);
    simpleTypeSpecifier();
    setState(1630);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_cfunnel_typeContext ------------------------------------------------------------------

ReentParser::Reent_cfunnel_typeContext::Reent_cfunnel_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_cfunnel_typeContext::Cfunnel() {
  return getToken(ReentParser::Cfunnel, 0);
}

tree::TerminalNode* ReentParser::Reent_cfunnel_typeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_cfunnel_typeContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_cfunnel_typeContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_cfunnel_typeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_cfunnel_typeContext::In() {
  return getToken(ReentParser::In, 0);
}

tree::TerminalNode* ReentParser::Reent_cfunnel_typeContext::Out() {
  return getToken(ReentParser::Out, 0);
}


size_t ReentParser::Reent_cfunnel_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_cfunnel_type;
}

void ReentParser::Reent_cfunnel_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_cfunnel_type(this);
}

void ReentParser::Reent_cfunnel_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_cfunnel_type(this);
}

ReentParser::Reent_cfunnel_typeContext* ReentParser::reent_cfunnel_type() {
  Reent_cfunnel_typeContext *_localctx = _tracker.createInstance<Reent_cfunnel_typeContext>(_ctx, getState());
  enterRule(_localctx, 240, ReentParser::RuleReent_cfunnel_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1632);
    match(ReentParser::Cfunnel);

    		if (!allow_clustered)
    			throw FailedPredicateException(this, "using cfunnel without previous '#pragma plan clustered'");
    	
    setState(1634);
    match(ReentParser::LeftParen);
    setState(1635);
    _la = _input->LA(1);
    if (!(_la == ReentParser::In

    || _la == ReentParser::Out)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1636);
    match(ReentParser::Comma);
    setState(1637);
    simpleTypeSpecifier();
    setState(1638);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_cvar_typeContext ------------------------------------------------------------------

ReentParser::Reent_cvar_typeContext::Reent_cvar_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_cvar_typeContext::Cvar() {
  return getToken(ReentParser::Cvar, 0);
}

tree::TerminalNode* ReentParser::Reent_cvar_typeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_cvar_typeContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_cvar_typeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_cvar_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_cvar_type;
}

void ReentParser::Reent_cvar_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_cvar_type(this);
}

void ReentParser::Reent_cvar_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_cvar_type(this);
}

ReentParser::Reent_cvar_typeContext* ReentParser::reent_cvar_type() {
  Reent_cvar_typeContext *_localctx = _tracker.createInstance<Reent_cvar_typeContext>(_ctx, getState());
  enterRule(_localctx, 242, ReentParser::RuleReent_cvar_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1640);
    match(ReentParser::Cvar);

    		if (!allow_clustered)
    			throw FailedPredicateException(this, "using cvar without previous '#pragma plan clustered'");
    	
    setState(1642);
    match(ReentParser::LeftParen);
    setState(1643);
    simpleTypeSpecifier();
    setState(1644);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_csem_typeContext ------------------------------------------------------------------

ReentParser::Reent_csem_typeContext::Reent_csem_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_csem_typeContext::Csem() {
  return getToken(ReentParser::Csem, 0);
}


size_t ReentParser::Reent_csem_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_csem_type;
}

void ReentParser::Reent_csem_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_csem_type(this);
}

void ReentParser::Reent_csem_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_csem_type(this);
}

ReentParser::Reent_csem_typeContext* ReentParser::reent_csem_type() {
  Reent_csem_typeContext *_localctx = _tracker.createInstance<Reent_csem_typeContext>(_ctx, getState());
  enterRule(_localctx, 244, ReentParser::RuleReent_csem_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1646);
    match(ReentParser::Csem);

    		if (!allow_clustered)
    			throw FailedPredicateException(this, "using plan_csem_t without previous '#pragma plan clustered'");
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_soft_transact_arrayContext ------------------------------------------------------------------

ReentParser::Reent_soft_transact_arrayContext::Reent_soft_transact_arrayContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_soft_transact_arrayContext::Soft_transact_array() {
  return getToken(ReentParser::Soft_transact_array, 0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_arrayContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_soft_transact_arrayContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_arrayContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_soft_transact_arrayContext::getRuleIndex() const {
  return ReentParser::RuleReent_soft_transact_array;
}

void ReentParser::Reent_soft_transact_arrayContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_soft_transact_array(this);
}

void ReentParser::Reent_soft_transact_arrayContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_soft_transact_array(this);
}

ReentParser::Reent_soft_transact_arrayContext* ReentParser::reent_soft_transact_array() {
  Reent_soft_transact_arrayContext *_localctx = _tracker.createInstance<Reent_soft_transact_arrayContext>(_ctx, getState());
  enterRule(_localctx, 246, ReentParser::RuleReent_soft_transact_array);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1649);
    match(ReentParser::Soft_transact_array);
    setState(1650);
    match(ReentParser::LeftParen);
    setState(1651);
    simpleTypeSpecifier();
    setState(1652);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_soft_transact_varContext ------------------------------------------------------------------

ReentParser::Reent_soft_transact_varContext::Reent_soft_transact_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_soft_transact_varContext::Soft_transact_var() {
  return getToken(ReentParser::Soft_transact_var, 0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_varContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_soft_transact_varContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_varContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_soft_transact_varContext::getRuleIndex() const {
  return ReentParser::RuleReent_soft_transact_var;
}

void ReentParser::Reent_soft_transact_varContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_soft_transact_var(this);
}

void ReentParser::Reent_soft_transact_varContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_soft_transact_var(this);
}

ReentParser::Reent_soft_transact_varContext* ReentParser::reent_soft_transact_var() {
  Reent_soft_transact_varContext *_localctx = _tracker.createInstance<Reent_soft_transact_varContext>(_ctx, getState());
  enterRule(_localctx, 248, ReentParser::RuleReent_soft_transact_var);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1654);
    match(ReentParser::Soft_transact_var);
    setState(1655);
    match(ReentParser::LeftParen);
    setState(1656);
    simpleTypeSpecifier();
    setState(1657);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_soft_transact_inContext ------------------------------------------------------------------

ReentParser::Reent_soft_transact_inContext::Reent_soft_transact_inContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_soft_transact_inContext::Soft_transact_in() {
  return getToken(ReentParser::Soft_transact_in, 0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_inContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_soft_transact_inContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_inContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_soft_transact_inContext::getRuleIndex() const {
  return ReentParser::RuleReent_soft_transact_in;
}

void ReentParser::Reent_soft_transact_inContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_soft_transact_in(this);
}

void ReentParser::Reent_soft_transact_inContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_soft_transact_in(this);
}

ReentParser::Reent_soft_transact_inContext* ReentParser::reent_soft_transact_in() {
  Reent_soft_transact_inContext *_localctx = _tracker.createInstance<Reent_soft_transact_inContext>(_ctx, getState());
  enterRule(_localctx, 250, ReentParser::RuleReent_soft_transact_in);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1659);
    match(ReentParser::Soft_transact_in);
    setState(1660);
    match(ReentParser::LeftParen);
    setState(1661);
    simpleTypeSpecifier();
    setState(1662);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_soft_transact_outContext ------------------------------------------------------------------

ReentParser::Reent_soft_transact_outContext::Reent_soft_transact_outContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_soft_transact_outContext::Soft_transact_out() {
  return getToken(ReentParser::Soft_transact_out, 0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_outContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::Reent_soft_transact_outContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::Reent_soft_transact_outContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_soft_transact_outContext::getRuleIndex() const {
  return ReentParser::RuleReent_soft_transact_out;
}

void ReentParser::Reent_soft_transact_outContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_soft_transact_out(this);
}

void ReentParser::Reent_soft_transact_outContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_soft_transact_out(this);
}

ReentParser::Reent_soft_transact_outContext* ReentParser::reent_soft_transact_out() {
  Reent_soft_transact_outContext *_localctx = _tracker.createInstance<Reent_soft_transact_outContext>(_ctx, getState());
  enterRule(_localctx, 252, ReentParser::RuleReent_soft_transact_out);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1664);
    match(ReentParser::Soft_transact_out);
    setState(1665);
    match(ReentParser::LeftParen);
    setState(1666);
    simpleTypeSpecifier();
    setState(1667);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_plan_typeContext ------------------------------------------------------------------

ReentParser::Reent_plan_typeContext::Reent_plan_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_plan_typeContext::Plan_type() {
  return getToken(ReentParser::Plan_type, 0);
}

tree::TerminalNode* ReentParser::Reent_plan_typeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_plan_typeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_plan_typeContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}


size_t ReentParser::Reent_plan_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_plan_type;
}

void ReentParser::Reent_plan_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_plan_type(this);
}

void ReentParser::Reent_plan_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_plan_type(this);
}

ReentParser::Reent_plan_typeContext* ReentParser::reent_plan_type() {
  Reent_plan_typeContext *_localctx = _tracker.createInstance<Reent_plan_typeContext>(_ctx, getState());
  enterRule(_localctx, 254, ReentParser::RuleReent_plan_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1669);
    match(ReentParser::Plan_type);
    setState(1670);
    match(ReentParser::LeftParen);
    setState(1671);
    dynamic_cast<Reent_plan_typeContext *>(_localctx)->ident = match(ReentParser::Identifier);
     std::map<std::string,int>::iterator it = reenterables.find((dynamic_cast<Reent_plan_typeContext *>(_localctx)->ident != nullptr ? dynamic_cast<Reent_plan_typeContext *>(_localctx)->ident->getText() : ""));
    	  if (it == reenterables.end() || (it->second & static_flag) == 0)
    		throw FailedPredicateException(this, "Static reenterable procedure's name expected");
    	
    setState(1673);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_plan_item_typeContext ------------------------------------------------------------------

ReentParser::Reent_plan_item_typeContext::Reent_plan_item_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_plan_item_typeContext::Plan_item_type() {
  return getToken(ReentParser::Plan_item_type, 0);
}

tree::TerminalNode* ReentParser::Reent_plan_item_typeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_plan_item_typeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Reent_plan_item_typeContext::Identifier() {
  return getToken(ReentParser::Identifier, 0);
}


size_t ReentParser::Reent_plan_item_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_plan_item_type;
}

void ReentParser::Reent_plan_item_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_plan_item_type(this);
}

void ReentParser::Reent_plan_item_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_plan_item_type(this);
}

ReentParser::Reent_plan_item_typeContext* ReentParser::reent_plan_item_type() {
  Reent_plan_item_typeContext *_localctx = _tracker.createInstance<Reent_plan_item_typeContext>(_ctx, getState());
  enterRule(_localctx, 256, ReentParser::RuleReent_plan_item_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1675);
    match(ReentParser::Plan_item_type);
    setState(1676);
    match(ReentParser::LeftParen);
    setState(1677);
    dynamic_cast<Reent_plan_item_typeContext *>(_localctx)->ident = match(ReentParser::Identifier);
     std::map<std::string,int>::iterator it = reenterables.find((dynamic_cast<Reent_plan_item_typeContext *>(_localctx)->ident != nullptr ? dynamic_cast<Reent_plan_item_typeContext *>(_localctx)->ident->getText() : ""));
    	  if (it == reenterables.end() || (it->second & static_flag) == 0)
    		throw FailedPredicateException(this, "Static reenterable procedure's name expected");
    	
    setState(1679);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- StorageClassSpecifierContext ------------------------------------------------------------------

ReentParser::StorageClassSpecifierContext::StorageClassSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::StorageClassSpecifierContext::Register() {
  return getToken(ReentParser::Register, 0);
}

tree::TerminalNode* ReentParser::StorageClassSpecifierContext::Static() {
  return getToken(ReentParser::Static, 0);
}

tree::TerminalNode* ReentParser::StorageClassSpecifierContext::Thread_local() {
  return getToken(ReentParser::Thread_local, 0);
}

tree::TerminalNode* ReentParser::StorageClassSpecifierContext::Extern() {
  return getToken(ReentParser::Extern, 0);
}

tree::TerminalNode* ReentParser::StorageClassSpecifierContext::Mutable() {
  return getToken(ReentParser::Mutable, 0);
}


size_t ReentParser::StorageClassSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleStorageClassSpecifier;
}

void ReentParser::StorageClassSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorageClassSpecifier(this);
}

void ReentParser::StorageClassSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorageClassSpecifier(this);
}

ReentParser::StorageClassSpecifierContext* ReentParser::storageClassSpecifier() {
  StorageClassSpecifierContext *_localctx = _tracker.createInstance<StorageClassSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 258, ReentParser::RuleStorageClassSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1681);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Extern || ((((_la - 73) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 73)) & ((1ULL << (ReentParser::Mutable - 73))
      | (1ULL << (ReentParser::Register - 73))
      | (1ULL << (ReentParser::Static - 73))
      | (1ULL << (ReentParser::Thread_local - 73)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionSpecifierContext ------------------------------------------------------------------

ReentParser::FunctionSpecifierContext::FunctionSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::FunctionSpecifierContext::Inline() {
  return getToken(ReentParser::Inline, 0);
}

tree::TerminalNode* ReentParser::FunctionSpecifierContext::Virtual() {
  return getToken(ReentParser::Virtual, 0);
}

tree::TerminalNode* ReentParser::FunctionSpecifierContext::Explicit() {
  return getToken(ReentParser::Explicit, 0);
}


size_t ReentParser::FunctionSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleFunctionSpecifier;
}

void ReentParser::FunctionSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionSpecifier(this);
}

void ReentParser::FunctionSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionSpecifier(this);
}

ReentParser::FunctionSpecifierContext* ReentParser::functionSpecifier() {
  FunctionSpecifierContext *_localctx = _tracker.createInstance<FunctionSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 260, ReentParser::RuleFunctionSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1683);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Explicit

    || _la == ReentParser::Inline || _la == ReentParser::Virtual)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypedefNameContext ------------------------------------------------------------------

ReentParser::TypedefNameContext::TypedefNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::TypedefNameContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::TypedefNameContext::getRuleIndex() const {
  return ReentParser::RuleTypedefName;
}

void ReentParser::TypedefNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypedefName(this);
}

void ReentParser::TypedefNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypedefName(this);
}

ReentParser::TypedefNameContext* ReentParser::typedefName() {
  TypedefNameContext *_localctx = _tracker.createInstance<TypedefNameContext>(_ctx, getState());
  enterRule(_localctx, 262, ReentParser::RuleTypedefName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1685);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierContext ------------------------------------------------------------------

ReentParser::TypeSpecifierContext::TypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Reent_special_typeContext* ReentParser::TypeSpecifierContext::reent_special_type() {
  return getRuleContext<ReentParser::Reent_special_typeContext>(0);
}

ReentParser::ClassSpecifierContext* ReentParser::TypeSpecifierContext::classSpecifier() {
  return getRuleContext<ReentParser::ClassSpecifierContext>(0);
}

ReentParser::TrailingTypeSpecifierContext* ReentParser::TypeSpecifierContext::trailingTypeSpecifier() {
  return getRuleContext<ReentParser::TrailingTypeSpecifierContext>(0);
}

ReentParser::EnumSpecifierContext* ReentParser::TypeSpecifierContext::enumSpecifier() {
  return getRuleContext<ReentParser::EnumSpecifierContext>(0);
}


size_t ReentParser::TypeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleTypeSpecifier;
}

void ReentParser::TypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSpecifier(this);
}

void ReentParser::TypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSpecifier(this);
}

ReentParser::TypeSpecifierContext* ReentParser::typeSpecifier() {
  TypeSpecifierContext *_localctx = _tracker.createInstance<TypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 264, ReentParser::RuleTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1691);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1687);
      reent_special_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1688);
      classSpecifier();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1689);
      trailingTypeSpecifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1690);
      enumSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingTypeSpecifierContext ------------------------------------------------------------------

ReentParser::TrailingTypeSpecifierContext::TrailingTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ElaboratedTypeSpecifierContext* ReentParser::TrailingTypeSpecifierContext::elaboratedTypeSpecifier() {
  return getRuleContext<ReentParser::ElaboratedTypeSpecifierContext>(0);
}

ReentParser::TypeNameSpecifierContext* ReentParser::TrailingTypeSpecifierContext::typeNameSpecifier() {
  return getRuleContext<ReentParser::TypeNameSpecifierContext>(0);
}

ReentParser::CvQualifierContext* ReentParser::TrailingTypeSpecifierContext::cvQualifier() {
  return getRuleContext<ReentParser::CvQualifierContext>(0);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::TrailingTypeSpecifierContext::simpleTypeSpecifier() {
  return getRuleContext<ReentParser::SimpleTypeSpecifierContext>(0);
}


size_t ReentParser::TrailingTypeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleTrailingTypeSpecifier;
}

void ReentParser::TrailingTypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrailingTypeSpecifier(this);
}

void ReentParser::TrailingTypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrailingTypeSpecifier(this);
}

ReentParser::TrailingTypeSpecifierContext* ReentParser::trailingTypeSpecifier() {
  TrailingTypeSpecifierContext *_localctx = _tracker.createInstance<TrailingTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 266, ReentParser::RuleTrailingTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1697);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Class:
      case ReentParser::Enum:
      case ReentParser::Struct: {
        enterOuterAlt(_localctx, 1);
        setState(1693);
        elaboratedTypeSpecifier();
        break;
      }

      case ReentParser::Typename_: {
        enterOuterAlt(_localctx, 2);
        setState(1694);
        typeNameSpecifier();
        break;
      }

      case ReentParser::Const:
      case ReentParser::Volatile: {
        enterOuterAlt(_localctx, 3);
        setState(1695);
        cvQualifier();
        break;
      }

      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::Double:
      case ReentParser::End:
      case ReentParser::Float:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Unsigned:
      case ReentParser::Vectorized:
      case ReentParser::Void:
      case ReentParser::Wchar:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 4);
        setState(1696);
        simpleTypeSpecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeSpecifierSeqContext ------------------------------------------------------------------

ReentParser::TypeSpecifierSeqContext::TypeSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::TypeSpecifierContext *> ReentParser::TypeSpecifierSeqContext::typeSpecifier() {
  return getRuleContexts<ReentParser::TypeSpecifierContext>();
}

ReentParser::TypeSpecifierContext* ReentParser::TypeSpecifierSeqContext::typeSpecifier(size_t i) {
  return getRuleContext<ReentParser::TypeSpecifierContext>(i);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::TypeSpecifierSeqContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::TypeSpecifierSeqContext::getRuleIndex() const {
  return ReentParser::RuleTypeSpecifierSeq;
}

void ReentParser::TypeSpecifierSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeSpecifierSeq(this);
}

void ReentParser::TypeSpecifierSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeSpecifierSeq(this);
}

ReentParser::TypeSpecifierSeqContext* ReentParser::typeSpecifierSeq() {
  TypeSpecifierSeqContext *_localctx = _tracker.createInstance<TypeSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 268, ReentParser::RuleTypeSpecifierSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1700); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1699);
              typeSpecifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1702); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 137, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1705);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
    case 1: {
      setState(1704);
      attributeSpecifierSeq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingTypeSpecifierSeqContext ------------------------------------------------------------------

ReentParser::TrailingTypeSpecifierSeqContext::TrailingTypeSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::TrailingTypeSpecifierContext *> ReentParser::TrailingTypeSpecifierSeqContext::trailingTypeSpecifier() {
  return getRuleContexts<ReentParser::TrailingTypeSpecifierContext>();
}

ReentParser::TrailingTypeSpecifierContext* ReentParser::TrailingTypeSpecifierSeqContext::trailingTypeSpecifier(size_t i) {
  return getRuleContext<ReentParser::TrailingTypeSpecifierContext>(i);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::TrailingTypeSpecifierSeqContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::TrailingTypeSpecifierSeqContext::getRuleIndex() const {
  return ReentParser::RuleTrailingTypeSpecifierSeq;
}

void ReentParser::TrailingTypeSpecifierSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrailingTypeSpecifierSeq(this);
}

void ReentParser::TrailingTypeSpecifierSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrailingTypeSpecifierSeq(this);
}

ReentParser::TrailingTypeSpecifierSeqContext* ReentParser::trailingTypeSpecifierSeq() {
  TrailingTypeSpecifierSeqContext *_localctx = _tracker.createInstance<TrailingTypeSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 270, ReentParser::RuleTrailingTypeSpecifierSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1708); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1707);
              trailingTypeSpecifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1710); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
    setState(1713);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      setState(1712);
      attributeSpecifierSeq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeLengthModifierContext ------------------------------------------------------------------

ReentParser::SimpleTypeLengthModifierContext::SimpleTypeLengthModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::SimpleTypeLengthModifierContext::Short() {
  return getToken(ReentParser::Short, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeLengthModifierContext::Long() {
  return getToken(ReentParser::Long, 0);
}


size_t ReentParser::SimpleTypeLengthModifierContext::getRuleIndex() const {
  return ReentParser::RuleSimpleTypeLengthModifier;
}

void ReentParser::SimpleTypeLengthModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTypeLengthModifier(this);
}

void ReentParser::SimpleTypeLengthModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTypeLengthModifier(this);
}

ReentParser::SimpleTypeLengthModifierContext* ReentParser::simpleTypeLengthModifier() {
  SimpleTypeLengthModifierContext *_localctx = _tracker.createInstance<SimpleTypeLengthModifierContext>(_ctx, getState());
  enterRule(_localctx, 272, ReentParser::RuleSimpleTypeLengthModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1715);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Long

    || _la == ReentParser::Short)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeSignednessModifierContext ------------------------------------------------------------------

ReentParser::SimpleTypeSignednessModifierContext::SimpleTypeSignednessModifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::SimpleTypeSignednessModifierContext::Unsigned() {
  return getToken(ReentParser::Unsigned, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSignednessModifierContext::Signed() {
  return getToken(ReentParser::Signed, 0);
}


size_t ReentParser::SimpleTypeSignednessModifierContext::getRuleIndex() const {
  return ReentParser::RuleSimpleTypeSignednessModifier;
}

void ReentParser::SimpleTypeSignednessModifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTypeSignednessModifier(this);
}

void ReentParser::SimpleTypeSignednessModifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTypeSignednessModifier(this);
}

ReentParser::SimpleTypeSignednessModifierContext* ReentParser::simpleTypeSignednessModifier() {
  SimpleTypeSignednessModifierContext *_localctx = _tracker.createInstance<SimpleTypeSignednessModifierContext>(_ctx, getState());
  enterRule(_localctx, 274, ReentParser::RuleSimpleTypeSignednessModifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1717);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Signed

    || _la == ReentParser::Unsigned)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTypeSpecifierContext ------------------------------------------------------------------

ReentParser::SimpleTypeSpecifierContext::SimpleTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TheTypeNameContext* ReentParser::SimpleTypeSpecifierContext::theTypeName() {
  return getRuleContext<ReentParser::TheTypeNameContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::SimpleTypeSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Template() {
  return getToken(ReentParser::Template, 0);
}

ReentParser::SimpleTemplateIdContext* ReentParser::SimpleTypeSpecifierContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

ReentParser::SimpleTypeSignednessModifierContext* ReentParser::SimpleTypeSpecifierContext::simpleTypeSignednessModifier() {
  return getRuleContext<ReentParser::SimpleTypeSignednessModifierContext>(0);
}

std::vector<ReentParser::SimpleTypeLengthModifierContext *> ReentParser::SimpleTypeSpecifierContext::simpleTypeLengthModifier() {
  return getRuleContexts<ReentParser::SimpleTypeLengthModifierContext>();
}

ReentParser::SimpleTypeLengthModifierContext* ReentParser::SimpleTypeSpecifierContext::simpleTypeLengthModifier(size_t i) {
  return getRuleContext<ReentParser::SimpleTypeLengthModifierContext>(i);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Char() {
  return getToken(ReentParser::Char, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Char16() {
  return getToken(ReentParser::Char16, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Char32() {
  return getToken(ReentParser::Char32, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Wchar() {
  return getToken(ReentParser::Wchar, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Bool() {
  return getToken(ReentParser::Bool, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Int() {
  return getToken(ReentParser::Int, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Float() {
  return getToken(ReentParser::Float, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Double() {
  return getToken(ReentParser::Double, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Void() {
  return getToken(ReentParser::Void, 0);
}

tree::TerminalNode* ReentParser::SimpleTypeSpecifierContext::Auto() {
  return getToken(ReentParser::Auto, 0);
}

ReentParser::DecltypeSpecifierContext* ReentParser::SimpleTypeSpecifierContext::decltypeSpecifier() {
  return getRuleContext<ReentParser::DecltypeSpecifierContext>(0);
}


size_t ReentParser::SimpleTypeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleSimpleTypeSpecifier;
}

void ReentParser::SimpleTypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTypeSpecifier(this);
}

void ReentParser::SimpleTypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTypeSpecifier(this);
}

ReentParser::SimpleTypeSpecifierContext* ReentParser::simpleTypeSpecifier() {
  SimpleTypeSpecifierContext *_localctx = _tracker.createInstance<SimpleTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 276, ReentParser::RuleSimpleTypeSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1771);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 151, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1720);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
      case 1: {
        setState(1719);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(1722);
      theTypeName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1723);
      nestedNameSpecifier(0);
      setState(1724);
      match(ReentParser::Template);
      setState(1725);
      simpleTemplateId();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1727);
      simpleTypeSignednessModifier();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1729);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Signed

      || _la == ReentParser::Unsigned) {
        setState(1728);
        simpleTypeSignednessModifier();
      }
      setState(1732); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(1731);
                simpleTypeLengthModifier();
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(1734); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 143, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1737);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Signed

      || _la == ReentParser::Unsigned) {
        setState(1736);
        simpleTypeSignednessModifier();
      }
      setState(1739);
      match(ReentParser::Char);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1741);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Signed

      || _la == ReentParser::Unsigned) {
        setState(1740);
        simpleTypeSignednessModifier();
      }
      setState(1743);
      match(ReentParser::Char16);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1745);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Signed

      || _la == ReentParser::Unsigned) {
        setState(1744);
        simpleTypeSignednessModifier();
      }
      setState(1747);
      match(ReentParser::Char32);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1749);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Signed

      || _la == ReentParser::Unsigned) {
        setState(1748);
        simpleTypeSignednessModifier();
      }
      setState(1751);
      match(ReentParser::Wchar);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(1752);
      match(ReentParser::Bool);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(1754);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Signed

      || _la == ReentParser::Unsigned) {
        setState(1753);
        simpleTypeSignednessModifier();
      }
      setState(1759);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == ReentParser::Long

      || _la == ReentParser::Short) {
        setState(1756);
        simpleTypeLengthModifier();
        setState(1761);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1762);
      match(ReentParser::Int);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(1763);
      match(ReentParser::Float);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(1765);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Long

      || _la == ReentParser::Short) {
        setState(1764);
        simpleTypeLengthModifier();
      }
      setState(1767);
      match(ReentParser::Double);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(1768);
      match(ReentParser::Void);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(1769);
      match(ReentParser::Auto);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(1770);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheTypeNameContext ------------------------------------------------------------------

ReentParser::TheTypeNameContext::TheTypeNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassNameContext* ReentParser::TheTypeNameContext::className() {
  return getRuleContext<ReentParser::ClassNameContext>(0);
}

ReentParser::EnumNameContext* ReentParser::TheTypeNameContext::enumName() {
  return getRuleContext<ReentParser::EnumNameContext>(0);
}

ReentParser::TypedefNameContext* ReentParser::TheTypeNameContext::typedefName() {
  return getRuleContext<ReentParser::TypedefNameContext>(0);
}


size_t ReentParser::TheTypeNameContext::getRuleIndex() const {
  return ReentParser::RuleTheTypeName;
}

void ReentParser::TheTypeNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTheTypeName(this);
}

void ReentParser::TheTypeNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTheTypeName(this);
}

ReentParser::TheTypeNameContext* ReentParser::theTypeName() {
  TheTypeNameContext *_localctx = _tracker.createInstance<TheTypeNameContext>(_ctx, getState());
  enterRule(_localctx, 278, ReentParser::RuleTheTypeName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1776);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1773);
      className();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1774);
      enumName();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1775);
      typedefName();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DecltypeSpecifierContext ------------------------------------------------------------------

ReentParser::DecltypeSpecifierContext::DecltypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::DecltypeSpecifierContext::Decltype() {
  return getToken(ReentParser::Decltype, 0);
}

tree::TerminalNode* ReentParser::DecltypeSpecifierContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::DecltypeSpecifierContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::ExpressionContext* ReentParser::DecltypeSpecifierContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::DecltypeSpecifierContext::Auto() {
  return getToken(ReentParser::Auto, 0);
}


size_t ReentParser::DecltypeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleDecltypeSpecifier;
}

void ReentParser::DecltypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDecltypeSpecifier(this);
}

void ReentParser::DecltypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDecltypeSpecifier(this);
}

ReentParser::DecltypeSpecifierContext* ReentParser::decltypeSpecifier() {
  DecltypeSpecifierContext *_localctx = _tracker.createInstance<DecltypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 280, ReentParser::RuleDecltypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1778);
    match(ReentParser::Decltype);
    setState(1779);
    match(ReentParser::LeftParen);
    setState(1782);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 153, _ctx)) {
    case 1: {
      setState(1780);
      expression();
      break;
    }

    case 2: {
      setState(1781);
      match(ReentParser::Auto);
      break;
    }

    default:
      break;
    }
    setState(1784);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElaboratedTypeSpecifierContext ------------------------------------------------------------------

ReentParser::ElaboratedTypeSpecifierContext::ElaboratedTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassKeyContext* ReentParser::ElaboratedTypeSpecifierContext::classKey() {
  return getRuleContext<ReentParser::ClassKeyContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::ElaboratedTypeSpecifierContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::SimpleTemplateIdContext* ReentParser::ElaboratedTypeSpecifierContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::ElaboratedTypeSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ElaboratedTypeSpecifierContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

tree::TerminalNode* ReentParser::ElaboratedTypeSpecifierContext::Template() {
  return getToken(ReentParser::Template, 0);
}

tree::TerminalNode* ReentParser::ElaboratedTypeSpecifierContext::Enum() {
  return getToken(ReentParser::Enum, 0);
}


size_t ReentParser::ElaboratedTypeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleElaboratedTypeSpecifier;
}

void ReentParser::ElaboratedTypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElaboratedTypeSpecifier(this);
}

void ReentParser::ElaboratedTypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElaboratedTypeSpecifier(this);
}

ReentParser::ElaboratedTypeSpecifierContext* ReentParser::elaboratedTypeSpecifier() {
  ElaboratedTypeSpecifierContext *_localctx = _tracker.createInstance<ElaboratedTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 282, ReentParser::RuleElaboratedTypeSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1808);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Class:
      case ReentParser::Struct: {
        enterOuterAlt(_localctx, 1);
        setState(1786);
        classKey();
        setState(1801);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 157, _ctx)) {
        case 1: {
          setState(1788);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
            setState(1787);
            attributeSpecifierSeq();
          }
          setState(1791);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
          case 1: {
            setState(1790);
            nestedNameSpecifier(0);
            break;
          }

          default:
            break;
          }
          setState(1793);
          anyIdentifier();
          break;
        }

        case 2: {
          setState(1794);
          simpleTemplateId();
          break;
        }

        case 3: {
          setState(1795);
          nestedNameSpecifier(0);
          setState(1797);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ReentParser::Template) {
            setState(1796);
            match(ReentParser::Template);
          }
          setState(1799);
          simpleTemplateId();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::Enum: {
        enterOuterAlt(_localctx, 2);
        setState(1803);
        match(ReentParser::Enum);
        setState(1805);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 158, _ctx)) {
        case 1: {
          setState(1804);
          nestedNameSpecifier(0);
          break;
        }

        default:
          break;
        }
        setState(1807);
        anyIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumNameContext ------------------------------------------------------------------

ReentParser::EnumNameContext::EnumNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::EnumNameContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::EnumNameContext::getRuleIndex() const {
  return ReentParser::RuleEnumName;
}

void ReentParser::EnumNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumName(this);
}

void ReentParser::EnumNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumName(this);
}

ReentParser::EnumNameContext* ReentParser::enumName() {
  EnumNameContext *_localctx = _tracker.createInstance<EnumNameContext>(_ctx, getState());
  enterRule(_localctx, 284, ReentParser::RuleEnumName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1810);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumSpecifierContext ------------------------------------------------------------------

ReentParser::EnumSpecifierContext::EnumSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::EnumHeadContext* ReentParser::EnumSpecifierContext::enumHead() {
  return getRuleContext<ReentParser::EnumHeadContext>(0);
}

tree::TerminalNode* ReentParser::EnumSpecifierContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::EnumSpecifierContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

ReentParser::EnumeratorListContext* ReentParser::EnumSpecifierContext::enumeratorList() {
  return getRuleContext<ReentParser::EnumeratorListContext>(0);
}

tree::TerminalNode* ReentParser::EnumSpecifierContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}


size_t ReentParser::EnumSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleEnumSpecifier;
}

void ReentParser::EnumSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumSpecifier(this);
}

void ReentParser::EnumSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumSpecifier(this);
}

ReentParser::EnumSpecifierContext* ReentParser::enumSpecifier() {
  EnumSpecifierContext *_localctx = _tracker.createInstance<EnumSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 286, ReentParser::RuleEnumSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1812);
    enumHead();
    setState(1813);
    match(ReentParser::LeftBrace);
    setState(1818);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

    || _la == ReentParser::Identifier) {
      setState(1814);
      enumeratorList();
      setState(1816);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Comma) {
        setState(1815);
        match(ReentParser::Comma);
      }
    }
    setState(1820);
    match(ReentParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumHeadContext ------------------------------------------------------------------

ReentParser::EnumHeadContext::EnumHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::EnumkeyContext* ReentParser::EnumHeadContext::enumkey() {
  return getRuleContext<ReentParser::EnumkeyContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::EnumHeadContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::EnumHeadContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::EnumbaseContext* ReentParser::EnumHeadContext::enumbase() {
  return getRuleContext<ReentParser::EnumbaseContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::EnumHeadContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}


size_t ReentParser::EnumHeadContext::getRuleIndex() const {
  return ReentParser::RuleEnumHead;
}

void ReentParser::EnumHeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumHead(this);
}

void ReentParser::EnumHeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumHead(this);
}

ReentParser::EnumHeadContext* ReentParser::enumHead() {
  EnumHeadContext *_localctx = _tracker.createInstance<EnumHeadContext>(_ctx, getState());
  enterRule(_localctx, 288, ReentParser::RuleEnumHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1822);
    enumkey();
    setState(1824);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(1823);
      attributeSpecifierSeq();
    }
    setState(1830);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
      | (1ULL << (ReentParser::Doublecolon - 140))
      | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
      setState(1827);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 163, _ctx)) {
      case 1: {
        setState(1826);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(1829);
      anyIdentifier();
    }
    setState(1833);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Colon) {
      setState(1832);
      enumbase();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OpaqueEnumDeclarationContext ------------------------------------------------------------------

ReentParser::OpaqueEnumDeclarationContext::OpaqueEnumDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::EnumkeyContext* ReentParser::OpaqueEnumDeclarationContext::enumkey() {
  return getRuleContext<ReentParser::EnumkeyContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::OpaqueEnumDeclarationContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::OpaqueEnumDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::OpaqueEnumDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::EnumbaseContext* ReentParser::OpaqueEnumDeclarationContext::enumbase() {
  return getRuleContext<ReentParser::EnumbaseContext>(0);
}


size_t ReentParser::OpaqueEnumDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleOpaqueEnumDeclaration;
}

void ReentParser::OpaqueEnumDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOpaqueEnumDeclaration(this);
}

void ReentParser::OpaqueEnumDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOpaqueEnumDeclaration(this);
}

ReentParser::OpaqueEnumDeclarationContext* ReentParser::opaqueEnumDeclaration() {
  OpaqueEnumDeclarationContext *_localctx = _tracker.createInstance<OpaqueEnumDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 290, ReentParser::RuleOpaqueEnumDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1835);
    enumkey();
    setState(1837);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(1836);
      attributeSpecifierSeq();
    }
    setState(1839);
    anyIdentifier();
    setState(1841);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Colon) {
      setState(1840);
      enumbase();
    }
    setState(1843);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumkeyContext ------------------------------------------------------------------

ReentParser::EnumkeyContext::EnumkeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::EnumkeyContext::Enum() {
  return getToken(ReentParser::Enum, 0);
}

tree::TerminalNode* ReentParser::EnumkeyContext::Class() {
  return getToken(ReentParser::Class, 0);
}

tree::TerminalNode* ReentParser::EnumkeyContext::Struct() {
  return getToken(ReentParser::Struct, 0);
}


size_t ReentParser::EnumkeyContext::getRuleIndex() const {
  return ReentParser::RuleEnumkey;
}

void ReentParser::EnumkeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumkey(this);
}

void ReentParser::EnumkeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumkey(this);
}

ReentParser::EnumkeyContext* ReentParser::enumkey() {
  EnumkeyContext *_localctx = _tracker.createInstance<EnumkeyContext>(_ctx, getState());
  enterRule(_localctx, 292, ReentParser::RuleEnumkey);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1845);
    match(ReentParser::Enum);
    setState(1847);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Class || _la == ReentParser::Struct) {
      setState(1846);
      _la = _input->LA(1);
      if (!(_la == ReentParser::Class || _la == ReentParser::Struct)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumbaseContext ------------------------------------------------------------------

ReentParser::EnumbaseContext::EnumbaseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::EnumbaseContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::TypeSpecifierSeqContext* ReentParser::EnumbaseContext::typeSpecifierSeq() {
  return getRuleContext<ReentParser::TypeSpecifierSeqContext>(0);
}


size_t ReentParser::EnumbaseContext::getRuleIndex() const {
  return ReentParser::RuleEnumbase;
}

void ReentParser::EnumbaseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumbase(this);
}

void ReentParser::EnumbaseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumbase(this);
}

ReentParser::EnumbaseContext* ReentParser::enumbase() {
  EnumbaseContext *_localctx = _tracker.createInstance<EnumbaseContext>(_ctx, getState());
  enterRule(_localctx, 294, ReentParser::RuleEnumbase);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1849);
    match(ReentParser::Colon);
    setState(1850);
    typeSpecifierSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorListContext ------------------------------------------------------------------

ReentParser::EnumeratorListContext::EnumeratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::EnumeratorDefinitionContext *> ReentParser::EnumeratorListContext::enumeratorDefinition() {
  return getRuleContexts<ReentParser::EnumeratorDefinitionContext>();
}

ReentParser::EnumeratorDefinitionContext* ReentParser::EnumeratorListContext::enumeratorDefinition(size_t i) {
  return getRuleContext<ReentParser::EnumeratorDefinitionContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::EnumeratorListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::EnumeratorListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::EnumeratorListContext::getRuleIndex() const {
  return ReentParser::RuleEnumeratorList;
}

void ReentParser::EnumeratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeratorList(this);
}

void ReentParser::EnumeratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeratorList(this);
}

ReentParser::EnumeratorListContext* ReentParser::enumeratorList() {
  EnumeratorListContext *_localctx = _tracker.createInstance<EnumeratorListContext>(_ctx, getState());
  enterRule(_localctx, 296, ReentParser::RuleEnumeratorList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1852);
    enumeratorDefinition();
    setState(1857);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1853);
        match(ReentParser::Comma);
        setState(1854);
        enumeratorDefinition(); 
      }
      setState(1859);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorDefinitionContext ------------------------------------------------------------------

ReentParser::EnumeratorDefinitionContext::EnumeratorDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::EnumeratorContext* ReentParser::EnumeratorDefinitionContext::enumerator() {
  return getRuleContext<ReentParser::EnumeratorContext>(0);
}

tree::TerminalNode* ReentParser::EnumeratorDefinitionContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::EnumeratorDefinitionContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}


size_t ReentParser::EnumeratorDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleEnumeratorDefinition;
}

void ReentParser::EnumeratorDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumeratorDefinition(this);
}

void ReentParser::EnumeratorDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumeratorDefinition(this);
}

ReentParser::EnumeratorDefinitionContext* ReentParser::enumeratorDefinition() {
  EnumeratorDefinitionContext *_localctx = _tracker.createInstance<EnumeratorDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 298, ReentParser::RuleEnumeratorDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1860);
    enumerator();
    setState(1863);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Assign) {
      setState(1861);
      match(ReentParser::Assign);
      setState(1862);
      constantExpression();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- EnumeratorContext ------------------------------------------------------------------

ReentParser::EnumeratorContext::EnumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::EnumeratorContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::EnumeratorContext::getRuleIndex() const {
  return ReentParser::RuleEnumerator;
}

void ReentParser::EnumeratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterEnumerator(this);
}

void ReentParser::EnumeratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitEnumerator(this);
}

ReentParser::EnumeratorContext* ReentParser::enumerator() {
  EnumeratorContext *_localctx = _tracker.createInstance<EnumeratorContext>(_ctx, getState());
  enterRule(_localctx, 300, ReentParser::RuleEnumerator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1865);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceNameContext ------------------------------------------------------------------

ReentParser::NamespaceNameContext::NamespaceNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::OriginalNamespaceNameContext* ReentParser::NamespaceNameContext::originalNamespaceName() {
  return getRuleContext<ReentParser::OriginalNamespaceNameContext>(0);
}

ReentParser::NamespaceAliasContext* ReentParser::NamespaceNameContext::namespaceAlias() {
  return getRuleContext<ReentParser::NamespaceAliasContext>(0);
}


size_t ReentParser::NamespaceNameContext::getRuleIndex() const {
  return ReentParser::RuleNamespaceName;
}

void ReentParser::NamespaceNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceName(this);
}

void ReentParser::NamespaceNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceName(this);
}

ReentParser::NamespaceNameContext* ReentParser::namespaceName() {
  NamespaceNameContext *_localctx = _tracker.createInstance<NamespaceNameContext>(_ctx, getState());
  enterRule(_localctx, 302, ReentParser::RuleNamespaceName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1869);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1867);
      originalNamespaceName();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1868);
      namespaceAlias();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OriginalNamespaceNameContext ------------------------------------------------------------------

ReentParser::OriginalNamespaceNameContext::OriginalNamespaceNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::OriginalNamespaceNameContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::OriginalNamespaceNameContext::getRuleIndex() const {
  return ReentParser::RuleOriginalNamespaceName;
}

void ReentParser::OriginalNamespaceNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOriginalNamespaceName(this);
}

void ReentParser::OriginalNamespaceNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOriginalNamespaceName(this);
}

ReentParser::OriginalNamespaceNameContext* ReentParser::originalNamespaceName() {
  OriginalNamespaceNameContext *_localctx = _tracker.createInstance<OriginalNamespaceNameContext>(_ctx, getState());
  enterRule(_localctx, 304, ReentParser::RuleOriginalNamespaceName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1871);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceDefinitionContext ------------------------------------------------------------------

ReentParser::NamespaceDefinitionContext::NamespaceDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NamespaceDefinitionContext::Namespace() {
  return getToken(ReentParser::Namespace, 0);
}

tree::TerminalNode* ReentParser::NamespaceDefinitionContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::NamespaceDefinitionContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

tree::TerminalNode* ReentParser::NamespaceDefinitionContext::Inline() {
  return getToken(ReentParser::Inline, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::NamespaceDefinitionContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::OriginalNamespaceNameContext* ReentParser::NamespaceDefinitionContext::originalNamespaceName() {
  return getRuleContext<ReentParser::OriginalNamespaceNameContext>(0);
}

ReentParser::DeclarationseqContext* ReentParser::NamespaceDefinitionContext::declarationseq() {
  return getRuleContext<ReentParser::DeclarationseqContext>(0);
}


size_t ReentParser::NamespaceDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleNamespaceDefinition;
}

void ReentParser::NamespaceDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceDefinition(this);
}

void ReentParser::NamespaceDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceDefinition(this);
}

ReentParser::NamespaceDefinitionContext* ReentParser::namespaceDefinition() {
  NamespaceDefinitionContext *_localctx = _tracker.createInstance<NamespaceDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 306, ReentParser::RuleNamespaceDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1874);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Inline) {
      setState(1873);
      match(ReentParser::Inline);
    }
    setState(1876);
    match(ReentParser::Namespace);
    setState(1879);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx)) {
    case 1: {
      setState(1877);
      anyIdentifier();
      break;
    }

    case 2: {
      setState(1878);
      originalNamespaceName();
      break;
    }

    default:
      break;
    }
    setState(1881);
    match(ReentParser::LeftBrace);
    setState(1883);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::PlanPragma)
      | (1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Asm)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Chain)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Namespace - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Reenterable - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Static_assert - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Template - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Using - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Semi - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(1882);
      dynamic_cast<NamespaceDefinitionContext *>(_localctx)->namespaceBody = declarationseq();
    }
    setState(1885);
    match(ReentParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceAliasContext ------------------------------------------------------------------

ReentParser::NamespaceAliasContext::NamespaceAliasContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::NamespaceAliasContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::NamespaceAliasContext::getRuleIndex() const {
  return ReentParser::RuleNamespaceAlias;
}

void ReentParser::NamespaceAliasContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceAlias(this);
}

void ReentParser::NamespaceAliasContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceAlias(this);
}

ReentParser::NamespaceAliasContext* ReentParser::namespaceAlias() {
  NamespaceAliasContext *_localctx = _tracker.createInstance<NamespaceAliasContext>(_ctx, getState());
  enterRule(_localctx, 308, ReentParser::RuleNamespaceAlias);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1887);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NamespaceAliasDefinitionContext ------------------------------------------------------------------

ReentParser::NamespaceAliasDefinitionContext::NamespaceAliasDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NamespaceAliasDefinitionContext::Namespace() {
  return getToken(ReentParser::Namespace, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::NamespaceAliasDefinitionContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::NamespaceAliasDefinitionContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::QualifiednamespacespecifierContext* ReentParser::NamespaceAliasDefinitionContext::qualifiednamespacespecifier() {
  return getRuleContext<ReentParser::QualifiednamespacespecifierContext>(0);
}

tree::TerminalNode* ReentParser::NamespaceAliasDefinitionContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::NamespaceAliasDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleNamespaceAliasDefinition;
}

void ReentParser::NamespaceAliasDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNamespaceAliasDefinition(this);
}

void ReentParser::NamespaceAliasDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNamespaceAliasDefinition(this);
}

ReentParser::NamespaceAliasDefinitionContext* ReentParser::namespaceAliasDefinition() {
  NamespaceAliasDefinitionContext *_localctx = _tracker.createInstance<NamespaceAliasDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 310, ReentParser::RuleNamespaceAliasDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1889);
    match(ReentParser::Namespace);
    setState(1890);
    anyIdentifier();
    setState(1891);
    match(ReentParser::Assign);
    setState(1892);
    qualifiednamespacespecifier();
    setState(1893);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- QualifiednamespacespecifierContext ------------------------------------------------------------------

ReentParser::QualifiednamespacespecifierContext::QualifiednamespacespecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::NamespaceNameContext* ReentParser::QualifiednamespacespecifierContext::namespaceName() {
  return getRuleContext<ReentParser::NamespaceNameContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::QualifiednamespacespecifierContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}


size_t ReentParser::QualifiednamespacespecifierContext::getRuleIndex() const {
  return ReentParser::RuleQualifiednamespacespecifier;
}

void ReentParser::QualifiednamespacespecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterQualifiednamespacespecifier(this);
}

void ReentParser::QualifiednamespacespecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitQualifiednamespacespecifier(this);
}

ReentParser::QualifiednamespacespecifierContext* ReentParser::qualifiednamespacespecifier() {
  QualifiednamespacespecifierContext *_localctx = _tracker.createInstance<QualifiednamespacespecifierContext>(_ctx, getState());
  enterRule(_localctx, 312, ReentParser::RuleQualifiednamespacespecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1896);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 175, _ctx)) {
    case 1: {
      setState(1895);
      nestedNameSpecifier(0);
      break;
    }

    default:
      break;
    }
    setState(1898);
    namespaceName();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsingDeclarationContext ------------------------------------------------------------------

ReentParser::UsingDeclarationContext::UsingDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::UsingDeclarationContext::Using() {
  return getToken(ReentParser::Using, 0);
}

ReentParser::UnqualifiedIdContext* ReentParser::UsingDeclarationContext::unqualifiedId() {
  return getRuleContext<ReentParser::UnqualifiedIdContext>(0);
}

tree::TerminalNode* ReentParser::UsingDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::UsingDeclarationContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::UsingDeclarationContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::UsingDeclarationContext::Typename_() {
  return getToken(ReentParser::Typename_, 0);
}


size_t ReentParser::UsingDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleUsingDeclaration;
}

void ReentParser::UsingDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingDeclaration(this);
}

void ReentParser::UsingDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingDeclaration(this);
}

ReentParser::UsingDeclarationContext* ReentParser::usingDeclaration() {
  UsingDeclarationContext *_localctx = _tracker.createInstance<UsingDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 314, ReentParser::RuleUsingDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1900);
    match(ReentParser::Using);
    setState(1906);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      setState(1902);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Typename_) {
        setState(1901);
        match(ReentParser::Typename_);
      }
      setState(1904);
      nestedNameSpecifier(0);
      break;
    }

    case 2: {
      setState(1905);
      match(ReentParser::Doublecolon);
      break;
    }

    default:
      break;
    }
    setState(1908);
    unqualifiedId();
    setState(1909);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- UsingDirectiveContext ------------------------------------------------------------------

ReentParser::UsingDirectiveContext::UsingDirectiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::UsingDirectiveContext::Using() {
  return getToken(ReentParser::Using, 0);
}

tree::TerminalNode* ReentParser::UsingDirectiveContext::Namespace() {
  return getToken(ReentParser::Namespace, 0);
}

ReentParser::NamespaceNameContext* ReentParser::UsingDirectiveContext::namespaceName() {
  return getRuleContext<ReentParser::NamespaceNameContext>(0);
}

tree::TerminalNode* ReentParser::UsingDirectiveContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::UsingDirectiveContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::UsingDirectiveContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}


size_t ReentParser::UsingDirectiveContext::getRuleIndex() const {
  return ReentParser::RuleUsingDirective;
}

void ReentParser::UsingDirectiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterUsingDirective(this);
}

void ReentParser::UsingDirectiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitUsingDirective(this);
}

ReentParser::UsingDirectiveContext* ReentParser::usingDirective() {
  UsingDirectiveContext *_localctx = _tracker.createInstance<UsingDirectiveContext>(_ctx, getState());
  enterRule(_localctx, 316, ReentParser::RuleUsingDirective);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1912);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(1911);
      attributeSpecifierSeq();
    }
    setState(1914);
    match(ReentParser::Using);
    setState(1915);
    match(ReentParser::Namespace);
    setState(1917);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
    case 1: {
      setState(1916);
      nestedNameSpecifier(0);
      break;
    }

    default:
      break;
    }
    setState(1919);
    namespaceName();
    setState(1920);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AsmDefinitionContext ------------------------------------------------------------------

ReentParser::AsmDefinitionContext::AsmDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AsmDefinitionContext::Asm() {
  return getToken(ReentParser::Asm, 0);
}

tree::TerminalNode* ReentParser::AsmDefinitionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::AsmDefinitionContext::StringLiteral() {
  return getToken(ReentParser::StringLiteral, 0);
}

tree::TerminalNode* ReentParser::AsmDefinitionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::AsmDefinitionContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::AsmDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleAsmDefinition;
}

void ReentParser::AsmDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAsmDefinition(this);
}

void ReentParser::AsmDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAsmDefinition(this);
}

ReentParser::AsmDefinitionContext* ReentParser::asmDefinition() {
  AsmDefinitionContext *_localctx = _tracker.createInstance<AsmDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 318, ReentParser::RuleAsmDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1922);
    match(ReentParser::Asm);
    setState(1923);
    match(ReentParser::LeftParen);
    setState(1924);
    match(ReentParser::StringLiteral);
    setState(1925);
    match(ReentParser::RightParen);
    setState(1926);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LinkageSpecificationContext ------------------------------------------------------------------

ReentParser::LinkageSpecificationContext::LinkageSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::LinkageSpecificationContext::Extern() {
  return getToken(ReentParser::Extern, 0);
}

tree::TerminalNode* ReentParser::LinkageSpecificationContext::StringLiteral() {
  return getToken(ReentParser::StringLiteral, 0);
}

tree::TerminalNode* ReentParser::LinkageSpecificationContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::LinkageSpecificationContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

ReentParser::DeclarationContext* ReentParser::LinkageSpecificationContext::declaration() {
  return getRuleContext<ReentParser::DeclarationContext>(0);
}

ReentParser::DeclarationseqContext* ReentParser::LinkageSpecificationContext::declarationseq() {
  return getRuleContext<ReentParser::DeclarationseqContext>(0);
}


size_t ReentParser::LinkageSpecificationContext::getRuleIndex() const {
  return ReentParser::RuleLinkageSpecification;
}

void ReentParser::LinkageSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLinkageSpecification(this);
}

void ReentParser::LinkageSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLinkageSpecification(this);
}

ReentParser::LinkageSpecificationContext* ReentParser::linkageSpecification() {
  LinkageSpecificationContext *_localctx = _tracker.createInstance<LinkageSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 320, ReentParser::RuleLinkageSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1928);
    match(ReentParser::Extern);
    setState(1929);
    match(ReentParser::StringLiteral);
    setState(1936);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftBrace: {
        setState(1930);
        match(ReentParser::LeftBrace);
        setState(1932);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << ReentParser::PlanPragma)
          | (1ULL << ReentParser::Alignas)
          | (1ULL << ReentParser::Asm)
          | (1ULL << ReentParser::Auto)
          | (1ULL << ReentParser::Begin)
          | (1ULL << ReentParser::Bool)
          | (1ULL << ReentParser::Cfunnel)
          | (1ULL << ReentParser::Chain)
          | (1ULL << ReentParser::Char)
          | (1ULL << ReentParser::Char16)
          | (1ULL << ReentParser::Char32)
          | (1ULL << ReentParser::Class)
          | (1ULL << ReentParser::Clustered)
          | (1ULL << ReentParser::Common)
          | (1ULL << ReentParser::Const)
          | (1ULL << ReentParser::Constexpr)
          | (1ULL << ReentParser::Csem)
          | (1ULL << ReentParser::Cvar)
          | (1ULL << ReentParser::Decltype)
          | (1ULL << ReentParser::Depends)
          | (1ULL << ReentParser::Double)
          | (1ULL << ReentParser::End)
          | (1ULL << ReentParser::Enum)
          | (1ULL << ReentParser::Explicit)
          | (1ULL << ReentParser::Extern)
          | (1ULL << ReentParser::Float)
          | (1ULL << ReentParser::Friend)
          | (1ULL << ReentParser::Funnel)
          | (1ULL << ReentParser::Global)
          | (1ULL << ReentParser::Gpu)
          | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
          | (1ULL << (ReentParser::Inline - 65))
          | (1ULL << (ReentParser::Int - 65))
          | (1ULL << (ReentParser::Local - 65))
          | (1ULL << (ReentParser::Long - 65))
          | (1ULL << (ReentParser::MarkPreCondition - 65))
          | (1ULL << (ReentParser::MarkState - 65))
          | (1ULL << (ReentParser::Markupdef - 65))
          | (1ULL << (ReentParser::Mutable - 65))
          | (1ULL << (ReentParser::Namespace - 65))
          | (1ULL << (ReentParser::Operator - 65))
          | (1ULL << (ReentParser::Out - 65))
          | (1ULL << (ReentParser::Plan - 65))
          | (1ULL << (ReentParser::Plan_item_type - 65))
          | (1ULL << (ReentParser::Plan_type - 65))
          | (1ULL << (ReentParser::Reenterable - 65))
          | (1ULL << (ReentParser::Register - 65))
          | (1ULL << (ReentParser::Reset - 65))
          | (1ULL << (ReentParser::Set - 65))
          | (1ULL << (ReentParser::Short - 65))
          | (1ULL << (ReentParser::Signed - 65))
          | (1ULL << (ReentParser::Soft_transact_array - 65))
          | (1ULL << (ReentParser::Soft_transact_in - 65))
          | (1ULL << (ReentParser::Soft_transact_out - 65))
          | (1ULL << (ReentParser::Soft_transact_var - 65))
          | (1ULL << (ReentParser::Static - 65))
          | (1ULL << (ReentParser::Static_assert - 65))
          | (1ULL << (ReentParser::Struct - 65))
          | (1ULL << (ReentParser::Template - 65))
          | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
          | (1ULL << (ReentParser::Typename_ - 134))
          | (1ULL << (ReentParser::Union - 134))
          | (1ULL << (ReentParser::Unsigned - 134))
          | (1ULL << (ReentParser::Using - 134))
          | (1ULL << (ReentParser::Vectorized - 134))
          | (1ULL << (ReentParser::Virtual - 134))
          | (1ULL << (ReentParser::Void - 134))
          | (1ULL << (ReentParser::Volatile - 134))
          | (1ULL << (ReentParser::Wchar - 134))
          | (1ULL << (ReentParser::LeftParen - 134))
          | (1ULL << (ReentParser::LeftBracket - 134))
          | (1ULL << (ReentParser::Star - 134))
          | (1ULL << (ReentParser::And - 134))
          | (1ULL << (ReentParser::Tilde - 134))
          | (1ULL << (ReentParser::AndAnd - 134))
          | (1ULL << (ReentParser::Doublecolon - 134))
          | (1ULL << (ReentParser::Semi - 134))
          | (1ULL << (ReentParser::Ellipsis - 134))
          | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
          setState(1931);
          declarationseq();
        }
        setState(1934);
        match(ReentParser::RightBrace);
        break;
      }

      case ReentParser::PlanPragma:
      case ReentParser::Alignas:
      case ReentParser::Asm:
      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Cfunnel:
      case ReentParser::Chain:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Class:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Const:
      case ReentParser::Constexpr:
      case ReentParser::Csem:
      case ReentParser::Cvar:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::Double:
      case ReentParser::End:
      case ReentParser::Enum:
      case ReentParser::Explicit:
      case ReentParser::Extern:
      case ReentParser::Float:
      case ReentParser::Friend:
      case ReentParser::Funnel:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Inline:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Markupdef:
      case ReentParser::Mutable:
      case ReentParser::Namespace:
      case ReentParser::Operator:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Plan_item_type:
      case ReentParser::Plan_type:
      case ReentParser::Reenterable:
      case ReentParser::Register:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Soft_transact_array:
      case ReentParser::Soft_transact_in:
      case ReentParser::Soft_transact_out:
      case ReentParser::Soft_transact_var:
      case ReentParser::Static:
      case ReentParser::Static_assert:
      case ReentParser::Struct:
      case ReentParser::Template:
      case ReentParser::Thread_local:
      case ReentParser::Typedef:
      case ReentParser::Typename_:
      case ReentParser::Union:
      case ReentParser::Unsigned:
      case ReentParser::Using:
      case ReentParser::Vectorized:
      case ReentParser::Virtual:
      case ReentParser::Void:
      case ReentParser::Volatile:
      case ReentParser::Wchar:
      case ReentParser::LeftParen:
      case ReentParser::LeftBracket:
      case ReentParser::Star:
      case ReentParser::And:
      case ReentParser::Tilde:
      case ReentParser::AndAnd:
      case ReentParser::Doublecolon:
      case ReentParser::Semi:
      case ReentParser::Ellipsis:
      case ReentParser::Identifier: {
        setState(1935);
        declaration();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeSpecifierSeqContext ------------------------------------------------------------------

ReentParser::AttributeSpecifierSeqContext::AttributeSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AttributeSpecifierContext *> ReentParser::AttributeSpecifierSeqContext::attributeSpecifier() {
  return getRuleContexts<ReentParser::AttributeSpecifierContext>();
}

ReentParser::AttributeSpecifierContext* ReentParser::AttributeSpecifierSeqContext::attributeSpecifier(size_t i) {
  return getRuleContext<ReentParser::AttributeSpecifierContext>(i);
}


size_t ReentParser::AttributeSpecifierSeqContext::getRuleIndex() const {
  return ReentParser::RuleAttributeSpecifierSeq;
}

void ReentParser::AttributeSpecifierSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeSpecifierSeq(this);
}

void ReentParser::AttributeSpecifierSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeSpecifierSeq(this);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::attributeSpecifierSeq() {
  AttributeSpecifierSeqContext *_localctx = _tracker.createInstance<AttributeSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 322, ReentParser::RuleAttributeSpecifierSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1939); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1938);
              attributeSpecifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1941); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 182, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeSpecifierContext ------------------------------------------------------------------

ReentParser::AttributeSpecifierContext::AttributeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ReentParser::AttributeSpecifierContext::LeftBracket() {
  return getTokens(ReentParser::LeftBracket);
}

tree::TerminalNode* ReentParser::AttributeSpecifierContext::LeftBracket(size_t i) {
  return getToken(ReentParser::LeftBracket, i);
}

std::vector<tree::TerminalNode *> ReentParser::AttributeSpecifierContext::RightBracket() {
  return getTokens(ReentParser::RightBracket);
}

tree::TerminalNode* ReentParser::AttributeSpecifierContext::RightBracket(size_t i) {
  return getToken(ReentParser::RightBracket, i);
}

ReentParser::AttributeListContext* ReentParser::AttributeSpecifierContext::attributeList() {
  return getRuleContext<ReentParser::AttributeListContext>(0);
}

ReentParser::AlignmentspecifierContext* ReentParser::AttributeSpecifierContext::alignmentspecifier() {
  return getRuleContext<ReentParser::AlignmentspecifierContext>(0);
}


size_t ReentParser::AttributeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleAttributeSpecifier;
}

void ReentParser::AttributeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeSpecifier(this);
}

void ReentParser::AttributeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeSpecifier(this);
}

ReentParser::AttributeSpecifierContext* ReentParser::attributeSpecifier() {
  AttributeSpecifierContext *_localctx = _tracker.createInstance<AttributeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 324, ReentParser::RuleAttributeSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1951);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftBracket: {
        enterOuterAlt(_localctx, 1);
        setState(1943);
        match(ReentParser::LeftBracket);
        setState(1944);
        match(ReentParser::LeftBracket);
        setState(1946);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << ReentParser::Begin)
          | (1ULL << ReentParser::Clustered)
          | (1ULL << ReentParser::Common)
          | (1ULL << ReentParser::Depends)
          | (1ULL << ReentParser::End)
          | (1ULL << ReentParser::Global)
          | (1ULL << ReentParser::Gpu)
          | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
          | (1ULL << (ReentParser::Local - 65))
          | (1ULL << (ReentParser::MarkPreCondition - 65))
          | (1ULL << (ReentParser::MarkState - 65))
          | (1ULL << (ReentParser::Out - 65))
          | (1ULL << (ReentParser::Plan - 65))
          | (1ULL << (ReentParser::Reset - 65))
          | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

        || _la == ReentParser::Identifier) {
          setState(1945);
          attributeList();
        }
        setState(1948);
        match(ReentParser::RightBracket);
        setState(1949);
        match(ReentParser::RightBracket);
        break;
      }

      case ReentParser::Alignas: {
        enterOuterAlt(_localctx, 2);
        setState(1950);
        alignmentspecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AlignmentspecifierContext ------------------------------------------------------------------

ReentParser::AlignmentspecifierContext::AlignmentspecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AlignmentspecifierContext::Alignas() {
  return getToken(ReentParser::Alignas, 0);
}

tree::TerminalNode* ReentParser::AlignmentspecifierContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::AlignmentspecifierContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::TheTypeIdContext* ReentParser::AlignmentspecifierContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

ReentParser::ConstantExpressionContext* ReentParser::AlignmentspecifierContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::AlignmentspecifierContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}


size_t ReentParser::AlignmentspecifierContext::getRuleIndex() const {
  return ReentParser::RuleAlignmentspecifier;
}

void ReentParser::AlignmentspecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAlignmentspecifier(this);
}

void ReentParser::AlignmentspecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAlignmentspecifier(this);
}

ReentParser::AlignmentspecifierContext* ReentParser::alignmentspecifier() {
  AlignmentspecifierContext *_localctx = _tracker.createInstance<AlignmentspecifierContext>(_ctx, getState());
  enterRule(_localctx, 326, ReentParser::RuleAlignmentspecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1953);
    match(ReentParser::Alignas);
    setState(1954);
    match(ReentParser::LeftParen);
    setState(1957);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      setState(1955);
      theTypeId();
      break;
    }

    case 2: {
      setState(1956);
      constantExpression();
      break;
    }

    default:
      break;
    }
    setState(1960);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(1959);
      match(ReentParser::Ellipsis);
    }
    setState(1962);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeListContext ------------------------------------------------------------------

ReentParser::AttributeListContext::AttributeListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AttributeContext *> ReentParser::AttributeListContext::attribute() {
  return getRuleContexts<ReentParser::AttributeContext>();
}

ReentParser::AttributeContext* ReentParser::AttributeListContext::attribute(size_t i) {
  return getRuleContext<ReentParser::AttributeContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::AttributeListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::AttributeListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}

tree::TerminalNode* ReentParser::AttributeListContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}


size_t ReentParser::AttributeListContext::getRuleIndex() const {
  return ReentParser::RuleAttributeList;
}

void ReentParser::AttributeListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeList(this);
}

void ReentParser::AttributeListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeList(this);
}

ReentParser::AttributeListContext* ReentParser::attributeList() {
  AttributeListContext *_localctx = _tracker.createInstance<AttributeListContext>(_ctx, getState());
  enterRule(_localctx, 328, ReentParser::RuleAttributeList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1964);
    attribute();
    setState(1969);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(1965);
      match(ReentParser::Comma);
      setState(1966);
      attribute();
      setState(1971);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1973);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(1972);
      match(ReentParser::Ellipsis);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeContext ------------------------------------------------------------------

ReentParser::AttributeContext::AttributeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::AttributeContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::AttributeNamespaceContext* ReentParser::AttributeContext::attributeNamespace() {
  return getRuleContext<ReentParser::AttributeNamespaceContext>(0);
}

tree::TerminalNode* ReentParser::AttributeContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

ReentParser::AttributeArgumentClauseContext* ReentParser::AttributeContext::attributeArgumentClause() {
  return getRuleContext<ReentParser::AttributeArgumentClauseContext>(0);
}


size_t ReentParser::AttributeContext::getRuleIndex() const {
  return ReentParser::RuleAttribute;
}

void ReentParser::AttributeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttribute(this);
}

void ReentParser::AttributeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttribute(this);
}

ReentParser::AttributeContext* ReentParser::attribute() {
  AttributeContext *_localctx = _tracker.createInstance<AttributeContext>(_ctx, getState());
  enterRule(_localctx, 330, ReentParser::RuleAttribute);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1978);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      setState(1975);
      attributeNamespace();
      setState(1976);
      match(ReentParser::Doublecolon);
      break;
    }

    default:
      break;
    }
    setState(1980);
    anyIdentifier();
    setState(1982);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::LeftParen) {
      setState(1981);
      attributeArgumentClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeNamespaceContext ------------------------------------------------------------------

ReentParser::AttributeNamespaceContext::AttributeNamespaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::AttributeNamespaceContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::AttributeNamespaceContext::getRuleIndex() const {
  return ReentParser::RuleAttributeNamespace;
}

void ReentParser::AttributeNamespaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeNamespace(this);
}

void ReentParser::AttributeNamespaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeNamespace(this);
}

ReentParser::AttributeNamespaceContext* ReentParser::attributeNamespace() {
  AttributeNamespaceContext *_localctx = _tracker.createInstance<AttributeNamespaceContext>(_ctx, getState());
  enterRule(_localctx, 332, ReentParser::RuleAttributeNamespace);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1984);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AttributeArgumentClauseContext ------------------------------------------------------------------

ReentParser::AttributeArgumentClauseContext::AttributeArgumentClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AttributeArgumentClauseContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::AttributeArgumentClauseContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::BalancedTokenSeqContext* ReentParser::AttributeArgumentClauseContext::balancedTokenSeq() {
  return getRuleContext<ReentParser::BalancedTokenSeqContext>(0);
}


size_t ReentParser::AttributeArgumentClauseContext::getRuleIndex() const {
  return ReentParser::RuleAttributeArgumentClause;
}

void ReentParser::AttributeArgumentClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAttributeArgumentClause(this);
}

void ReentParser::AttributeArgumentClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAttributeArgumentClause(this);
}

ReentParser::AttributeArgumentClauseContext* ReentParser::attributeArgumentClause() {
  AttributeArgumentClauseContext *_localctx = _tracker.createInstance<AttributeArgumentClauseContext>(_ctx, getState());
  enterRule(_localctx, 334, ReentParser::RuleAttributeArgumentClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1986);
    match(ReentParser::LeftParen);
    setState(1988);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::IntegerLiteral)
      | (1ULL << ReentParser::CharacterLiteral)
      | (1ULL << ReentParser::FloatingLiteral)
      | (1ULL << ReentParser::StringLiteral)
      | (1ULL << ReentParser::BooleanLiteral)
      | (1ULL << ReentParser::PointerLiteral)
      | (1ULL << ReentParser::UserDefinedLiteral)
      | (1ULL << ReentParser::PlanPragma)
      | (1ULL << ReentParser::DoNotCheck)
      | (1ULL << ReentParser::BlockComment)
      | (1ULL << ReentParser::OtherPragma)
      | (1ULL << ReentParser::Line)
      | (1ULL << ReentParser::MultiLineMacro)
      | (1ULL << ReentParser::Directive)
      | (1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Alignof)
      | (1ULL << ReentParser::Asm)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Break)
      | (1ULL << ReentParser::Case)
      | (1ULL << ReentParser::Catch)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Chain)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clear_plan)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Const_cast)
      | (1ULL << ReentParser::Continue)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Default)
      | (1ULL << ReentParser::Delete)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Do)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::Dynamic_cast)
      | (1ULL << ReentParser::Else)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Export)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::False_)
      | (1ULL << ReentParser::Final)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::For)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Goto)
      | (1ULL << ReentParser::GpuGlobal)
      | (1ULL << ReentParser::GpuLocal)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (ReentParser::If - 64))
      | (1ULL << (ReentParser::In - 64))
      | (1ULL << (ReentParser::Inline - 64))
      | (1ULL << (ReentParser::Int - 64))
      | (1ULL << (ReentParser::Local - 64))
      | (1ULL << (ReentParser::Long - 64))
      | (1ULL << (ReentParser::MarkPreCondition - 64))
      | (1ULL << (ReentParser::MarkState - 64))
      | (1ULL << (ReentParser::Markupdef - 64))
      | (1ULL << (ReentParser::Mutable - 64))
      | (1ULL << (ReentParser::Namespace - 64))
      | (1ULL << (ReentParser::New - 64))
      | (1ULL << (ReentParser::Noexcept - 64))
      | (1ULL << (ReentParser::Nullptr - 64))
      | (1ULL << (ReentParser::Operator - 64))
      | (1ULL << (ReentParser::Out - 64))
      | (1ULL << (ReentParser::Override - 64))
      | (1ULL << (ReentParser::Plan - 64))
      | (1ULL << (ReentParser::Plan_atomize - 64))
      | (1ULL << (ReentParser::Plan_chain - 64))
      | (1ULL << (ReentParser::Plan_critical - 64))
      | (1ULL << (ReentParser::Plan_first - 64))
      | (1ULL << (ReentParser::Plan_get_first - 64))
      | (1ULL << (ReentParser::Plan_get_last - 64))
      | (1ULL << (ReentParser::Plan_group_atomize - 64))
      | (1ULL << (ReentParser::Plan_group_first - 64))
      | (1ULL << (ReentParser::Plan_group_last - 64))
      | (1ULL << (ReentParser::Plan_group_parallelize - 64))
      | (1ULL << (ReentParser::Plan_group_soft_atomize - 64))
      | (1ULL << (ReentParser::Plan_group_vectorize - 64))
      | (1ULL << (ReentParser::Plan_item_type - 64))
      | (1ULL << (ReentParser::Plan_last - 64))
      | (1ULL << (ReentParser::Plan_parallel_chain - 64))
      | (1ULL << (ReentParser::Plan_parallel_reverse - 64))
      | (1ULL << (ReentParser::Plan_register - 64))
      | (1ULL << (ReentParser::Plan_registered_barrier - 64))
      | (1ULL << (ReentParser::Plan_stop - 64))
      | (1ULL << (ReentParser::Plan_topology - 64))
      | (1ULL << (ReentParser::Plan_type - 64))
      | (1ULL << (ReentParser::Private - 64))
      | (1ULL << (ReentParser::Protected - 64))
      | (1ULL << (ReentParser::Public - 64))
      | (1ULL << (ReentParser::Reduction - 64))
      | (1ULL << (ReentParser::Reenterable - 64))
      | (1ULL << (ReentParser::Register - 64))
      | (1ULL << (ReentParser::Reinterpret_cast - 64))
      | (1ULL << (ReentParser::Reset - 64))
      | (1ULL << (ReentParser::Return - 64))
      | (1ULL << (ReentParser::Set - 64))
      | (1ULL << (ReentParser::Short - 64))
      | (1ULL << (ReentParser::Signed - 64))
      | (1ULL << (ReentParser::Sizeof - 64))
      | (1ULL << (ReentParser::Soft_transact_array - 64))
      | (1ULL << (ReentParser::Soft_transact_in - 64))
      | (1ULL << (ReentParser::Soft_transact_out - 64))
      | (1ULL << (ReentParser::Soft_transact_var - 64))
      | (1ULL << (ReentParser::Static - 64))
      | (1ULL << (ReentParser::Static_assert - 64))
      | (1ULL << (ReentParser::Static_cast - 64))
      | (1ULL << (ReentParser::Struct - 64))
      | (1ULL << (ReentParser::Switch - 64))
      | (1ULL << (ReentParser::Template - 64))
      | (1ULL << (ReentParser::This - 64))
      | (1ULL << (ReentParser::Thread_local - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (ReentParser::Throw - 128))
      | (1ULL << (ReentParser::Throw_first - 128))
      | (1ULL << (ReentParser::Throw_last - 128))
      | (1ULL << (ReentParser::Transaction_atomic - 128))
      | (1ULL << (ReentParser::True_ - 128))
      | (1ULL << (ReentParser::Try - 128))
      | (1ULL << (ReentParser::Typedef - 128))
      | (1ULL << (ReentParser::Typeid_ - 128))
      | (1ULL << (ReentParser::Typename_ - 128))
      | (1ULL << (ReentParser::Union - 128))
      | (1ULL << (ReentParser::Unsigned - 128))
      | (1ULL << (ReentParser::Using - 128))
      | (1ULL << (ReentParser::Vectorized - 128))
      | (1ULL << (ReentParser::Virtual - 128))
      | (1ULL << (ReentParser::Void - 128))
      | (1ULL << (ReentParser::Volatile - 128))
      | (1ULL << (ReentParser::Wchar - 128))
      | (1ULL << (ReentParser::While - 128))
      | (1ULL << (ReentParser::At - 128))
      | (1ULL << (ReentParser::Dollar - 128))
      | (1ULL << (ReentParser::Is - 128))
      | (1ULL << (ReentParser::LeftParen - 128))
      | (1ULL << (ReentParser::LeftBracket - 128))
      | (1ULL << (ReentParser::LeftBrace - 128))
      | (1ULL << (ReentParser::Underscore - 128))
      | (1ULL << (ReentParser::Plus - 128))
      | (1ULL << (ReentParser::Minus - 128))
      | (1ULL << (ReentParser::Star - 128))
      | (1ULL << (ReentParser::Div - 128))
      | (1ULL << (ReentParser::Mod - 128))
      | (1ULL << (ReentParser::Caret - 128))
      | (1ULL << (ReentParser::And - 128))
      | (1ULL << (ReentParser::Or - 128))
      | (1ULL << (ReentParser::Tilde - 128))
      | (1ULL << (ReentParser::Not - 128))
      | (1ULL << (ReentParser::Assign - 128))
      | (1ULL << (ReentParser::Less - 128))
      | (1ULL << (ReentParser::Greater - 128))
      | (1ULL << (ReentParser::PlusAssign - 128))
      | (1ULL << (ReentParser::MinusAssign - 128))
      | (1ULL << (ReentParser::StarAssign - 128))
      | (1ULL << (ReentParser::DivAssign - 128))
      | (1ULL << (ReentParser::ModAssign - 128))
      | (1ULL << (ReentParser::XorAssign - 128))
      | (1ULL << (ReentParser::AndAssign - 128))
      | (1ULL << (ReentParser::OrAssign - 128))
      | (1ULL << (ReentParser::LeftShiftAssign - 128))
      | (1ULL << (ReentParser::RightShiftAssign - 128))
      | (1ULL << (ReentParser::Equal - 128))
      | (1ULL << (ReentParser::NotEqual - 128))
      | (1ULL << (ReentParser::LessEqual - 128))
      | (1ULL << (ReentParser::GreaterEqual - 128))
      | (1ULL << (ReentParser::AndAnd - 128))
      | (1ULL << (ReentParser::OrOr - 128))
      | (1ULL << (ReentParser::PlusPlus - 128))
      | (1ULL << (ReentParser::MinusMinus - 128))
      | (1ULL << (ReentParser::Comma - 128))
      | (1ULL << (ReentParser::ArrowStar - 128))
      | (1ULL << (ReentParser::Arrow - 128))
      | (1ULL << (ReentParser::Question - 128))
      | (1ULL << (ReentParser::Colon - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (ReentParser::Doublecolon - 192))
      | (1ULL << (ReentParser::Semi - 192))
      | (1ULL << (ReentParser::Dot - 192))
      | (1ULL << (ReentParser::DotStar - 192))
      | (1ULL << (ReentParser::Ellipsis - 192))
      | (1ULL << (ReentParser::Identifier - 192))
      | (1ULL << (ReentParser::DecimalLiteral - 192))
      | (1ULL << (ReentParser::OctalLiteral - 192))
      | (1ULL << (ReentParser::HexadecimalLiteral - 192))
      | (1ULL << (ReentParser::BinaryLiteral - 192))
      | (1ULL << (ReentParser::Integersuffix - 192))
      | (1ULL << (ReentParser::UserDefinedIntegerLiteral - 192))
      | (1ULL << (ReentParser::UserDefinedFloatingLiteral - 192))
      | (1ULL << (ReentParser::UserDefinedStringLiteral - 192))
      | (1ULL << (ReentParser::UserDefinedCharacterLiteral - 192))
      | (1ULL << (ReentParser::Whitespace - 192))
      | (1ULL << (ReentParser::Newline - 192))
      | (1ULL << (ReentParser::LineComment - 192)))) != 0)) {
      setState(1987);
      balancedTokenSeq();
    }
    setState(1990);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BalancedTokenSeqContext ------------------------------------------------------------------

ReentParser::BalancedTokenSeqContext::BalancedTokenSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::BalancedtokenContext *> ReentParser::BalancedTokenSeqContext::balancedtoken() {
  return getRuleContexts<ReentParser::BalancedtokenContext>();
}

ReentParser::BalancedtokenContext* ReentParser::BalancedTokenSeqContext::balancedtoken(size_t i) {
  return getRuleContext<ReentParser::BalancedtokenContext>(i);
}


size_t ReentParser::BalancedTokenSeqContext::getRuleIndex() const {
  return ReentParser::RuleBalancedTokenSeq;
}

void ReentParser::BalancedTokenSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBalancedTokenSeq(this);
}

void ReentParser::BalancedTokenSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBalancedTokenSeq(this);
}

ReentParser::BalancedTokenSeqContext* ReentParser::balancedTokenSeq() {
  BalancedTokenSeqContext *_localctx = _tracker.createInstance<BalancedTokenSeqContext>(_ctx, getState());
  enterRule(_localctx, 336, ReentParser::RuleBalancedTokenSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1993); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(1992);
      balancedtoken();
      setState(1995); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::IntegerLiteral)
      | (1ULL << ReentParser::CharacterLiteral)
      | (1ULL << ReentParser::FloatingLiteral)
      | (1ULL << ReentParser::StringLiteral)
      | (1ULL << ReentParser::BooleanLiteral)
      | (1ULL << ReentParser::PointerLiteral)
      | (1ULL << ReentParser::UserDefinedLiteral)
      | (1ULL << ReentParser::PlanPragma)
      | (1ULL << ReentParser::DoNotCheck)
      | (1ULL << ReentParser::BlockComment)
      | (1ULL << ReentParser::OtherPragma)
      | (1ULL << ReentParser::Line)
      | (1ULL << ReentParser::MultiLineMacro)
      | (1ULL << ReentParser::Directive)
      | (1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Alignof)
      | (1ULL << ReentParser::Asm)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Break)
      | (1ULL << ReentParser::Case)
      | (1ULL << ReentParser::Catch)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Chain)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clear_plan)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Const_cast)
      | (1ULL << ReentParser::Continue)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Default)
      | (1ULL << ReentParser::Delete)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Do)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::Dynamic_cast)
      | (1ULL << ReentParser::Else)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Export)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::False_)
      | (1ULL << ReentParser::Final)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::For)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Goto)
      | (1ULL << ReentParser::GpuGlobal)
      | (1ULL << ReentParser::GpuLocal)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (ReentParser::If - 64))
      | (1ULL << (ReentParser::In - 64))
      | (1ULL << (ReentParser::Inline - 64))
      | (1ULL << (ReentParser::Int - 64))
      | (1ULL << (ReentParser::Local - 64))
      | (1ULL << (ReentParser::Long - 64))
      | (1ULL << (ReentParser::MarkPreCondition - 64))
      | (1ULL << (ReentParser::MarkState - 64))
      | (1ULL << (ReentParser::Markupdef - 64))
      | (1ULL << (ReentParser::Mutable - 64))
      | (1ULL << (ReentParser::Namespace - 64))
      | (1ULL << (ReentParser::New - 64))
      | (1ULL << (ReentParser::Noexcept - 64))
      | (1ULL << (ReentParser::Nullptr - 64))
      | (1ULL << (ReentParser::Operator - 64))
      | (1ULL << (ReentParser::Out - 64))
      | (1ULL << (ReentParser::Override - 64))
      | (1ULL << (ReentParser::Plan - 64))
      | (1ULL << (ReentParser::Plan_atomize - 64))
      | (1ULL << (ReentParser::Plan_chain - 64))
      | (1ULL << (ReentParser::Plan_critical - 64))
      | (1ULL << (ReentParser::Plan_first - 64))
      | (1ULL << (ReentParser::Plan_get_first - 64))
      | (1ULL << (ReentParser::Plan_get_last - 64))
      | (1ULL << (ReentParser::Plan_group_atomize - 64))
      | (1ULL << (ReentParser::Plan_group_first - 64))
      | (1ULL << (ReentParser::Plan_group_last - 64))
      | (1ULL << (ReentParser::Plan_group_parallelize - 64))
      | (1ULL << (ReentParser::Plan_group_soft_atomize - 64))
      | (1ULL << (ReentParser::Plan_group_vectorize - 64))
      | (1ULL << (ReentParser::Plan_item_type - 64))
      | (1ULL << (ReentParser::Plan_last - 64))
      | (1ULL << (ReentParser::Plan_parallel_chain - 64))
      | (1ULL << (ReentParser::Plan_parallel_reverse - 64))
      | (1ULL << (ReentParser::Plan_register - 64))
      | (1ULL << (ReentParser::Plan_registered_barrier - 64))
      | (1ULL << (ReentParser::Plan_stop - 64))
      | (1ULL << (ReentParser::Plan_topology - 64))
      | (1ULL << (ReentParser::Plan_type - 64))
      | (1ULL << (ReentParser::Private - 64))
      | (1ULL << (ReentParser::Protected - 64))
      | (1ULL << (ReentParser::Public - 64))
      | (1ULL << (ReentParser::Reduction - 64))
      | (1ULL << (ReentParser::Reenterable - 64))
      | (1ULL << (ReentParser::Register - 64))
      | (1ULL << (ReentParser::Reinterpret_cast - 64))
      | (1ULL << (ReentParser::Reset - 64))
      | (1ULL << (ReentParser::Return - 64))
      | (1ULL << (ReentParser::Set - 64))
      | (1ULL << (ReentParser::Short - 64))
      | (1ULL << (ReentParser::Signed - 64))
      | (1ULL << (ReentParser::Sizeof - 64))
      | (1ULL << (ReentParser::Soft_transact_array - 64))
      | (1ULL << (ReentParser::Soft_transact_in - 64))
      | (1ULL << (ReentParser::Soft_transact_out - 64))
      | (1ULL << (ReentParser::Soft_transact_var - 64))
      | (1ULL << (ReentParser::Static - 64))
      | (1ULL << (ReentParser::Static_assert - 64))
      | (1ULL << (ReentParser::Static_cast - 64))
      | (1ULL << (ReentParser::Struct - 64))
      | (1ULL << (ReentParser::Switch - 64))
      | (1ULL << (ReentParser::Template - 64))
      | (1ULL << (ReentParser::This - 64))
      | (1ULL << (ReentParser::Thread_local - 64)))) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 128)) & ((1ULL << (ReentParser::Throw - 128))
      | (1ULL << (ReentParser::Throw_first - 128))
      | (1ULL << (ReentParser::Throw_last - 128))
      | (1ULL << (ReentParser::Transaction_atomic - 128))
      | (1ULL << (ReentParser::True_ - 128))
      | (1ULL << (ReentParser::Try - 128))
      | (1ULL << (ReentParser::Typedef - 128))
      | (1ULL << (ReentParser::Typeid_ - 128))
      | (1ULL << (ReentParser::Typename_ - 128))
      | (1ULL << (ReentParser::Union - 128))
      | (1ULL << (ReentParser::Unsigned - 128))
      | (1ULL << (ReentParser::Using - 128))
      | (1ULL << (ReentParser::Vectorized - 128))
      | (1ULL << (ReentParser::Virtual - 128))
      | (1ULL << (ReentParser::Void - 128))
      | (1ULL << (ReentParser::Volatile - 128))
      | (1ULL << (ReentParser::Wchar - 128))
      | (1ULL << (ReentParser::While - 128))
      | (1ULL << (ReentParser::At - 128))
      | (1ULL << (ReentParser::Dollar - 128))
      | (1ULL << (ReentParser::Is - 128))
      | (1ULL << (ReentParser::LeftParen - 128))
      | (1ULL << (ReentParser::LeftBracket - 128))
      | (1ULL << (ReentParser::LeftBrace - 128))
      | (1ULL << (ReentParser::Underscore - 128))
      | (1ULL << (ReentParser::Plus - 128))
      | (1ULL << (ReentParser::Minus - 128))
      | (1ULL << (ReentParser::Star - 128))
      | (1ULL << (ReentParser::Div - 128))
      | (1ULL << (ReentParser::Mod - 128))
      | (1ULL << (ReentParser::Caret - 128))
      | (1ULL << (ReentParser::And - 128))
      | (1ULL << (ReentParser::Or - 128))
      | (1ULL << (ReentParser::Tilde - 128))
      | (1ULL << (ReentParser::Not - 128))
      | (1ULL << (ReentParser::Assign - 128))
      | (1ULL << (ReentParser::Less - 128))
      | (1ULL << (ReentParser::Greater - 128))
      | (1ULL << (ReentParser::PlusAssign - 128))
      | (1ULL << (ReentParser::MinusAssign - 128))
      | (1ULL << (ReentParser::StarAssign - 128))
      | (1ULL << (ReentParser::DivAssign - 128))
      | (1ULL << (ReentParser::ModAssign - 128))
      | (1ULL << (ReentParser::XorAssign - 128))
      | (1ULL << (ReentParser::AndAssign - 128))
      | (1ULL << (ReentParser::OrAssign - 128))
      | (1ULL << (ReentParser::LeftShiftAssign - 128))
      | (1ULL << (ReentParser::RightShiftAssign - 128))
      | (1ULL << (ReentParser::Equal - 128))
      | (1ULL << (ReentParser::NotEqual - 128))
      | (1ULL << (ReentParser::LessEqual - 128))
      | (1ULL << (ReentParser::GreaterEqual - 128))
      | (1ULL << (ReentParser::AndAnd - 128))
      | (1ULL << (ReentParser::OrOr - 128))
      | (1ULL << (ReentParser::PlusPlus - 128))
      | (1ULL << (ReentParser::MinusMinus - 128))
      | (1ULL << (ReentParser::Comma - 128))
      | (1ULL << (ReentParser::ArrowStar - 128))
      | (1ULL << (ReentParser::Arrow - 128))
      | (1ULL << (ReentParser::Question - 128))
      | (1ULL << (ReentParser::Colon - 128)))) != 0) || ((((_la - 192) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 192)) & ((1ULL << (ReentParser::Doublecolon - 192))
      | (1ULL << (ReentParser::Semi - 192))
      | (1ULL << (ReentParser::Dot - 192))
      | (1ULL << (ReentParser::DotStar - 192))
      | (1ULL << (ReentParser::Ellipsis - 192))
      | (1ULL << (ReentParser::Identifier - 192))
      | (1ULL << (ReentParser::DecimalLiteral - 192))
      | (1ULL << (ReentParser::OctalLiteral - 192))
      | (1ULL << (ReentParser::HexadecimalLiteral - 192))
      | (1ULL << (ReentParser::BinaryLiteral - 192))
      | (1ULL << (ReentParser::Integersuffix - 192))
      | (1ULL << (ReentParser::UserDefinedIntegerLiteral - 192))
      | (1ULL << (ReentParser::UserDefinedFloatingLiteral - 192))
      | (1ULL << (ReentParser::UserDefinedStringLiteral - 192))
      | (1ULL << (ReentParser::UserDefinedCharacterLiteral - 192))
      | (1ULL << (ReentParser::Whitespace - 192))
      | (1ULL << (ReentParser::Newline - 192))
      | (1ULL << (ReentParser::LineComment - 192)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BalancedtokenContext ------------------------------------------------------------------

ReentParser::BalancedtokenContext::BalancedtokenContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> ReentParser::BalancedtokenContext::LeftParen() {
  return getTokens(ReentParser::LeftParen);
}

tree::TerminalNode* ReentParser::BalancedtokenContext::LeftParen(size_t i) {
  return getToken(ReentParser::LeftParen, i);
}

ReentParser::BalancedTokenSeqContext* ReentParser::BalancedtokenContext::balancedTokenSeq() {
  return getRuleContext<ReentParser::BalancedTokenSeqContext>(0);
}

std::vector<tree::TerminalNode *> ReentParser::BalancedtokenContext::RightParen() {
  return getTokens(ReentParser::RightParen);
}

tree::TerminalNode* ReentParser::BalancedtokenContext::RightParen(size_t i) {
  return getToken(ReentParser::RightParen, i);
}

std::vector<tree::TerminalNode *> ReentParser::BalancedtokenContext::LeftBracket() {
  return getTokens(ReentParser::LeftBracket);
}

tree::TerminalNode* ReentParser::BalancedtokenContext::LeftBracket(size_t i) {
  return getToken(ReentParser::LeftBracket, i);
}

std::vector<tree::TerminalNode *> ReentParser::BalancedtokenContext::RightBracket() {
  return getTokens(ReentParser::RightBracket);
}

tree::TerminalNode* ReentParser::BalancedtokenContext::RightBracket(size_t i) {
  return getToken(ReentParser::RightBracket, i);
}

std::vector<tree::TerminalNode *> ReentParser::BalancedtokenContext::LeftBrace() {
  return getTokens(ReentParser::LeftBrace);
}

tree::TerminalNode* ReentParser::BalancedtokenContext::LeftBrace(size_t i) {
  return getToken(ReentParser::LeftBrace, i);
}

std::vector<tree::TerminalNode *> ReentParser::BalancedtokenContext::RightBrace() {
  return getTokens(ReentParser::RightBrace);
}

tree::TerminalNode* ReentParser::BalancedtokenContext::RightBrace(size_t i) {
  return getToken(ReentParser::RightBrace, i);
}


size_t ReentParser::BalancedtokenContext::getRuleIndex() const {
  return ReentParser::RuleBalancedtoken;
}

void ReentParser::BalancedtokenContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBalancedtoken(this);
}

void ReentParser::BalancedtokenContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBalancedtoken(this);
}

ReentParser::BalancedtokenContext* ReentParser::balancedtoken() {
  BalancedtokenContext *_localctx = _tracker.createInstance<BalancedtokenContext>(_ctx, getState());
  enterRule(_localctx, 338, ReentParser::RuleBalancedtoken);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2014);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftParen: {
        enterOuterAlt(_localctx, 1);
        setState(1997);
        match(ReentParser::LeftParen);
        setState(1998);
        balancedTokenSeq();
        setState(1999);
        match(ReentParser::RightParen);
        break;
      }

      case ReentParser::LeftBracket: {
        enterOuterAlt(_localctx, 2);
        setState(2001);
        match(ReentParser::LeftBracket);
        setState(2002);
        balancedTokenSeq();
        setState(2003);
        match(ReentParser::RightBracket);
        break;
      }

      case ReentParser::LeftBrace: {
        enterOuterAlt(_localctx, 3);
        setState(2005);
        match(ReentParser::LeftBrace);
        setState(2006);
        balancedTokenSeq();
        setState(2007);
        match(ReentParser::RightBrace);
        break;
      }

      case ReentParser::IntegerLiteral:
      case ReentParser::CharacterLiteral:
      case ReentParser::FloatingLiteral:
      case ReentParser::StringLiteral:
      case ReentParser::BooleanLiteral:
      case ReentParser::PointerLiteral:
      case ReentParser::UserDefinedLiteral:
      case ReentParser::PlanPragma:
      case ReentParser::DoNotCheck:
      case ReentParser::BlockComment:
      case ReentParser::OtherPragma:
      case ReentParser::Line:
      case ReentParser::MultiLineMacro:
      case ReentParser::Directive:
      case ReentParser::Alignas:
      case ReentParser::Alignof:
      case ReentParser::Asm:
      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Break:
      case ReentParser::Case:
      case ReentParser::Catch:
      case ReentParser::Cfunnel:
      case ReentParser::Chain:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Class:
      case ReentParser::Clear_plan:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Const:
      case ReentParser::Constexpr:
      case ReentParser::Const_cast:
      case ReentParser::Continue:
      case ReentParser::Csem:
      case ReentParser::Cvar:
      case ReentParser::Decltype:
      case ReentParser::Default:
      case ReentParser::Delete:
      case ReentParser::Depends:
      case ReentParser::Do:
      case ReentParser::Double:
      case ReentParser::Dynamic_cast:
      case ReentParser::Else:
      case ReentParser::End:
      case ReentParser::Enum:
      case ReentParser::Explicit:
      case ReentParser::Export:
      case ReentParser::Extern:
      case ReentParser::False_:
      case ReentParser::Final:
      case ReentParser::Float:
      case ReentParser::For:
      case ReentParser::Friend:
      case ReentParser::Funnel:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Goto:
      case ReentParser::GpuGlobal:
      case ReentParser::GpuLocal:
      case ReentParser::Id:
      case ReentParser::If:
      case ReentParser::In:
      case ReentParser::Inline:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Markupdef:
      case ReentParser::Mutable:
      case ReentParser::Namespace:
      case ReentParser::New:
      case ReentParser::Noexcept:
      case ReentParser::Nullptr:
      case ReentParser::Operator:
      case ReentParser::Out:
      case ReentParser::Override:
      case ReentParser::Plan:
      case ReentParser::Plan_atomize:
      case ReentParser::Plan_chain:
      case ReentParser::Plan_critical:
      case ReentParser::Plan_first:
      case ReentParser::Plan_get_first:
      case ReentParser::Plan_get_last:
      case ReentParser::Plan_group_atomize:
      case ReentParser::Plan_group_first:
      case ReentParser::Plan_group_last:
      case ReentParser::Plan_group_parallelize:
      case ReentParser::Plan_group_soft_atomize:
      case ReentParser::Plan_group_vectorize:
      case ReentParser::Plan_item_type:
      case ReentParser::Plan_last:
      case ReentParser::Plan_parallel_chain:
      case ReentParser::Plan_parallel_reverse:
      case ReentParser::Plan_register:
      case ReentParser::Plan_registered_barrier:
      case ReentParser::Plan_stop:
      case ReentParser::Plan_topology:
      case ReentParser::Plan_type:
      case ReentParser::Private:
      case ReentParser::Protected:
      case ReentParser::Public:
      case ReentParser::Reduction:
      case ReentParser::Reenterable:
      case ReentParser::Register:
      case ReentParser::Reinterpret_cast:
      case ReentParser::Reset:
      case ReentParser::Return:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Sizeof:
      case ReentParser::Soft_transact_array:
      case ReentParser::Soft_transact_in:
      case ReentParser::Soft_transact_out:
      case ReentParser::Soft_transact_var:
      case ReentParser::Static:
      case ReentParser::Static_assert:
      case ReentParser::Static_cast:
      case ReentParser::Struct:
      case ReentParser::Switch:
      case ReentParser::Template:
      case ReentParser::This:
      case ReentParser::Thread_local:
      case ReentParser::Throw:
      case ReentParser::Throw_first:
      case ReentParser::Throw_last:
      case ReentParser::Transaction_atomic:
      case ReentParser::True_:
      case ReentParser::Try:
      case ReentParser::Typedef:
      case ReentParser::Typeid_:
      case ReentParser::Typename_:
      case ReentParser::Union:
      case ReentParser::Unsigned:
      case ReentParser::Using:
      case ReentParser::Vectorized:
      case ReentParser::Virtual:
      case ReentParser::Void:
      case ReentParser::Volatile:
      case ReentParser::Wchar:
      case ReentParser::While:
      case ReentParser::At:
      case ReentParser::Dollar:
      case ReentParser::Is:
      case ReentParser::Underscore:
      case ReentParser::Plus:
      case ReentParser::Minus:
      case ReentParser::Star:
      case ReentParser::Div:
      case ReentParser::Mod:
      case ReentParser::Caret:
      case ReentParser::And:
      case ReentParser::Or:
      case ReentParser::Tilde:
      case ReentParser::Not:
      case ReentParser::Assign:
      case ReentParser::Less:
      case ReentParser::Greater:
      case ReentParser::PlusAssign:
      case ReentParser::MinusAssign:
      case ReentParser::StarAssign:
      case ReentParser::DivAssign:
      case ReentParser::ModAssign:
      case ReentParser::XorAssign:
      case ReentParser::AndAssign:
      case ReentParser::OrAssign:
      case ReentParser::LeftShiftAssign:
      case ReentParser::RightShiftAssign:
      case ReentParser::Equal:
      case ReentParser::NotEqual:
      case ReentParser::LessEqual:
      case ReentParser::GreaterEqual:
      case ReentParser::AndAnd:
      case ReentParser::OrOr:
      case ReentParser::PlusPlus:
      case ReentParser::MinusMinus:
      case ReentParser::Comma:
      case ReentParser::ArrowStar:
      case ReentParser::Arrow:
      case ReentParser::Question:
      case ReentParser::Colon:
      case ReentParser::Doublecolon:
      case ReentParser::Semi:
      case ReentParser::Dot:
      case ReentParser::DotStar:
      case ReentParser::Ellipsis:
      case ReentParser::Identifier:
      case ReentParser::DecimalLiteral:
      case ReentParser::OctalLiteral:
      case ReentParser::HexadecimalLiteral:
      case ReentParser::BinaryLiteral:
      case ReentParser::Integersuffix:
      case ReentParser::UserDefinedIntegerLiteral:
      case ReentParser::UserDefinedFloatingLiteral:
      case ReentParser::UserDefinedStringLiteral:
      case ReentParser::UserDefinedCharacterLiteral:
      case ReentParser::Whitespace:
      case ReentParser::Newline:
      case ReentParser::LineComment: {
        enterOuterAlt(_localctx, 4);
        setState(2010); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(2009);
                  _la = _input->LA(1);
                  if (_la == 0 || _la == Token::EOF || (((((_la - 149) & ~ 0x3fULL) == 0) &&
                    ((1ULL << (_la - 149)) & ((1ULL << (ReentParser::LeftParen - 149))
                    | (1ULL << (ReentParser::RightParen - 149))
                    | (1ULL << (ReentParser::LeftBracket - 149))
                    | (1ULL << (ReentParser::RightBracket - 149))
                    | (1ULL << (ReentParser::LeftBrace - 149))
                    | (1ULL << (ReentParser::RightBrace - 149)))) != 0))) {
                  _errHandler->recoverInline(this);
                  }
                  else {
                    _errHandler->reportMatch(this);
                    consume();
                  }
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(2012); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 193, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorListContext ------------------------------------------------------------------

ReentParser::InitDeclaratorListContext::InitDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::InitDeclaratorContext *> ReentParser::InitDeclaratorListContext::initDeclarator() {
  return getRuleContexts<ReentParser::InitDeclaratorContext>();
}

ReentParser::InitDeclaratorContext* ReentParser::InitDeclaratorListContext::initDeclarator(size_t i) {
  return getRuleContext<ReentParser::InitDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::InitDeclaratorListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::InitDeclaratorListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::InitDeclaratorListContext::getRuleIndex() const {
  return ReentParser::RuleInitDeclaratorList;
}

void ReentParser::InitDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDeclaratorList(this);
}

void ReentParser::InitDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDeclaratorList(this);
}

ReentParser::InitDeclaratorListContext* ReentParser::initDeclaratorList() {
  InitDeclaratorListContext *_localctx = _tracker.createInstance<InitDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 340, ReentParser::RuleInitDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2016);
    initDeclarator();
    setState(2021);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2017);
      match(ReentParser::Comma);
      setState(2018);
      initDeclarator();
      setState(2023);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitDeclaratorContext ------------------------------------------------------------------

ReentParser::InitDeclaratorContext::InitDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclaratorContext* ReentParser::InitDeclaratorContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

ReentParser::InitializerContext* ReentParser::InitDeclaratorContext::initializer() {
  return getRuleContext<ReentParser::InitializerContext>(0);
}


size_t ReentParser::InitDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleInitDeclarator;
}

void ReentParser::InitDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitDeclarator(this);
}

void ReentParser::InitDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitDeclarator(this);
}

ReentParser::InitDeclaratorContext* ReentParser::initDeclarator() {
  InitDeclaratorContext *_localctx = _tracker.createInstance<InitDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 342, ReentParser::RuleInitDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2024);
    declarator();
    setState(2026);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (((((_la - 149) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 149)) & ((1ULL << (ReentParser::LeftParen - 149))
      | (1ULL << (ReentParser::LeftBrace - 149))
      | (1ULL << (ReentParser::Assign - 149)))) != 0)) {
      setState(2025);
      initializer();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratorContext ------------------------------------------------------------------

ReentParser::DeclaratorContext::DeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::PointerDeclaratorContext* ReentParser::DeclaratorContext::pointerDeclarator() {
  return getRuleContext<ReentParser::PointerDeclaratorContext>(0);
}

ReentParser::NoPointerDeclaratorContext* ReentParser::DeclaratorContext::noPointerDeclarator() {
  return getRuleContext<ReentParser::NoPointerDeclaratorContext>(0);
}

ReentParser::ParametersAndQualifiersContext* ReentParser::DeclaratorContext::parametersAndQualifiers() {
  return getRuleContext<ReentParser::ParametersAndQualifiersContext>(0);
}

ReentParser::TrailingReturnTypeContext* ReentParser::DeclaratorContext::trailingReturnType() {
  return getRuleContext<ReentParser::TrailingReturnTypeContext>(0);
}


size_t ReentParser::DeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleDeclarator;
}

void ReentParser::DeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclarator(this);
}

void ReentParser::DeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclarator(this);
}

ReentParser::DeclaratorContext* ReentParser::declarator() {
  DeclaratorContext *_localctx = _tracker.createInstance<DeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 344, ReentParser::RuleDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2033);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2028);
      pointerDeclarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2029);
      noPointerDeclarator(0);
      setState(2030);
      parametersAndQualifiers();
      setState(2031);
      trailingReturnType();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerDeclaratorContext ------------------------------------------------------------------

ReentParser::PointerDeclaratorContext::PointerDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::NoPointerDeclaratorContext* ReentParser::PointerDeclaratorContext::noPointerDeclarator() {
  return getRuleContext<ReentParser::NoPointerDeclaratorContext>(0);
}

std::vector<ReentParser::PointerOperatorContext *> ReentParser::PointerDeclaratorContext::pointerOperator() {
  return getRuleContexts<ReentParser::PointerOperatorContext>();
}

ReentParser::PointerOperatorContext* ReentParser::PointerDeclaratorContext::pointerOperator(size_t i) {
  return getRuleContext<ReentParser::PointerOperatorContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::PointerDeclaratorContext::Const() {
  return getTokens(ReentParser::Const);
}

tree::TerminalNode* ReentParser::PointerDeclaratorContext::Const(size_t i) {
  return getToken(ReentParser::Const, i);
}


size_t ReentParser::PointerDeclaratorContext::getRuleIndex() const {
  return ReentParser::RulePointerDeclarator;
}

void ReentParser::PointerDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerDeclarator(this);
}

void ReentParser::PointerDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerDeclarator(this);
}

ReentParser::PointerDeclaratorContext* ReentParser::pointerDeclarator() {
  PointerDeclaratorContext *_localctx = _tracker.createInstance<PointerDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 346, ReentParser::RulePointerDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2041);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2035);
        pointerOperator();
        setState(2037);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Const) {
          setState(2036);
          match(ReentParser::Const);
        } 
      }
      setState(2043);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx);
    }
    setState(2044);
    noPointerDeclarator(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoPointerDeclaratorContext ------------------------------------------------------------------

ReentParser::NoPointerDeclaratorContext::NoPointerDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclaratoridContext* ReentParser::NoPointerDeclaratorContext::declaratorid() {
  return getRuleContext<ReentParser::DeclaratoridContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::NoPointerDeclaratorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

tree::TerminalNode* ReentParser::NoPointerDeclaratorContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::PointerDeclaratorContext* ReentParser::NoPointerDeclaratorContext::pointerDeclarator() {
  return getRuleContext<ReentParser::PointerDeclaratorContext>(0);
}

tree::TerminalNode* ReentParser::NoPointerDeclaratorContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::NoPointerDeclaratorContext* ReentParser::NoPointerDeclaratorContext::noPointerDeclarator() {
  return getRuleContext<ReentParser::NoPointerDeclaratorContext>(0);
}

ReentParser::ParametersAndQualifiersContext* ReentParser::NoPointerDeclaratorContext::parametersAndQualifiers() {
  return getRuleContext<ReentParser::ParametersAndQualifiersContext>(0);
}

tree::TerminalNode* ReentParser::NoPointerDeclaratorContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::NoPointerDeclaratorContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::NoPointerDeclaratorContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}


size_t ReentParser::NoPointerDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleNoPointerDeclarator;
}

void ReentParser::NoPointerDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoPointerDeclarator(this);
}

void ReentParser::NoPointerDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoPointerDeclarator(this);
}


ReentParser::NoPointerDeclaratorContext* ReentParser::noPointerDeclarator() {
   return noPointerDeclarator(0);
}

ReentParser::NoPointerDeclaratorContext* ReentParser::noPointerDeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ReentParser::NoPointerDeclaratorContext *_localctx = _tracker.createInstance<NoPointerDeclaratorContext>(_ctx, parentState);
  ReentParser::NoPointerDeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 348;
  enterRecursionRule(_localctx, 348, ReentParser::RuleNoPointerDeclarator, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2055);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Operator:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Tilde:
      case ReentParser::Doublecolon:
      case ReentParser::Ellipsis:
      case ReentParser::Identifier: {
        setState(2047);
        declaratorid();
        setState(2049);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
        case 1: {
          setState(2048);
          attributeSpecifierSeq();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::LeftParen: {
        setState(2051);
        match(ReentParser::LeftParen);
        setState(2052);
        pointerDeclarator();
        setState(2053);
        match(ReentParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    _ctx->stop = _input->LT(-1);
    setState(2071);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NoPointerDeclaratorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNoPointerDeclarator);
        setState(2057);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2067);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ReentParser::LeftParen: {
            setState(2058);
            parametersAndQualifiers();
            break;
          }

          case ReentParser::LeftBracket: {
            setState(2059);
            match(ReentParser::LeftBracket);
            setState(2061);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
            case 1: {
              setState(2060);
              constantExpression();
              break;
            }

            default:
              break;
            }
            setState(2063);
            match(ReentParser::RightBracket);
            setState(2065);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 203, _ctx)) {
            case 1: {
              setState(2064);
              attributeSpecifierSeq();
              break;
            }

            default:
              break;
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2073);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParametersAndQualifiersContext ------------------------------------------------------------------

ReentParser::ParametersAndQualifiersContext::ParametersAndQualifiersContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ParametersAndQualifiersContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::ParametersAndQualifiersContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::ParameterDeclarationClauseContext* ReentParser::ParametersAndQualifiersContext::parameterDeclarationClause() {
  return getRuleContext<ReentParser::ParameterDeclarationClauseContext>(0);
}

ReentParser::CvqualifierseqContext* ReentParser::ParametersAndQualifiersContext::cvqualifierseq() {
  return getRuleContext<ReentParser::CvqualifierseqContext>(0);
}

ReentParser::RefqualifierContext* ReentParser::ParametersAndQualifiersContext::refqualifier() {
  return getRuleContext<ReentParser::RefqualifierContext>(0);
}

ReentParser::ExceptionSpecificationContext* ReentParser::ParametersAndQualifiersContext::exceptionSpecification() {
  return getRuleContext<ReentParser::ExceptionSpecificationContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ParametersAndQualifiersContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::ParametersAndQualifiersContext::getRuleIndex() const {
  return ReentParser::RuleParametersAndQualifiers;
}

void ReentParser::ParametersAndQualifiersContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParametersAndQualifiers(this);
}

void ReentParser::ParametersAndQualifiersContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParametersAndQualifiers(this);
}

ReentParser::ParametersAndQualifiersContext* ReentParser::parametersAndQualifiers() {
  ParametersAndQualifiersContext *_localctx = _tracker.createInstance<ParametersAndQualifiersContext>(_ctx, getState());
  enterRule(_localctx, 350, ReentParser::RuleParametersAndQualifiers);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2074);
    match(ReentParser::LeftParen);
    setState(2076);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(2075);
      parameterDeclarationClause();
    }
    setState(2078);
    match(ReentParser::RightParen);
    setState(2080);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx)) {
    case 1: {
      setState(2079);
      cvqualifierseq();
      break;
    }

    default:
      break;
    }
    setState(2083);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 208, _ctx)) {
    case 1: {
      setState(2082);
      refqualifier();
      break;
    }

    default:
      break;
    }
    setState(2086);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 209, _ctx)) {
    case 1: {
      setState(2085);
      exceptionSpecification();
      break;
    }

    default:
      break;
    }
    setState(2089);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 210, _ctx)) {
    case 1: {
      setState(2088);
      attributeSpecifierSeq();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TrailingReturnTypeContext ------------------------------------------------------------------

ReentParser::TrailingReturnTypeContext::TrailingReturnTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TrailingReturnTypeContext::Arrow() {
  return getToken(ReentParser::Arrow, 0);
}

ReentParser::TrailingTypeSpecifierSeqContext* ReentParser::TrailingReturnTypeContext::trailingTypeSpecifierSeq() {
  return getRuleContext<ReentParser::TrailingTypeSpecifierSeqContext>(0);
}

ReentParser::AbstractDeclaratorContext* ReentParser::TrailingReturnTypeContext::abstractDeclarator() {
  return getRuleContext<ReentParser::AbstractDeclaratorContext>(0);
}


size_t ReentParser::TrailingReturnTypeContext::getRuleIndex() const {
  return ReentParser::RuleTrailingReturnType;
}

void ReentParser::TrailingReturnTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTrailingReturnType(this);
}

void ReentParser::TrailingReturnTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTrailingReturnType(this);
}

ReentParser::TrailingReturnTypeContext* ReentParser::trailingReturnType() {
  TrailingReturnTypeContext *_localctx = _tracker.createInstance<TrailingReturnTypeContext>(_ctx, getState());
  enterRule(_localctx, 352, ReentParser::RuleTrailingReturnType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2091);
    match(ReentParser::Arrow);
    setState(2092);
    trailingTypeSpecifierSeq();
    setState(2094);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 211, _ctx)) {
    case 1: {
      setState(2093);
      abstractDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerOperatorContext ------------------------------------------------------------------

ReentParser::PointerOperatorContext::PointerOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::PointerOperatorContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::PointerOperatorContext::AndAnd() {
  return getToken(ReentParser::AndAnd, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::PointerOperatorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

tree::TerminalNode* ReentParser::PointerOperatorContext::Star() {
  return getToken(ReentParser::Star, 0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::PointerOperatorContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

ReentParser::CvqualifierseqContext* ReentParser::PointerOperatorContext::cvqualifierseq() {
  return getRuleContext<ReentParser::CvqualifierseqContext>(0);
}


size_t ReentParser::PointerOperatorContext::getRuleIndex() const {
  return ReentParser::RulePointerOperator;
}

void ReentParser::PointerOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerOperator(this);
}

void ReentParser::PointerOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerOperator(this);
}

ReentParser::PointerOperatorContext* ReentParser::pointerOperator() {
  PointerOperatorContext *_localctx = _tracker.createInstance<PointerOperatorContext>(_ctx, getState());
  enterRule(_localctx, 354, ReentParser::RulePointerOperator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2110);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::And:
      case ReentParser::AndAnd: {
        enterOuterAlt(_localctx, 1);
        setState(2096);
        _la = _input->LA(1);
        if (!(_la == ReentParser::And

        || _la == ReentParser::AndAnd)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2098);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 212, _ctx)) {
        case 1: {
          setState(2097);
          attributeSpecifierSeq();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Star:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(2101);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << ReentParser::Begin)
          | (1ULL << ReentParser::Clustered)
          | (1ULL << ReentParser::Common)
          | (1ULL << ReentParser::Decltype)
          | (1ULL << ReentParser::Depends)
          | (1ULL << ReentParser::End)
          | (1ULL << ReentParser::Global)
          | (1ULL << ReentParser::Gpu)
          | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
          | (1ULL << (ReentParser::Local - 65))
          | (1ULL << (ReentParser::MarkPreCondition - 65))
          | (1ULL << (ReentParser::MarkState - 65))
          | (1ULL << (ReentParser::Out - 65))
          | (1ULL << (ReentParser::Plan - 65))
          | (1ULL << (ReentParser::Reset - 65))
          | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
          | (1ULL << (ReentParser::Doublecolon - 140))
          | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
          setState(2100);
          nestedNameSpecifier(0);
        }
        setState(2103);
        match(ReentParser::Star);
        setState(2105);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
        case 1: {
          setState(2104);
          attributeSpecifierSeq();
          break;
        }

        default:
          break;
        }
        setState(2108);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
        case 1: {
          setState(2107);
          cvqualifierseq();
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvqualifierseqContext ------------------------------------------------------------------

ReentParser::CvqualifierseqContext::CvqualifierseqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::CvQualifierContext *> ReentParser::CvqualifierseqContext::cvQualifier() {
  return getRuleContexts<ReentParser::CvQualifierContext>();
}

ReentParser::CvQualifierContext* ReentParser::CvqualifierseqContext::cvQualifier(size_t i) {
  return getRuleContext<ReentParser::CvQualifierContext>(i);
}


size_t ReentParser::CvqualifierseqContext::getRuleIndex() const {
  return ReentParser::RuleCvqualifierseq;
}

void ReentParser::CvqualifierseqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCvqualifierseq(this);
}

void ReentParser::CvqualifierseqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCvqualifierseq(this);
}

ReentParser::CvqualifierseqContext* ReentParser::cvqualifierseq() {
  CvqualifierseqContext *_localctx = _tracker.createInstance<CvqualifierseqContext>(_ctx, getState());
  enterRule(_localctx, 356, ReentParser::RuleCvqualifierseq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2113); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2112);
              cvQualifier();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2115); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CvQualifierContext ------------------------------------------------------------------

ReentParser::CvQualifierContext::CvQualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::CvQualifierContext::Const() {
  return getToken(ReentParser::Const, 0);
}

tree::TerminalNode* ReentParser::CvQualifierContext::Volatile() {
  return getToken(ReentParser::Volatile, 0);
}


size_t ReentParser::CvQualifierContext::getRuleIndex() const {
  return ReentParser::RuleCvQualifier;
}

void ReentParser::CvQualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCvQualifier(this);
}

void ReentParser::CvQualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCvQualifier(this);
}

ReentParser::CvQualifierContext* ReentParser::cvQualifier() {
  CvQualifierContext *_localctx = _tracker.createInstance<CvQualifierContext>(_ctx, getState());
  enterRule(_localctx, 358, ReentParser::RuleCvQualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2117);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Const || _la == ReentParser::Volatile)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- RefqualifierContext ------------------------------------------------------------------

ReentParser::RefqualifierContext::RefqualifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::RefqualifierContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::RefqualifierContext::AndAnd() {
  return getToken(ReentParser::AndAnd, 0);
}


size_t ReentParser::RefqualifierContext::getRuleIndex() const {
  return ReentParser::RuleRefqualifier;
}

void ReentParser::RefqualifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRefqualifier(this);
}

void ReentParser::RefqualifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRefqualifier(this);
}

ReentParser::RefqualifierContext* ReentParser::refqualifier() {
  RefqualifierContext *_localctx = _tracker.createInstance<RefqualifierContext>(_ctx, getState());
  enterRule(_localctx, 360, ReentParser::RuleRefqualifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2119);
    _la = _input->LA(1);
    if (!(_la == ReentParser::And

    || _la == ReentParser::AndAnd)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DeclaratoridContext ------------------------------------------------------------------

ReentParser::DeclaratoridContext::DeclaratoridContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::IdExpressionContext* ReentParser::DeclaratoridContext::idExpression() {
  return getRuleContext<ReentParser::IdExpressionContext>(0);
}

tree::TerminalNode* ReentParser::DeclaratoridContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}


size_t ReentParser::DeclaratoridContext::getRuleIndex() const {
  return ReentParser::RuleDeclaratorid;
}

void ReentParser::DeclaratoridContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDeclaratorid(this);
}

void ReentParser::DeclaratoridContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDeclaratorid(this);
}

ReentParser::DeclaratoridContext* ReentParser::declaratorid() {
  DeclaratoridContext *_localctx = _tracker.createInstance<DeclaratoridContext>(_ctx, getState());
  enterRule(_localctx, 362, ReentParser::RuleDeclaratorid);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2122);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(2121);
      match(ReentParser::Ellipsis);
    }
    setState(2124);
    dynamic_cast<DeclaratoridContext *>(_localctx)->ident = idExpression();
     last_declarator_id = (dynamic_cast<DeclaratoridContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<DeclaratoridContext *>(_localctx)->ident->start, dynamic_cast<DeclaratoridContext *>(_localctx)->ident->stop) : nullptr); 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheTypeIdContext ------------------------------------------------------------------

ReentParser::TheTypeIdContext::TheTypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TypeSpecifierSeqContext* ReentParser::TheTypeIdContext::typeSpecifierSeq() {
  return getRuleContext<ReentParser::TypeSpecifierSeqContext>(0);
}

ReentParser::AbstractDeclaratorContext* ReentParser::TheTypeIdContext::abstractDeclarator() {
  return getRuleContext<ReentParser::AbstractDeclaratorContext>(0);
}


size_t ReentParser::TheTypeIdContext::getRuleIndex() const {
  return ReentParser::RuleTheTypeId;
}

void ReentParser::TheTypeIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTheTypeId(this);
}

void ReentParser::TheTypeIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTheTypeId(this);
}

ReentParser::TheTypeIdContext* ReentParser::theTypeId() {
  TheTypeIdContext *_localctx = _tracker.createInstance<TheTypeIdContext>(_ctx, getState());
  enterRule(_localctx, 364, ReentParser::RuleTheTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2127);
    typeSpecifierSeq();
    setState(2129);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 219, _ctx)) {
    case 1: {
      setState(2128);
      abstractDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AbstractDeclaratorContext ------------------------------------------------------------------

ReentParser::AbstractDeclaratorContext::AbstractDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::PointerAbstractDeclaratorContext* ReentParser::AbstractDeclaratorContext::pointerAbstractDeclarator() {
  return getRuleContext<ReentParser::PointerAbstractDeclaratorContext>(0);
}

ReentParser::ParametersAndQualifiersContext* ReentParser::AbstractDeclaratorContext::parametersAndQualifiers() {
  return getRuleContext<ReentParser::ParametersAndQualifiersContext>(0);
}

ReentParser::TrailingReturnTypeContext* ReentParser::AbstractDeclaratorContext::trailingReturnType() {
  return getRuleContext<ReentParser::TrailingReturnTypeContext>(0);
}

ReentParser::NoPointerAbstractDeclaratorContext* ReentParser::AbstractDeclaratorContext::noPointerAbstractDeclarator() {
  return getRuleContext<ReentParser::NoPointerAbstractDeclaratorContext>(0);
}

ReentParser::AbstractPackDeclaratorContext* ReentParser::AbstractDeclaratorContext::abstractPackDeclarator() {
  return getRuleContext<ReentParser::AbstractPackDeclaratorContext>(0);
}


size_t ReentParser::AbstractDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleAbstractDeclarator;
}

void ReentParser::AbstractDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbstractDeclarator(this);
}

void ReentParser::AbstractDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbstractDeclarator(this);
}

ReentParser::AbstractDeclaratorContext* ReentParser::abstractDeclarator() {
  AbstractDeclaratorContext *_localctx = _tracker.createInstance<AbstractDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 366, ReentParser::RuleAbstractDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2139);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2131);
      pointerAbstractDeclarator();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2133);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 220, _ctx)) {
      case 1: {
        setState(2132);
        noPointerAbstractDeclarator(0);
        break;
      }

      default:
        break;
      }
      setState(2135);
      parametersAndQualifiers();
      setState(2136);
      trailingReturnType();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2138);
      abstractPackDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PointerAbstractDeclaratorContext ------------------------------------------------------------------

ReentParser::PointerAbstractDeclaratorContext::PointerAbstractDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::NoPointerAbstractDeclaratorContext* ReentParser::PointerAbstractDeclaratorContext::noPointerAbstractDeclarator() {
  return getRuleContext<ReentParser::NoPointerAbstractDeclaratorContext>(0);
}

std::vector<ReentParser::PointerOperatorContext *> ReentParser::PointerAbstractDeclaratorContext::pointerOperator() {
  return getRuleContexts<ReentParser::PointerOperatorContext>();
}

ReentParser::PointerOperatorContext* ReentParser::PointerAbstractDeclaratorContext::pointerOperator(size_t i) {
  return getRuleContext<ReentParser::PointerOperatorContext>(i);
}


size_t ReentParser::PointerAbstractDeclaratorContext::getRuleIndex() const {
  return ReentParser::RulePointerAbstractDeclarator;
}

void ReentParser::PointerAbstractDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPointerAbstractDeclarator(this);
}

void ReentParser::PointerAbstractDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPointerAbstractDeclarator(this);
}

ReentParser::PointerAbstractDeclaratorContext* ReentParser::pointerAbstractDeclarator() {
  PointerAbstractDeclaratorContext *_localctx = _tracker.createInstance<PointerAbstractDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 368, ReentParser::RulePointerAbstractDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(2150);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftParen:
      case ReentParser::LeftBracket: {
        enterOuterAlt(_localctx, 1);
        setState(2141);
        noPointerAbstractDeclarator(0);
        break;
      }

      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Star:
      case ReentParser::And:
      case ReentParser::AndAnd:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 2);
        setState(2143); 
        _errHandler->sync(this);
        alt = 1;
        do {
          switch (alt) {
            case 1: {
                  setState(2142);
                  pointerOperator();
                  break;
                }

          default:
            throw NoViableAltException(this);
          }
          setState(2145); 
          _errHandler->sync(this);
          alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx);
        } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
        setState(2148);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 223, _ctx)) {
        case 1: {
          setState(2147);
          noPointerAbstractDeclarator(0);
          break;
        }

        default:
          break;
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoPointerAbstractDeclaratorContext ------------------------------------------------------------------

ReentParser::NoPointerAbstractDeclaratorContext::NoPointerAbstractDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ParametersAndQualifiersContext* ReentParser::NoPointerAbstractDeclaratorContext::parametersAndQualifiers() {
  return getRuleContext<ReentParser::ParametersAndQualifiersContext>(0);
}

std::vector<tree::TerminalNode *> ReentParser::NoPointerAbstractDeclaratorContext::LeftBracket() {
  return getTokens(ReentParser::LeftBracket);
}

tree::TerminalNode* ReentParser::NoPointerAbstractDeclaratorContext::LeftBracket(size_t i) {
  return getToken(ReentParser::LeftBracket, i);
}

std::vector<tree::TerminalNode *> ReentParser::NoPointerAbstractDeclaratorContext::RightBracket() {
  return getTokens(ReentParser::RightBracket);
}

tree::TerminalNode* ReentParser::NoPointerAbstractDeclaratorContext::RightBracket(size_t i) {
  return getToken(ReentParser::RightBracket, i);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::NoPointerAbstractDeclaratorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

std::vector<ReentParser::ConstantExpressionContext *> ReentParser::NoPointerAbstractDeclaratorContext::constantExpression() {
  return getRuleContexts<ReentParser::ConstantExpressionContext>();
}

ReentParser::ConstantExpressionContext* ReentParser::NoPointerAbstractDeclaratorContext::constantExpression(size_t i) {
  return getRuleContext<ReentParser::ConstantExpressionContext>(i);
}

tree::TerminalNode* ReentParser::NoPointerAbstractDeclaratorContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::PointerAbstractDeclaratorContext* ReentParser::NoPointerAbstractDeclaratorContext::pointerAbstractDeclarator() {
  return getRuleContext<ReentParser::PointerAbstractDeclaratorContext>(0);
}

tree::TerminalNode* ReentParser::NoPointerAbstractDeclaratorContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

std::vector<ReentParser::NoPointerAbstractDeclaratorContext *> ReentParser::NoPointerAbstractDeclaratorContext::noPointerAbstractDeclarator() {
  return getRuleContexts<ReentParser::NoPointerAbstractDeclaratorContext>();
}

ReentParser::NoPointerAbstractDeclaratorContext* ReentParser::NoPointerAbstractDeclaratorContext::noPointerAbstractDeclarator(size_t i) {
  return getRuleContext<ReentParser::NoPointerAbstractDeclaratorContext>(i);
}


size_t ReentParser::NoPointerAbstractDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleNoPointerAbstractDeclarator;
}

void ReentParser::NoPointerAbstractDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoPointerAbstractDeclarator(this);
}

void ReentParser::NoPointerAbstractDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoPointerAbstractDeclarator(this);
}


ReentParser::NoPointerAbstractDeclaratorContext* ReentParser::noPointerAbstractDeclarator() {
   return noPointerAbstractDeclarator(0);
}

ReentParser::NoPointerAbstractDeclaratorContext* ReentParser::noPointerAbstractDeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ReentParser::NoPointerAbstractDeclaratorContext *_localctx = _tracker.createInstance<NoPointerAbstractDeclaratorContext>(_ctx, parentState);
  ReentParser::NoPointerAbstractDeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 370;
  enterRecursionRule(_localctx, 370, ReentParser::RuleNoPointerAbstractDeclarator, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2170);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 228, _ctx)) {
    case 1: {
      setState(2153);
      parametersAndQualifiers();
      break;
    }

    case 2: {
      setState(2159); 
      _errHandler->sync(this);
      alt = 1;
      do {
        switch (alt) {
          case 1: {
                setState(2154);
                match(ReentParser::LeftBracket);
                setState(2156);
                _errHandler->sync(this);

                switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
                case 1: {
                  setState(2155);
                  constantExpression();
                  break;
                }

                default:
                  break;
                }
                setState(2158);
                match(ReentParser::RightBracket);
                break;
              }

        default:
          throw NoViableAltException(this);
        }
        setState(2161); 
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx);
      } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
      setState(2164);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
      case 1: {
        setState(2163);
        attributeSpecifierSeq();
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      setState(2166);
      match(ReentParser::LeftParen);
      setState(2167);
      pointerAbstractDeclarator();
      setState(2168);
      match(ReentParser::RightParen);
      break;
    }

    default:
      break;
    }
    _ctx->stop = _input->LT(-1);
    setState(2191);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NoPointerAbstractDeclaratorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNoPointerAbstractDeclarator);
        setState(2172);

        if (!(precpred(_ctx, 4))) throw FailedPredicateException(this, "precpred(_ctx, 4)");
        setState(2187);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 232, _ctx)) {
        case 1: {
          setState(2173);
          parametersAndQualifiers();
          break;
        }

        case 2: {
          setState(2174);
          noPointerAbstractDeclarator(0);
          setState(2180); 
          _errHandler->sync(this);
          alt = 1;
          do {
            switch (alt) {
              case 1: {
                    setState(2175);
                    match(ReentParser::LeftBracket);
                    setState(2177);
                    _errHandler->sync(this);

                    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 229, _ctx)) {
                    case 1: {
                      setState(2176);
                      constantExpression();
                      break;
                    }

                    default:
                      break;
                    }
                    setState(2179);
                    match(ReentParser::RightBracket);
                    break;
                  }

            default:
              throw NoViableAltException(this);
            }
            setState(2182); 
            _errHandler->sync(this);
            alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 230, _ctx);
          } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
          setState(2185);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 231, _ctx)) {
          case 1: {
            setState(2184);
            attributeSpecifierSeq();
            break;
          }

          default:
            break;
          }
          break;
        }

        default:
          break;
        } 
      }
      setState(2193);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 233, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- AbstractPackDeclaratorContext ------------------------------------------------------------------

ReentParser::AbstractPackDeclaratorContext::AbstractPackDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::NoPointerAbstractPackDeclaratorContext* ReentParser::AbstractPackDeclaratorContext::noPointerAbstractPackDeclarator() {
  return getRuleContext<ReentParser::NoPointerAbstractPackDeclaratorContext>(0);
}

std::vector<ReentParser::PointerOperatorContext *> ReentParser::AbstractPackDeclaratorContext::pointerOperator() {
  return getRuleContexts<ReentParser::PointerOperatorContext>();
}

ReentParser::PointerOperatorContext* ReentParser::AbstractPackDeclaratorContext::pointerOperator(size_t i) {
  return getRuleContext<ReentParser::PointerOperatorContext>(i);
}


size_t ReentParser::AbstractPackDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleAbstractPackDeclarator;
}

void ReentParser::AbstractPackDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAbstractPackDeclarator(this);
}

void ReentParser::AbstractPackDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAbstractPackDeclarator(this);
}

ReentParser::AbstractPackDeclaratorContext* ReentParser::abstractPackDeclarator() {
  AbstractPackDeclaratorContext *_localctx = _tracker.createInstance<AbstractPackDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 372, ReentParser::RuleAbstractPackDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2197);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
      | (1ULL << (ReentParser::Star - 140))
      | (1ULL << (ReentParser::And - 140))
      | (1ULL << (ReentParser::AndAnd - 140))
      | (1ULL << (ReentParser::Doublecolon - 140))
      | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
      setState(2194);
      pointerOperator();
      setState(2199);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(2200);
    noPointerAbstractPackDeclarator(0);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoPointerAbstractPackDeclaratorContext ------------------------------------------------------------------

ReentParser::NoPointerAbstractPackDeclaratorContext::NoPointerAbstractPackDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NoPointerAbstractPackDeclaratorContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}

ReentParser::NoPointerAbstractPackDeclaratorContext* ReentParser::NoPointerAbstractPackDeclaratorContext::noPointerAbstractPackDeclarator() {
  return getRuleContext<ReentParser::NoPointerAbstractPackDeclaratorContext>(0);
}

ReentParser::ParametersAndQualifiersContext* ReentParser::NoPointerAbstractPackDeclaratorContext::parametersAndQualifiers() {
  return getRuleContext<ReentParser::ParametersAndQualifiersContext>(0);
}

tree::TerminalNode* ReentParser::NoPointerAbstractPackDeclaratorContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::NoPointerAbstractPackDeclaratorContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::NoPointerAbstractPackDeclaratorContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::NoPointerAbstractPackDeclaratorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::NoPointerAbstractPackDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleNoPointerAbstractPackDeclarator;
}

void ReentParser::NoPointerAbstractPackDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoPointerAbstractPackDeclarator(this);
}

void ReentParser::NoPointerAbstractPackDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoPointerAbstractPackDeclarator(this);
}


ReentParser::NoPointerAbstractPackDeclaratorContext* ReentParser::noPointerAbstractPackDeclarator() {
   return noPointerAbstractPackDeclarator(0);
}

ReentParser::NoPointerAbstractPackDeclaratorContext* ReentParser::noPointerAbstractPackDeclarator(int precedence) {
  ParserRuleContext *parentContext = _ctx;
  size_t parentState = getState();
  ReentParser::NoPointerAbstractPackDeclaratorContext *_localctx = _tracker.createInstance<NoPointerAbstractPackDeclaratorContext>(_ctx, parentState);
  ReentParser::NoPointerAbstractPackDeclaratorContext *previousContext = _localctx;
  (void)previousContext; // Silence compiler, in case the context is not used by generated code.
  size_t startState = 374;
  enterRecursionRule(_localctx, 374, ReentParser::RuleNoPointerAbstractPackDeclarator, precedence);

    

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    unrollRecursionContexts(parentContext);
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2203);
    match(ReentParser::Ellipsis);
    _ctx->stop = _input->LT(-1);
    setState(2219);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        if (!_parseListeners.empty())
          triggerExitRuleEvent();
        previousContext = _localctx;
        _localctx = _tracker.createInstance<NoPointerAbstractPackDeclaratorContext>(parentContext, parentState);
        pushNewRecursionContext(_localctx, startState, RuleNoPointerAbstractPackDeclarator);
        setState(2205);

        if (!(precpred(_ctx, 2))) throw FailedPredicateException(this, "precpred(_ctx, 2)");
        setState(2215);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case ReentParser::LeftParen: {
            setState(2206);
            parametersAndQualifiers();
            break;
          }

          case ReentParser::LeftBracket: {
            setState(2207);
            match(ReentParser::LeftBracket);
            setState(2209);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 235, _ctx)) {
            case 1: {
              setState(2208);
              constantExpression();
              break;
            }

            default:
              break;
            }
            setState(2211);
            match(ReentParser::RightBracket);
            setState(2213);
            _errHandler->sync(this);

            switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 236, _ctx)) {
            case 1: {
              setState(2212);
              attributeSpecifierSeq();
              break;
            }

            default:
              break;
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        } 
      }
      setState(2221);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 238, _ctx);
    }
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }
  return _localctx;
}

//----------------- ParameterDeclarationClauseContext ------------------------------------------------------------------

ReentParser::ParameterDeclarationClauseContext::ParameterDeclarationClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ParameterDeclarationListContext* ReentParser::ParameterDeclarationClauseContext::parameterDeclarationList() {
  return getRuleContext<ReentParser::ParameterDeclarationListContext>(0);
}

tree::TerminalNode* ReentParser::ParameterDeclarationClauseContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}

tree::TerminalNode* ReentParser::ParameterDeclarationClauseContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}


size_t ReentParser::ParameterDeclarationClauseContext::getRuleIndex() const {
  return ReentParser::RuleParameterDeclarationClause;
}

void ReentParser::ParameterDeclarationClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterDeclarationClause(this);
}

void ReentParser::ParameterDeclarationClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterDeclarationClause(this);
}

ReentParser::ParameterDeclarationClauseContext* ReentParser::parameterDeclarationClause() {
  ParameterDeclarationClauseContext *_localctx = _tracker.createInstance<ParameterDeclarationClauseContext>(_ctx, getState());
  enterRule(_localctx, 376, ReentParser::RuleParameterDeclarationClause);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2222);
    parameterDeclarationList();
    setState(2227);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Comma

    || _la == ReentParser::Ellipsis) {
      setState(2224);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Comma) {
        setState(2223);
        match(ReentParser::Comma);
      }
      setState(2226);
      match(ReentParser::Ellipsis);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationListContext ------------------------------------------------------------------

ReentParser::ParameterDeclarationListContext::ParameterDeclarationListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::ParameterDeclarationContext *> ReentParser::ParameterDeclarationListContext::parameterDeclaration() {
  return getRuleContexts<ReentParser::ParameterDeclarationContext>();
}

ReentParser::ParameterDeclarationContext* ReentParser::ParameterDeclarationListContext::parameterDeclaration(size_t i) {
  return getRuleContext<ReentParser::ParameterDeclarationContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::ParameterDeclarationListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::ParameterDeclarationListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::ParameterDeclarationListContext::getRuleIndex() const {
  return ReentParser::RuleParameterDeclarationList;
}

void ReentParser::ParameterDeclarationListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterDeclarationList(this);
}

void ReentParser::ParameterDeclarationListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterDeclarationList(this);
}

ReentParser::ParameterDeclarationListContext* ReentParser::parameterDeclarationList() {
  ParameterDeclarationListContext *_localctx = _tracker.createInstance<ParameterDeclarationListContext>(_ctx, getState());
  enterRule(_localctx, 378, ReentParser::RuleParameterDeclarationList);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2229);
    parameterDeclaration();
    setState(2234);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2230);
        match(ReentParser::Comma);
        setState(2231);
        parameterDeclaration(); 
      }
      setState(2236);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 241, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ParameterDeclarationContext ------------------------------------------------------------------

ReentParser::ParameterDeclarationContext::ParameterDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclSpecifierSeqContext* ReentParser::ParameterDeclarationContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ParameterDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::DeclaratorContext* ReentParser::ParameterDeclarationContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

tree::TerminalNode* ReentParser::ParameterDeclarationContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::InitializerClauseContext* ReentParser::ParameterDeclarationContext::initializerClause() {
  return getRuleContext<ReentParser::InitializerClauseContext>(0);
}

ReentParser::AbstractDeclaratorContext* ReentParser::ParameterDeclarationContext::abstractDeclarator() {
  return getRuleContext<ReentParser::AbstractDeclaratorContext>(0);
}


size_t ReentParser::ParameterDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleParameterDeclaration;
}

void ReentParser::ParameterDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterParameterDeclaration(this);
}

void ReentParser::ParameterDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitParameterDeclaration(this);
}

ReentParser::ParameterDeclarationContext* ReentParser::parameterDeclaration() {
  ParameterDeclarationContext *_localctx = _tracker.createInstance<ParameterDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 380, ReentParser::RuleParameterDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2238);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(2237);
      attributeSpecifierSeq();
    }
    setState(2240);
    declSpecifierSeq();

    setState(2245);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 244, _ctx)) {
    case 1: {
      setState(2241);
      declarator();
      break;
    }

    case 2: {
      setState(2243);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 243, _ctx)) {
      case 1: {
        setState(2242);
        abstractDeclarator();
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2249);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Assign) {
      setState(2247);
      match(ReentParser::Assign);
      setState(2248);
      initializerClause();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReenterableDefinitionContext ------------------------------------------------------------------

ReentParser::ReenterableDefinitionContext::ReenterableDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ReenterableHeadContext* ReentParser::ReenterableDefinitionContext::reenterableHead() {
  return getRuleContext<ReentParser::ReenterableHeadContext>(0);
}

ReentParser::CompoundStatementContext* ReentParser::ReenterableDefinitionContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}


size_t ReentParser::ReenterableDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleReenterableDefinition;
}

void ReentParser::ReenterableDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReenterableDefinition(this);
}

void ReentParser::ReenterableDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReenterableDefinition(this);
}

ReentParser::ReenterableDefinitionContext* ReentParser::reenterableDefinition() {
  ReenterableDefinitionContext *_localctx = _tracker.createInstance<ReenterableDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 382, ReentParser::RuleReenterableDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2251);
    reenterableHead();
     reenterables[last_reent_chain_declarator] =
    		(reent_static ? static_flag : 0); 
    setState(2253);
    compoundStatement();
     in_reenterable = false; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReenterableDeclarationContext ------------------------------------------------------------------

ReentParser::ReenterableDeclarationContext::ReenterableDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ReenterableHeadContext* ReentParser::ReenterableDeclarationContext::reenterableHead() {
  return getRuleContext<ReentParser::ReenterableHeadContext>(0);
}

tree::TerminalNode* ReentParser::ReenterableDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::ReenterableDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleReenterableDeclaration;
}

void ReentParser::ReenterableDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReenterableDeclaration(this);
}

void ReentParser::ReenterableDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReenterableDeclaration(this);
}

ReentParser::ReenterableDeclarationContext* ReentParser::reenterableDeclaration() {
  ReenterableDeclarationContext *_localctx = _tracker.createInstance<ReenterableDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 384, ReentParser::RuleReenterableDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2256);
    reenterableHead();
     in_reenterable = false; reenterables[last_reent_chain_declarator] =
    		(reent_static ? static_flag : 0); 
    setState(2258);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ReenterableHeadContext ------------------------------------------------------------------

ReentParser::ReenterableHeadContext::ReenterableHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ReenterableHeadContext::Reenterable() {
  return getToken(ReentParser::Reenterable, 0);
}

ReentParser::Reent_chain_headerContext* ReentParser::ReenterableHeadContext::reent_chain_header() {
  return getRuleContext<ReentParser::Reent_chain_headerContext>(0);
}

tree::TerminalNode* ReentParser::ReenterableHeadContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::ReenterableHeadContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::ReenterableHeadContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

tree::TerminalNode* ReentParser::ReenterableHeadContext::Static() {
  return getToken(ReentParser::Static, 0);
}

std::vector<ReentParser::Reent_chain_predicateContext *> ReentParser::ReenterableHeadContext::reent_chain_predicate() {
  return getRuleContexts<ReentParser::Reent_chain_predicateContext>();
}

ReentParser::Reent_chain_predicateContext* ReentParser::ReenterableHeadContext::reent_chain_predicate(size_t i) {
  return getRuleContext<ReentParser::Reent_chain_predicateContext>(i);
}

tree::TerminalNode* ReentParser::ReenterableHeadContext::Local() {
  return getToken(ReentParser::Local, 0);
}

tree::TerminalNode* ReentParser::ReenterableHeadContext::Global() {
  return getToken(ReentParser::Global, 0);
}


size_t ReentParser::ReenterableHeadContext::getRuleIndex() const {
  return ReentParser::RuleReenterableHead;
}

void ReentParser::ReenterableHeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReenterableHead(this);
}

void ReentParser::ReenterableHeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReenterableHead(this);
}

ReentParser::ReenterableHeadContext* ReentParser::reenterableHead() {
  ReenterableHeadContext *_localctx = _tracker.createInstance<ReenterableHeadContext>(_ctx, getState());
  enterRule(_localctx, 386, ReentParser::RuleReenterableHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2260);
    match(ReentParser::Reenterable);
    setState(2265);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::LeftBracket) {
      setState(2261);
      match(ReentParser::LeftBracket);
      setState(2262);
      constantExpression();
      setState(2263);
      match(ReentParser::RightBracket);
    }
     in_reenterable = true; reent_static = _input->LT(1)->getText() == "static"; 
    setState(2272);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 248, _ctx)) {
    case 1: {
      setState(2268);
      match(ReentParser::Static);
      setState(2270);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 247, _ctx)) {
      case 1: {
        setState(2269);
        _la = _input->LA(1);
        if (!(_la == ReentParser::Global

        || _la == ReentParser::Local)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        break;
      }

      default:
        break;
      }
      break;
    }

    default:
      break;
    }
    setState(2274);
    reent_chain_header();
    setState(2278);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Depends || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (ReentParser::If - 64))
      | (1ULL << (ReentParser::Reset - 64))
      | (1ULL << (ReentParser::Set - 64)))) != 0)) {
      setState(2275);
      reent_chain_predicate();
      setState(2280);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_chain_headerContext ------------------------------------------------------------------

ReentParser::Reent_chain_headerContext::Reent_chain_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclaratoridContext* ReentParser::Reent_chain_headerContext::declaratorid() {
  return getRuleContext<ReentParser::DeclaratoridContext>(0);
}

tree::TerminalNode* ReentParser::Reent_chain_headerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_chain_headerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::Reent_chain_headerContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::Reent_chain_paramsContext* ReentParser::Reent_chain_headerContext::reent_chain_params() {
  return getRuleContext<ReentParser::Reent_chain_paramsContext>(0);
}


size_t ReentParser::Reent_chain_headerContext::getRuleIndex() const {
  return ReentParser::RuleReent_chain_header;
}

void ReentParser::Reent_chain_headerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_chain_header(this);
}

void ReentParser::Reent_chain_headerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_chain_header(this);
}

ReentParser::Reent_chain_headerContext* ReentParser::reent_chain_header() {
  Reent_chain_headerContext *_localctx = _tracker.createInstance<Reent_chain_headerContext>(_ctx, getState());
  enterRule(_localctx, 388, ReentParser::RuleReent_chain_header);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2282);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 250, _ctx)) {
    case 1: {
      setState(2281);
      declSpecifierSeq();
      break;
    }

    default:
      break;
    }
    setState(2284);
    declaratorid();

    		last_reent_chain_declarator = last_declarator_id;
    		_reent_chain_params.clear();
    		_reent_planned_refs.clear();
    	
    setState(2286);
    match(ReentParser::LeftParen);
    setState(2288);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::GpuGlobal)
      | (1ULL << ReentParser::GpuLocal)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Reduction - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(2287);
      reent_chain_params();
    }
    setState(2290);
    match(ReentParser::RightParen);

    		for (const std::string & id : _reent_planned_refs)
    			if (_reent_chain_params.find(id) == _reent_chain_params.end())
    				throw FailedPredicateException(this,
    					std::string("__planned__[.|->]")+id+
    					std::string(" : there is no parameter ")+id+
    					std::string(" in current Chain/Reenterable header"));
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_chain_paramsContext ------------------------------------------------------------------

ReentParser::Reent_chain_paramsContext::Reent_chain_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::Reent_chain_paramContext *> ReentParser::Reent_chain_paramsContext::reent_chain_param() {
  return getRuleContexts<ReentParser::Reent_chain_paramContext>();
}

ReentParser::Reent_chain_paramContext* ReentParser::Reent_chain_paramsContext::reent_chain_param(size_t i) {
  return getRuleContext<ReentParser::Reent_chain_paramContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::Reent_chain_paramsContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::Reent_chain_paramsContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::Reent_chain_paramsContext::getRuleIndex() const {
  return ReentParser::RuleReent_chain_params;
}

void ReentParser::Reent_chain_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_chain_params(this);
}

void ReentParser::Reent_chain_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_chain_params(this);
}

ReentParser::Reent_chain_paramsContext* ReentParser::reent_chain_params() {
  Reent_chain_paramsContext *_localctx = _tracker.createInstance<Reent_chain_paramsContext>(_ctx, getState());
  enterRule(_localctx, 390, ReentParser::RuleReent_chain_params);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2293);
    reent_chain_param();
    setState(2298);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2294);
      match(ReentParser::Comma);
      setState(2295);
      reent_chain_param();
      setState(2300);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_chain_paramContext ------------------------------------------------------------------

ReentParser::Reent_chain_paramContext::Reent_chain_paramContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclaratorContext* ReentParser::Reent_chain_paramContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

ReentParser::Reent_recursive_typeContext* ReentParser::Reent_chain_paramContext::reent_recursive_type() {
  return getRuleContext<ReentParser::Reent_recursive_typeContext>(0);
}

ReentParser::Reent_reductionContext* ReentParser::Reent_chain_paramContext::reent_reduction() {
  return getRuleContext<ReentParser::Reent_reductionContext>(0);
}

ReentParser::Reent_gpu_globalContext* ReentParser::Reent_chain_paramContext::reent_gpu_global() {
  return getRuleContext<ReentParser::Reent_gpu_globalContext>(0);
}

ReentParser::Reent_gpu_localContext* ReentParser::Reent_chain_paramContext::reent_gpu_local() {
  return getRuleContext<ReentParser::Reent_gpu_localContext>(0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::Reent_chain_paramContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}


size_t ReentParser::Reent_chain_paramContext::getRuleIndex() const {
  return ReentParser::RuleReent_chain_param;
}

void ReentParser::Reent_chain_paramContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_chain_param(this);
}

void ReentParser::Reent_chain_paramContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_chain_param(this);
}

ReentParser::Reent_chain_paramContext* ReentParser::reent_chain_param() {
  Reent_chain_paramContext *_localctx = _tracker.createInstance<Reent_chain_paramContext>(_ctx, getState());
  enterRule(_localctx, 392, ReentParser::RuleReent_chain_param);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2305);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 253, _ctx)) {
    case 1: {
      setState(2301);
      reent_recursive_type();
      break;
    }

    case 2: {
      setState(2302);
      reent_reduction();
      break;
    }

    case 3: {
      setState(2303);
      reent_gpu_global();
      break;
    }

    case 4: {
      setState(2304);
      reent_gpu_local();
      break;
    }

    default:
      break;
    }
    setState(2308);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 254, _ctx)) {
    case 1: {
      setState(2307);
      declSpecifierSeq();
      break;
    }

    default:
      break;
    }
    setState(2310);
    declarator();

    		_reent_chain_params.insert(last_declarator_id);
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_recursive_typeContext ------------------------------------------------------------------

ReentParser::Reent_recursive_typeContext::Reent_recursive_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_recursive_typeContext::Id() {
  return getToken(ReentParser::Id, 0);
}

tree::TerminalNode* ReentParser::Reent_recursive_typeContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::Reent_recursive_typeContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_recursive_typeContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_recursive_typeContext::getRuleIndex() const {
  return ReentParser::RuleReent_recursive_type;
}

void ReentParser::Reent_recursive_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_recursive_type(this);
}

void ReentParser::Reent_recursive_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_recursive_type(this);
}

ReentParser::Reent_recursive_typeContext* ReentParser::reent_recursive_type() {
  Reent_recursive_typeContext *_localctx = _tracker.createInstance<Reent_recursive_typeContext>(_ctx, getState());
  enterRule(_localctx, 394, ReentParser::RuleReent_recursive_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2313);
    match(ReentParser::Id);
    setState(2314);
    match(ReentParser::LeftParen);
    setState(2315);
    constantExpression();
    setState(2316);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_reductionContext ------------------------------------------------------------------

ReentParser::Reent_reductionContext::Reent_reductionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_reductionContext::Reduction() {
  return getToken(ReentParser::Reduction, 0);
}

tree::TerminalNode* ReentParser::Reent_reductionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Reent_reductionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::Reduction_symbolContext* ReentParser::Reent_reductionContext::reduction_symbol() {
  return getRuleContext<ReentParser::Reduction_symbolContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::Reent_reductionContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::Reent_reductionContext::getRuleIndex() const {
  return ReentParser::RuleReent_reduction;
}

void ReentParser::Reent_reductionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_reduction(this);
}

void ReentParser::Reent_reductionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_reduction(this);
}

ReentParser::Reent_reductionContext* ReentParser::reent_reduction() {
  Reent_reductionContext *_localctx = _tracker.createInstance<Reent_reductionContext>(_ctx, getState());
  enterRule(_localctx, 396, ReentParser::RuleReent_reduction);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2318);
    match(ReentParser::Reduction);
    setState(2319);
    match(ReentParser::LeftParen);
    setState(2322);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Plus:
      case ReentParser::Minus:
      case ReentParser::Star:
      case ReentParser::Caret:
      case ReentParser::And:
      case ReentParser::Or:
      case ReentParser::AndAnd:
      case ReentParser::OrOr: {
        setState(2320);
        reduction_symbol();
        break;
      }

      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Identifier: {
        setState(2321);
        anyIdentifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2324);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_gpu_globalContext ------------------------------------------------------------------

ReentParser::Reent_gpu_globalContext::Reent_gpu_globalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_gpu_globalContext::GpuGlobal() {
  return getToken(ReentParser::GpuGlobal, 0);
}

tree::TerminalNode* ReentParser::Reent_gpu_globalContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::Reent_gpu_globalContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_gpu_globalContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_gpu_globalContext::getRuleIndex() const {
  return ReentParser::RuleReent_gpu_global;
}

void ReentParser::Reent_gpu_globalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_gpu_global(this);
}

void ReentParser::Reent_gpu_globalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_gpu_global(this);
}

ReentParser::Reent_gpu_globalContext* ReentParser::reent_gpu_global() {
  Reent_gpu_globalContext *_localctx = _tracker.createInstance<Reent_gpu_globalContext>(_ctx, getState());
  enterRule(_localctx, 398, ReentParser::RuleReent_gpu_global);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2326);
    match(ReentParser::GpuGlobal);

    		if (!allow_vectorized)
    			throw FailedPredicateException(this, "'_global(N)' without '#pragma plan vectorized'");
    	
    setState(2328);
    match(ReentParser::LeftParen);
    setState(2329);
    assignmentExpression();
    setState(2330);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_gpu_localContext ------------------------------------------------------------------

ReentParser::Reent_gpu_localContext::Reent_gpu_localContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_gpu_localContext::GpuLocal() {
  return getToken(ReentParser::GpuLocal, 0);
}

tree::TerminalNode* ReentParser::Reent_gpu_localContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::Reent_gpu_localContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_gpu_localContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_gpu_localContext::getRuleIndex() const {
  return ReentParser::RuleReent_gpu_local;
}

void ReentParser::Reent_gpu_localContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_gpu_local(this);
}

void ReentParser::Reent_gpu_localContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_gpu_local(this);
}

ReentParser::Reent_gpu_localContext* ReentParser::reent_gpu_local() {
  Reent_gpu_localContext *_localctx = _tracker.createInstance<Reent_gpu_localContext>(_ctx, getState());
  enterRule(_localctx, 400, ReentParser::RuleReent_gpu_local);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2332);
    match(ReentParser::GpuLocal);

    		if (!allow_vectorized)
    			throw FailedPredicateException(this, "'_local(N)' without '#pragma plan vectorized'");
    		_in_gpu_local = true;
    	
    setState(2334);
    match(ReentParser::LeftParen);
    setState(2335);
    assignmentExpression();
    setState(2336);
    match(ReentParser::RightParen);

    		_in_gpu_local = false;
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reduction_symbolContext ------------------------------------------------------------------

ReentParser::Reduction_symbolContext::Reduction_symbolContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::Plus() {
  return getToken(ReentParser::Plus, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::Minus() {
  return getToken(ReentParser::Minus, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::Star() {
  return getToken(ReentParser::Star, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::Caret() {
  return getToken(ReentParser::Caret, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::AndAnd() {
  return getToken(ReentParser::AndAnd, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::OrOr() {
  return getToken(ReentParser::OrOr, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::Reduction_symbolContext::Or() {
  return getToken(ReentParser::Or, 0);
}


size_t ReentParser::Reduction_symbolContext::getRuleIndex() const {
  return ReentParser::RuleReduction_symbol;
}

void ReentParser::Reduction_symbolContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReduction_symbol(this);
}

void ReentParser::Reduction_symbolContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReduction_symbol(this);
}

ReentParser::Reduction_symbolContext* ReentParser::reduction_symbol() {
  Reduction_symbolContext *_localctx = _tracker.createInstance<Reduction_symbolContext>(_ctx, getState());
  enterRule(_localctx, 402, ReentParser::RuleReduction_symbol);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2339);
    _la = _input->LA(1);
    if (!(((((_la - 156) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 156)) & ((1ULL << (ReentParser::Plus - 156))
      | (1ULL << (ReentParser::Minus - 156))
      | (1ULL << (ReentParser::Star - 156))
      | (1ULL << (ReentParser::Caret - 156))
      | (1ULL << (ReentParser::And - 156))
      | (1ULL << (ReentParser::Or - 156))
      | (1ULL << (ReentParser::AndAnd - 156))
      | (1ULL << (ReentParser::OrOr - 156)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_chain_predicateContext ------------------------------------------------------------------

ReentParser::Reent_chain_predicateContext::Reent_chain_predicateContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Reent_predicate_setContext* ReentParser::Reent_chain_predicateContext::reent_predicate_set() {
  return getRuleContext<ReentParser::Reent_predicate_setContext>(0);
}

ReentParser::Reent_predicate_resetContext* ReentParser::Reent_chain_predicateContext::reent_predicate_reset() {
  return getRuleContext<ReentParser::Reent_predicate_resetContext>(0);
}

ReentParser::Reent_predicate_dependsContext* ReentParser::Reent_chain_predicateContext::reent_predicate_depends() {
  return getRuleContext<ReentParser::Reent_predicate_dependsContext>(0);
}

ReentParser::Reent_predicate_ifContext* ReentParser::Reent_chain_predicateContext::reent_predicate_if() {
  return getRuleContext<ReentParser::Reent_predicate_ifContext>(0);
}


size_t ReentParser::Reent_chain_predicateContext::getRuleIndex() const {
  return ReentParser::RuleReent_chain_predicate;
}

void ReentParser::Reent_chain_predicateContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_chain_predicate(this);
}

void ReentParser::Reent_chain_predicateContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_chain_predicate(this);
}

ReentParser::Reent_chain_predicateContext* ReentParser::reent_chain_predicate() {
  Reent_chain_predicateContext *_localctx = _tracker.createInstance<Reent_chain_predicateContext>(_ctx, getState());
  enterRule(_localctx, 404, ReentParser::RuleReent_chain_predicate);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2345);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Set: {
        enterOuterAlt(_localctx, 1);
        setState(2341);
        reent_predicate_set();
        break;
      }

      case ReentParser::Reset: {
        enterOuterAlt(_localctx, 2);
        setState(2342);
        reent_predicate_reset();
        break;
      }

      case ReentParser::Depends: {
        enterOuterAlt(_localctx, 3);
        setState(2343);
        reent_predicate_depends();
        break;
      }

      case ReentParser::If: {
        enterOuterAlt(_localctx, 4);
        setState(2344);
        reent_predicate_if();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_predicate_setContext ------------------------------------------------------------------

ReentParser::Reent_predicate_setContext::Reent_predicate_setContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_predicate_setContext::Set() {
  return getToken(ReentParser::Set, 0);
}

tree::TerminalNode* ReentParser::Reent_predicate_setContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::Reent_predicate_setContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_predicate_setContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_predicate_setContext::getRuleIndex() const {
  return ReentParser::RuleReent_predicate_set;
}

void ReentParser::Reent_predicate_setContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_predicate_set(this);
}

void ReentParser::Reent_predicate_setContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_predicate_set(this);
}

ReentParser::Reent_predicate_setContext* ReentParser::reent_predicate_set() {
  Reent_predicate_setContext *_localctx = _tracker.createInstance<Reent_predicate_setContext>(_ctx, getState());
  enterRule(_localctx, 406, ReentParser::RuleReent_predicate_set);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2347);
    match(ReentParser::Set);
    setState(2348);
    match(ReentParser::LeftParen);
    setState(2349);
    expression();
    setState(2350);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_predicate_resetContext ------------------------------------------------------------------

ReentParser::Reent_predicate_resetContext::Reent_predicate_resetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_predicate_resetContext::Reset() {
  return getToken(ReentParser::Reset, 0);
}

tree::TerminalNode* ReentParser::Reent_predicate_resetContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::Reent_predicate_resetContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_predicate_resetContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_predicate_resetContext::getRuleIndex() const {
  return ReentParser::RuleReent_predicate_reset;
}

void ReentParser::Reent_predicate_resetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_predicate_reset(this);
}

void ReentParser::Reent_predicate_resetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_predicate_reset(this);
}

ReentParser::Reent_predicate_resetContext* ReentParser::reent_predicate_reset() {
  Reent_predicate_resetContext *_localctx = _tracker.createInstance<Reent_predicate_resetContext>(_ctx, getState());
  enterRule(_localctx, 408, ReentParser::RuleReent_predicate_reset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2352);
    match(ReentParser::Reset);
    setState(2353);
    match(ReentParser::LeftParen);
    setState(2354);
    expression();
    setState(2355);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_predicate_dependsContext ------------------------------------------------------------------

ReentParser::Reent_predicate_dependsContext::Reent_predicate_dependsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_predicate_dependsContext::Depends() {
  return getToken(ReentParser::Depends, 0);
}

tree::TerminalNode* ReentParser::Reent_predicate_dependsContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::Reent_dependentsContext* ReentParser::Reent_predicate_dependsContext::reent_dependents() {
  return getRuleContext<ReentParser::Reent_dependentsContext>(0);
}

tree::TerminalNode* ReentParser::Reent_predicate_dependsContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::Reent_predicate_dependsContext::getRuleIndex() const {
  return ReentParser::RuleReent_predicate_depends;
}

void ReentParser::Reent_predicate_dependsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_predicate_depends(this);
}

void ReentParser::Reent_predicate_dependsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_predicate_depends(this);
}

ReentParser::Reent_predicate_dependsContext* ReentParser::reent_predicate_depends() {
  Reent_predicate_dependsContext *_localctx = _tracker.createInstance<Reent_predicate_dependsContext>(_ctx, getState());
  enterRule(_localctx, 410, ReentParser::RuleReent_predicate_depends);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2357);
    match(ReentParser::Depends);
    setState(2358);
    match(ReentParser::LeftParen);
    setState(2359);
    reent_dependents();
    setState(2360);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_predicate_ifContext ------------------------------------------------------------------

ReentParser::Reent_predicate_ifContext::Reent_predicate_ifContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_predicate_ifContext::If() {
  return getToken(ReentParser::If, 0);
}

tree::TerminalNode* ReentParser::Reent_predicate_ifContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionContext* ReentParser::Reent_predicate_ifContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_predicate_ifContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::Reent_enumeratorContext* ReentParser::Reent_predicate_ifContext::reent_enumerator() {
  return getRuleContext<ReentParser::Reent_enumeratorContext>(0);
}


size_t ReentParser::Reent_predicate_ifContext::getRuleIndex() const {
  return ReentParser::RuleReent_predicate_if;
}

void ReentParser::Reent_predicate_ifContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_predicate_if(this);
}

void ReentParser::Reent_predicate_ifContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_predicate_if(this);
}

ReentParser::Reent_predicate_ifContext* ReentParser::reent_predicate_if() {
  Reent_predicate_ifContext *_localctx = _tracker.createInstance<Reent_predicate_ifContext>(_ctx, getState());
  enterRule(_localctx, 412, ReentParser::RuleReent_predicate_if);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2362);
    match(ReentParser::If);
    setState(2363);
    match(ReentParser::LeftParen);
    setState(2365);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 257, _ctx)) {
    case 1: {
      setState(2364);
      reent_enumerator();
      break;
    }

    default:
      break;
    }
    setState(2367);
    expression();
    setState(2368);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_dependentsContext ------------------------------------------------------------------

ReentParser::Reent_dependentsContext::Reent_dependentsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Reent_enumeratorContext* ReentParser::Reent_dependentsContext::reent_enumerator() {
  return getRuleContext<ReentParser::Reent_enumeratorContext>(0);
}

std::vector<ReentParser::Reent_single_dependentContext *> ReentParser::Reent_dependentsContext::reent_single_dependent() {
  return getRuleContexts<ReentParser::Reent_single_dependentContext>();
}

ReentParser::Reent_single_dependentContext* ReentParser::Reent_dependentsContext::reent_single_dependent(size_t i) {
  return getRuleContext<ReentParser::Reent_single_dependentContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::Reent_dependentsContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::Reent_dependentsContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::Reent_dependentsContext::getRuleIndex() const {
  return ReentParser::RuleReent_dependents;
}

void ReentParser::Reent_dependentsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_dependents(this);
}

void ReentParser::Reent_dependentsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_dependents(this);
}

ReentParser::Reent_dependentsContext* ReentParser::reent_dependents() {
  Reent_dependentsContext *_localctx = _tracker.createInstance<Reent_dependentsContext>(_ctx, getState());
  enterRule(_localctx, 414, ReentParser::RuleReent_dependents);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2381);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftBracket: {
        enterOuterAlt(_localctx, 1);
        setState(2370);
        reent_enumerator();
        setState(2371);
        reent_single_dependent();
        break;
      }

      case ReentParser::Id: {
        enterOuterAlt(_localctx, 2);
        setState(2373);
        reent_single_dependent();
        setState(2378);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == ReentParser::Comma) {
          setState(2374);
          match(ReentParser::Comma);
          setState(2375);
          reent_single_dependent();
          setState(2380);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_enumeratorContext ------------------------------------------------------------------

ReentParser::Reent_enumeratorContext::Reent_enumeratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_enumeratorContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

ReentParser::Loop_statement_headerContext* ReentParser::Reent_enumeratorContext::loop_statement_header() {
  return getRuleContext<ReentParser::Loop_statement_headerContext>(0);
}

tree::TerminalNode* ReentParser::Reent_enumeratorContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}


size_t ReentParser::Reent_enumeratorContext::getRuleIndex() const {
  return ReentParser::RuleReent_enumerator;
}

void ReentParser::Reent_enumeratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_enumerator(this);
}

void ReentParser::Reent_enumeratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_enumerator(this);
}

ReentParser::Reent_enumeratorContext* ReentParser::reent_enumerator() {
  Reent_enumeratorContext *_localctx = _tracker.createInstance<Reent_enumeratorContext>(_ctx, getState());
  enterRule(_localctx, 416, ReentParser::RuleReent_enumerator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2383);
    match(ReentParser::LeftBracket);
    setState(2384);
    loop_statement_header();
    setState(2385);
    match(ReentParser::RightBracket);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Loop_statement_headerContext ------------------------------------------------------------------

ReentParser::Loop_statement_headerContext::Loop_statement_headerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Loop_statement_headerContext::While() {
  return getToken(ReentParser::While, 0);
}

tree::TerminalNode* ReentParser::Loop_statement_headerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ConditionContext* ReentParser::Loop_statement_headerContext::condition() {
  return getRuleContext<ReentParser::ConditionContext>(0);
}

tree::TerminalNode* ReentParser::Loop_statement_headerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

tree::TerminalNode* ReentParser::Loop_statement_headerContext::For() {
  return getToken(ReentParser::For, 0);
}

ReentParser::ForInitStatementContext* ReentParser::Loop_statement_headerContext::forInitStatement() {
  return getRuleContext<ReentParser::ForInitStatementContext>(0);
}

tree::TerminalNode* ReentParser::Loop_statement_headerContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::ForRangeDeclarationContext* ReentParser::Loop_statement_headerContext::forRangeDeclaration() {
  return getRuleContext<ReentParser::ForRangeDeclarationContext>(0);
}

tree::TerminalNode* ReentParser::Loop_statement_headerContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::ForRangeInitializerContext* ReentParser::Loop_statement_headerContext::forRangeInitializer() {
  return getRuleContext<ReentParser::ForRangeInitializerContext>(0);
}

ReentParser::ExpressionContext* ReentParser::Loop_statement_headerContext::expression() {
  return getRuleContext<ReentParser::ExpressionContext>(0);
}


size_t ReentParser::Loop_statement_headerContext::getRuleIndex() const {
  return ReentParser::RuleLoop_statement_header;
}

void ReentParser::Loop_statement_headerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLoop_statement_header(this);
}

void ReentParser::Loop_statement_headerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLoop_statement_header(this);
}

ReentParser::Loop_statement_headerContext* ReentParser::loop_statement_header() {
  Loop_statement_headerContext *_localctx = _tracker.createInstance<Loop_statement_headerContext>(_ctx, getState());
  enterRule(_localctx, 418, ReentParser::RuleLoop_statement_header);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2410);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::While: {
        enterOuterAlt(_localctx, 1);
        setState(2387);
        match(ReentParser::While);
        setState(2388);
        match(ReentParser::LeftParen);
        setState(2389);
        condition();
        setState(2390);
        match(ReentParser::RightParen);
        break;
      }

      case ReentParser::For: {
        enterOuterAlt(_localctx, 2);
        setState(2392);
        match(ReentParser::For);
        setState(2393);
        match(ReentParser::LeftParen);
        setState(2406);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 262, _ctx)) {
        case 1: {
          setState(2394);
          forInitStatement();
          setState(2396);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 260, _ctx)) {
          case 1: {
            setState(2395);
            condition();
            break;
          }

          default:
            break;
          }
          setState(2398);
          match(ReentParser::Semi);
          setState(2400);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 261, _ctx)) {
          case 1: {
            setState(2399);
            expression();
            break;
          }

          default:
            break;
          }
          break;
        }

        case 2: {
          setState(2402);
          forRangeDeclaration();
          setState(2403);
          match(ReentParser::Colon);
          setState(2404);
          forRangeInitializer();
          break;
        }

        default:
          break;
        }
        setState(2408);
        match(ReentParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Reent_single_dependentContext ------------------------------------------------------------------

ReentParser::Reent_single_dependentContext::Reent_single_dependentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Reent_single_dependentContext::Id() {
  return getToken(ReentParser::Id, 0);
}

ReentParser::CastExpressionContext* ReentParser::Reent_single_dependentContext::castExpression() {
  return getRuleContext<ReentParser::CastExpressionContext>(0);
}

tree::TerminalNode* ReentParser::Reent_single_dependentContext::Dot() {
  return getToken(ReentParser::Dot, 0);
}

tree::TerminalNode* ReentParser::Reent_single_dependentContext::Arrow() {
  return getToken(ReentParser::Arrow, 0);
}


size_t ReentParser::Reent_single_dependentContext::getRuleIndex() const {
  return ReentParser::RuleReent_single_dependent;
}

void ReentParser::Reent_single_dependentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterReent_single_dependent(this);
}

void ReentParser::Reent_single_dependentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitReent_single_dependent(this);
}

ReentParser::Reent_single_dependentContext* ReentParser::reent_single_dependent() {
  Reent_single_dependentContext *_localctx = _tracker.createInstance<Reent_single_dependentContext>(_ctx, getState());
  enterRule(_localctx, 420, ReentParser::RuleReent_single_dependent);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2412);
    match(ReentParser::Id);
    setState(2413);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Arrow

    || _la == ReentParser::Dot)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(2414);
    castExpression();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Chain_interfaceContext ------------------------------------------------------------------

ReentParser::Chain_interfaceContext::Chain_interfaceContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Chain_interfaceContext::Throw() {
  return getToken(ReentParser::Throw, 0);
}

tree::TerminalNode* ReentParser::Chain_interfaceContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::Chain_interfaceContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::Reent_chain_paramsContext* ReentParser::Chain_interfaceContext::reent_chain_params() {
  return getRuleContext<ReentParser::Reent_chain_paramsContext>(0);
}


size_t ReentParser::Chain_interfaceContext::getRuleIndex() const {
  return ReentParser::RuleChain_interface;
}

void ReentParser::Chain_interfaceContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChain_interface(this);
}

void ReentParser::Chain_interfaceContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChain_interface(this);
}

ReentParser::Chain_interfaceContext* ReentParser::chain_interface() {
  Chain_interfaceContext *_localctx = _tracker.createInstance<Chain_interfaceContext>(_ctx, getState());
  enterRule(_localctx, 422, ReentParser::RuleChain_interface);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2416);
    match(ReentParser::Throw);
    setState(2417);
    match(ReentParser::LeftParen);
    setState(2419);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::GpuGlobal)
      | (1ULL << ReentParser::GpuLocal)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Reduction - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(2418);
      reent_chain_params();
    }
    setState(2421);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChainDefinitionContext ------------------------------------------------------------------

ReentParser::ChainDefinitionContext::ChainDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ChainHeadContext* ReentParser::ChainDefinitionContext::chainHead() {
  return getRuleContext<ReentParser::ChainHeadContext>(0);
}

ReentParser::CompoundStatementContext* ReentParser::ChainDefinitionContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}


size_t ReentParser::ChainDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleChainDefinition;
}

void ReentParser::ChainDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChainDefinition(this);
}

void ReentParser::ChainDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChainDefinition(this);
}

ReentParser::ChainDefinitionContext* ReentParser::chainDefinition() {
  ChainDefinitionContext *_localctx = _tracker.createInstance<ChainDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 424, ReentParser::RuleChainDefinition);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2423);
    chainHead();
     chains[last_reent_chain_declarator] = 0; 
    setState(2425);
    compoundStatement();
     in_chain = false; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChainDeclarationContext ------------------------------------------------------------------

ReentParser::ChainDeclarationContext::ChainDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ChainHeadContext* ReentParser::ChainDeclarationContext::chainHead() {
  return getRuleContext<ReentParser::ChainHeadContext>(0);
}

tree::TerminalNode* ReentParser::ChainDeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}


size_t ReentParser::ChainDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleChainDeclaration;
}

void ReentParser::ChainDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChainDeclaration(this);
}

void ReentParser::ChainDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChainDeclaration(this);
}

ReentParser::ChainDeclarationContext* ReentParser::chainDeclaration() {
  ChainDeclarationContext *_localctx = _tracker.createInstance<ChainDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 426, ReentParser::RuleChainDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2428);
    chainHead();
     in_chain = false; chains[last_reent_chain_declarator] = 0; 
    setState(2430);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ChainHeadContext ------------------------------------------------------------------

ReentParser::ChainHeadContext::ChainHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ChainHeadContext::Chain() {
  return getToken(ReentParser::Chain, 0);
}

ReentParser::Reent_chain_headerContext* ReentParser::ChainHeadContext::reent_chain_header() {
  return getRuleContext<ReentParser::Reent_chain_headerContext>(0);
}

tree::TerminalNode* ReentParser::ChainHeadContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::ChainHeadContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::ChainHeadContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

ReentParser::Chain_interfaceContext* ReentParser::ChainHeadContext::chain_interface() {
  return getRuleContext<ReentParser::Chain_interfaceContext>(0);
}

std::vector<ReentParser::Reent_chain_predicateContext *> ReentParser::ChainHeadContext::reent_chain_predicate() {
  return getRuleContexts<ReentParser::Reent_chain_predicateContext>();
}

ReentParser::Reent_chain_predicateContext* ReentParser::ChainHeadContext::reent_chain_predicate(size_t i) {
  return getRuleContext<ReentParser::Reent_chain_predicateContext>(i);
}


size_t ReentParser::ChainHeadContext::getRuleIndex() const {
  return ReentParser::RuleChainHead;
}

void ReentParser::ChainHeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterChainHead(this);
}

void ReentParser::ChainHeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitChainHead(this);
}

ReentParser::ChainHeadContext* ReentParser::chainHead() {
  ChainHeadContext *_localctx = _tracker.createInstance<ChainHeadContext>(_ctx, getState());
  enterRule(_localctx, 428, ReentParser::RuleChainHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2432);
    match(ReentParser::Chain);
    setState(2437);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::LeftBracket) {
      setState(2433);
      match(ReentParser::LeftBracket);
      setState(2434);
      constantExpression();
      setState(2435);
      match(ReentParser::RightBracket);
    }

    		in_chain = true;
    	
    setState(2440);
    reent_chain_header();
    setState(2442);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Throw) {
      setState(2441);
      chain_interface();
    }
    setState(2447);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Depends || ((((_la - 64) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 64)) & ((1ULL << (ReentParser::If - 64))
      | (1ULL << (ReentParser::Reset - 64))
      | (1ULL << (ReentParser::Set - 64)))) != 0)) {
      setState(2444);
      reent_chain_predicate();
      setState(2449);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionDefinitionContext ------------------------------------------------------------------

ReentParser::FunctionDefinitionContext::FunctionDefinitionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::FunctionBodyContext* ReentParser::FunctionDefinitionContext::functionBody() {
  return getRuleContext<ReentParser::FunctionBodyContext>(0);
}

ReentParser::Special_method_nameContext* ReentParser::FunctionDefinitionContext::special_method_name() {
  return getRuleContext<ReentParser::Special_method_nameContext>(0);
}

tree::TerminalNode* ReentParser::FunctionDefinitionContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::FunctionDefinitionContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::DeclaratorContext* ReentParser::FunctionDefinitionContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

ReentParser::ParameterDeclarationClauseContext* ReentParser::FunctionDefinitionContext::parameterDeclarationClause() {
  return getRuleContext<ReentParser::ParameterDeclarationClauseContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::FunctionDefinitionContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::FunctionDefinitionContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::VirtualSpecifierSeqContext* ReentParser::FunctionDefinitionContext::virtualSpecifierSeq() {
  return getRuleContext<ReentParser::VirtualSpecifierSeqContext>(0);
}


size_t ReentParser::FunctionDefinitionContext::getRuleIndex() const {
  return ReentParser::RuleFunctionDefinition;
}

void ReentParser::FunctionDefinitionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionDefinition(this);
}

void ReentParser::FunctionDefinitionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionDefinition(this);
}

ReentParser::FunctionDefinitionContext* ReentParser::functionDefinition() {
  FunctionDefinitionContext *_localctx = _tracker.createInstance<FunctionDefinitionContext>(_ctx, getState());
  enterRule(_localctx, 430, ReentParser::RuleFunctionDefinition);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2467);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 272, _ctx)) {
    case 1: {
      setState(2450);
      special_method_name();
      setState(2451);
      match(ReentParser::LeftParen);
      setState(2453);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ReentParser::Alignas)
        | (1ULL << ReentParser::Auto)
        | (1ULL << ReentParser::Begin)
        | (1ULL << ReentParser::Bool)
        | (1ULL << ReentParser::Cfunnel)
        | (1ULL << ReentParser::Char)
        | (1ULL << ReentParser::Char16)
        | (1ULL << ReentParser::Char32)
        | (1ULL << ReentParser::Class)
        | (1ULL << ReentParser::Clustered)
        | (1ULL << ReentParser::Common)
        | (1ULL << ReentParser::Const)
        | (1ULL << ReentParser::Constexpr)
        | (1ULL << ReentParser::Csem)
        | (1ULL << ReentParser::Cvar)
        | (1ULL << ReentParser::Decltype)
        | (1ULL << ReentParser::Depends)
        | (1ULL << ReentParser::Double)
        | (1ULL << ReentParser::End)
        | (1ULL << ReentParser::Enum)
        | (1ULL << ReentParser::Explicit)
        | (1ULL << ReentParser::Extern)
        | (1ULL << ReentParser::Float)
        | (1ULL << ReentParser::Friend)
        | (1ULL << ReentParser::Funnel)
        | (1ULL << ReentParser::Global)
        | (1ULL << ReentParser::Gpu)
        | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
        | (1ULL << (ReentParser::Inline - 65))
        | (1ULL << (ReentParser::Int - 65))
        | (1ULL << (ReentParser::Local - 65))
        | (1ULL << (ReentParser::Long - 65))
        | (1ULL << (ReentParser::MarkPreCondition - 65))
        | (1ULL << (ReentParser::MarkState - 65))
        | (1ULL << (ReentParser::Markupdef - 65))
        | (1ULL << (ReentParser::Mutable - 65))
        | (1ULL << (ReentParser::Out - 65))
        | (1ULL << (ReentParser::Plan - 65))
        | (1ULL << (ReentParser::Plan_item_type - 65))
        | (1ULL << (ReentParser::Plan_type - 65))
        | (1ULL << (ReentParser::Register - 65))
        | (1ULL << (ReentParser::Reset - 65))
        | (1ULL << (ReentParser::Set - 65))
        | (1ULL << (ReentParser::Short - 65))
        | (1ULL << (ReentParser::Signed - 65))
        | (1ULL << (ReentParser::Soft_transact_array - 65))
        | (1ULL << (ReentParser::Soft_transact_in - 65))
        | (1ULL << (ReentParser::Soft_transact_out - 65))
        | (1ULL << (ReentParser::Soft_transact_var - 65))
        | (1ULL << (ReentParser::Static - 65))
        | (1ULL << (ReentParser::Struct - 65))
        | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
        | (1ULL << (ReentParser::Typename_ - 134))
        | (1ULL << (ReentParser::Union - 134))
        | (1ULL << (ReentParser::Unsigned - 134))
        | (1ULL << (ReentParser::Vectorized - 134))
        | (1ULL << (ReentParser::Virtual - 134))
        | (1ULL << (ReentParser::Void - 134))
        | (1ULL << (ReentParser::Volatile - 134))
        | (1ULL << (ReentParser::Wchar - 134))
        | (1ULL << (ReentParser::LeftBracket - 134))
        | (1ULL << (ReentParser::Doublecolon - 134))
        | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
        setState(2452);
        parameterDeclarationClause();
      }
      setState(2455);
      match(ReentParser::RightParen);
      break;
    }

    case 2: {
      setState(2458);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
        setState(2457);
        attributeSpecifierSeq();
      }
      setState(2461);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 270, _ctx)) {
      case 1: {
        setState(2460);
        declSpecifierSeq();
        break;
      }

      default:
        break;
      }
      setState(2463);
      declarator();
      setState(2465);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Final

      || _la == ReentParser::Override) {
        setState(2464);
        virtualSpecifierSeq();
      }
      break;
    }

    default:
      break;
    }
    setState(2469);
    functionBody();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Special_method_nameContext ------------------------------------------------------------------

ReentParser::Special_method_nameContext::Special_method_nameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::AnyIdentifierContext *> ReentParser::Special_method_nameContext::anyIdentifier() {
  return getRuleContexts<ReentParser::AnyIdentifierContext>();
}

ReentParser::AnyIdentifierContext* ReentParser::Special_method_nameContext::anyIdentifier(size_t i) {
  return getRuleContext<ReentParser::AnyIdentifierContext>(i);
}

tree::TerminalNode* ReentParser::Special_method_nameContext::Doublecolon() {
  return getToken(ReentParser::Doublecolon, 0);
}

tree::TerminalNode* ReentParser::Special_method_nameContext::Tilde() {
  return getToken(ReentParser::Tilde, 0);
}


size_t ReentParser::Special_method_nameContext::getRuleIndex() const {
  return ReentParser::RuleSpecial_method_name;
}

void ReentParser::Special_method_nameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSpecial_method_name(this);
}

void ReentParser::Special_method_nameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSpecial_method_name(this);
}

ReentParser::Special_method_nameContext* ReentParser::special_method_name() {
  Special_method_nameContext *_localctx = _tracker.createInstance<Special_method_nameContext>(_ctx, getState());
  enterRule(_localctx, 432, ReentParser::RuleSpecial_method_name);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2471);
    anyIdentifier();
    setState(2472);
    match(ReentParser::Doublecolon);
    setState(2474);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Tilde) {
      setState(2473);
      match(ReentParser::Tilde);
    }
    setState(2476);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionBodyContext ------------------------------------------------------------------

ReentParser::FunctionBodyContext::FunctionBodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::CompoundStatementContext* ReentParser::FunctionBodyContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}

ReentParser::ConstructorInitializerContext* ReentParser::FunctionBodyContext::constructorInitializer() {
  return getRuleContext<ReentParser::ConstructorInitializerContext>(0);
}

ReentParser::FunctionTryBlockContext* ReentParser::FunctionBodyContext::functionTryBlock() {
  return getRuleContext<ReentParser::FunctionTryBlockContext>(0);
}

tree::TerminalNode* ReentParser::FunctionBodyContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

tree::TerminalNode* ReentParser::FunctionBodyContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::FunctionBodyContext::Default() {
  return getToken(ReentParser::Default, 0);
}

tree::TerminalNode* ReentParser::FunctionBodyContext::Delete() {
  return getToken(ReentParser::Delete, 0);
}


size_t ReentParser::FunctionBodyContext::getRuleIndex() const {
  return ReentParser::RuleFunctionBody;
}

void ReentParser::FunctionBodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionBody(this);
}

void ReentParser::FunctionBodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionBody(this);
}

ReentParser::FunctionBodyContext* ReentParser::functionBody() {
  FunctionBodyContext *_localctx = _tracker.createInstance<FunctionBodyContext>(_ctx, getState());
  enterRule(_localctx, 434, ReentParser::RuleFunctionBody);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2486);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftBrace:
      case ReentParser::Colon: {
        enterOuterAlt(_localctx, 1);
        setState(2479);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Colon) {
          setState(2478);
          constructorInitializer();
        }
        setState(2481);
        compoundStatement();
        break;
      }

      case ReentParser::Try: {
        enterOuterAlt(_localctx, 2);
        setState(2482);
        functionTryBlock();
        break;
      }

      case ReentParser::Assign: {
        enterOuterAlt(_localctx, 3);
        setState(2483);
        match(ReentParser::Assign);
        setState(2484);
        _la = _input->LA(1);
        if (!(_la == ReentParser::Default

        || _la == ReentParser::Delete)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(2485);
        match(ReentParser::Semi);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerContext ------------------------------------------------------------------

ReentParser::InitializerContext::InitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::BraceOrEqualInitializerContext* ReentParser::InitializerContext::braceOrEqualInitializer() {
  return getRuleContext<ReentParser::BraceOrEqualInitializerContext>(0);
}

tree::TerminalNode* ReentParser::InitializerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExpressionListContext* ReentParser::InitializerContext::expressionList() {
  return getRuleContext<ReentParser::ExpressionListContext>(0);
}

tree::TerminalNode* ReentParser::InitializerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::InitializerContext::getRuleIndex() const {
  return ReentParser::RuleInitializer;
}

void ReentParser::InitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializer(this);
}

void ReentParser::InitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializer(this);
}

ReentParser::InitializerContext* ReentParser::initializer() {
  InitializerContext *_localctx = _tracker.createInstance<InitializerContext>(_ctx, getState());
  enterRule(_localctx, 436, ReentParser::RuleInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2493);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftBrace:
      case ReentParser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(2488);
        braceOrEqualInitializer();
        break;
      }

      case ReentParser::LeftParen: {
        enterOuterAlt(_localctx, 2);
        setState(2489);
        match(ReentParser::LeftParen);
        setState(2490);
        expressionList();
        setState(2491);
        match(ReentParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BraceOrEqualInitializerContext ------------------------------------------------------------------

ReentParser::BraceOrEqualInitializerContext::BraceOrEqualInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::BraceOrEqualInitializerContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::InitializerClauseContext* ReentParser::BraceOrEqualInitializerContext::initializerClause() {
  return getRuleContext<ReentParser::InitializerClauseContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::BraceOrEqualInitializerContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}


size_t ReentParser::BraceOrEqualInitializerContext::getRuleIndex() const {
  return ReentParser::RuleBraceOrEqualInitializer;
}

void ReentParser::BraceOrEqualInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBraceOrEqualInitializer(this);
}

void ReentParser::BraceOrEqualInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBraceOrEqualInitializer(this);
}

ReentParser::BraceOrEqualInitializerContext* ReentParser::braceOrEqualInitializer() {
  BraceOrEqualInitializerContext *_localctx = _tracker.createInstance<BraceOrEqualInitializerContext>(_ctx, getState());
  enterRule(_localctx, 438, ReentParser::RuleBraceOrEqualInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2498);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Assign: {
        enterOuterAlt(_localctx, 1);
        setState(2495);
        match(ReentParser::Assign);
        setState(2496);
        initializerClause();
        break;
      }

      case ReentParser::LeftBrace: {
        enterOuterAlt(_localctx, 2);
        setState(2497);
        bracedInitList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerClauseContext ------------------------------------------------------------------

ReentParser::InitializerClauseContext::InitializerClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AssignmentExpressionContext* ReentParser::InitializerClauseContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}

ReentParser::BracedInitListContext* ReentParser::InitializerClauseContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}


size_t ReentParser::InitializerClauseContext::getRuleIndex() const {
  return ReentParser::RuleInitializerClause;
}

void ReentParser::InitializerClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerClause(this);
}

void ReentParser::InitializerClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerClause(this);
}

ReentParser::InitializerClauseContext* ReentParser::initializerClause() {
  InitializerClauseContext *_localctx = _tracker.createInstance<InitializerClauseContext>(_ctx, getState());
  enterRule(_localctx, 440, ReentParser::RuleInitializerClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2502);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 278, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2500);
      assignmentExpression();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2501);
      bracedInitList();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InitializerListContext ------------------------------------------------------------------

ReentParser::InitializerListContext::InitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::InitializerClauseContext *> ReentParser::InitializerListContext::initializerClause() {
  return getRuleContexts<ReentParser::InitializerClauseContext>();
}

ReentParser::InitializerClauseContext* ReentParser::InitializerListContext::initializerClause(size_t i) {
  return getRuleContext<ReentParser::InitializerClauseContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::InitializerListContext::Ellipsis() {
  return getTokens(ReentParser::Ellipsis);
}

tree::TerminalNode* ReentParser::InitializerListContext::Ellipsis(size_t i) {
  return getToken(ReentParser::Ellipsis, i);
}

std::vector<tree::TerminalNode *> ReentParser::InitializerListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::InitializerListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::InitializerListContext::getRuleIndex() const {
  return ReentParser::RuleInitializerList;
}

void ReentParser::InitializerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInitializerList(this);
}

void ReentParser::InitializerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInitializerList(this);
}

ReentParser::InitializerListContext* ReentParser::initializerList() {
  InitializerListContext *_localctx = _tracker.createInstance<InitializerListContext>(_ctx, getState());
  enterRule(_localctx, 442, ReentParser::RuleInitializerList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2504);
    initializerClause();
    setState(2506);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(2505);
      match(ReentParser::Ellipsis);
    }
    setState(2515);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(2508);
        match(ReentParser::Comma);
        setState(2509);
        initializerClause();
        setState(2511);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Ellipsis) {
          setState(2510);
          match(ReentParser::Ellipsis);
        } 
      }
      setState(2517);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 281, _ctx);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BracedInitListContext ------------------------------------------------------------------

ReentParser::BracedInitListContext::BracedInitListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::BracedInitListContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::BracedInitListContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

ReentParser::InitializerListContext* ReentParser::BracedInitListContext::initializerList() {
  return getRuleContext<ReentParser::InitializerListContext>(0);
}

tree::TerminalNode* ReentParser::BracedInitListContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}


size_t ReentParser::BracedInitListContext::getRuleIndex() const {
  return ReentParser::RuleBracedInitList;
}

void ReentParser::BracedInitListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBracedInitList(this);
}

void ReentParser::BracedInitListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBracedInitList(this);
}

ReentParser::BracedInitListContext* ReentParser::bracedInitList() {
  BracedInitListContext *_localctx = _tracker.createInstance<BracedInitListContext>(_ctx, getState());
  enterRule(_localctx, 444, ReentParser::RuleBracedInitList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2518);
    match(ReentParser::LeftBrace);
    setState(2523);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 283, _ctx)) {
    case 1: {
      setState(2519);
      initializerList();
      setState(2521);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Comma) {
        setState(2520);
        match(ReentParser::Comma);
      }
      break;
    }

    default:
      break;
    }
    setState(2525);
    match(ReentParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassNameContext ------------------------------------------------------------------

ReentParser::ClassNameContext::ClassNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::SimpleTemplateIdContext* ReentParser::ClassNameContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::ClassNameContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::ClassNameContext::getRuleIndex() const {
  return ReentParser::RuleClassName;
}

void ReentParser::ClassNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassName(this);
}

void ReentParser::ClassNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassName(this);
}

ReentParser::ClassNameContext* ReentParser::className() {
  ClassNameContext *_localctx = _tracker.createInstance<ClassNameContext>(_ctx, getState());
  enterRule(_localctx, 446, ReentParser::RuleClassName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2529);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 284, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2527);
      simpleTemplateId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2528);
      anyIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassSpecifierContext ------------------------------------------------------------------

ReentParser::ClassSpecifierContext::ClassSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassHeadContext* ReentParser::ClassSpecifierContext::classHead() {
  return getRuleContext<ReentParser::ClassHeadContext>(0);
}

tree::TerminalNode* ReentParser::ClassSpecifierContext::LeftBrace() {
  return getToken(ReentParser::LeftBrace, 0);
}

tree::TerminalNode* ReentParser::ClassSpecifierContext::RightBrace() {
  return getToken(ReentParser::RightBrace, 0);
}

ReentParser::MemberSpecificationContext* ReentParser::ClassSpecifierContext::memberSpecification() {
  return getRuleContext<ReentParser::MemberSpecificationContext>(0);
}


size_t ReentParser::ClassSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleClassSpecifier;
}

void ReentParser::ClassSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassSpecifier(this);
}

void ReentParser::ClassSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassSpecifier(this);
}

ReentParser::ClassSpecifierContext* ReentParser::classSpecifier() {
  ClassSpecifierContext *_localctx = _tracker.createInstance<ClassSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 448, ReentParser::RuleClassSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2531);
    classHead();
    setState(2532);
    match(ReentParser::LeftBrace);
    setState(2534);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Private - 65))
      | (1ULL << (ReentParser::Protected - 65))
      | (1ULL << (ReentParser::Public - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Static_assert - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Template - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Using - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Colon - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Semi - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0)) {
      setState(2533);
      memberSpecification();
    }
    setState(2536);
    match(ReentParser::RightBrace);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeadContext ------------------------------------------------------------------

ReentParser::ClassHeadContext::ClassHeadContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassKeyContext* ReentParser::ClassHeadContext::classKey() {
  return getRuleContext<ReentParser::ClassKeyContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ClassHeadContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::ClassHeadNameContext* ReentParser::ClassHeadContext::classHeadName() {
  return getRuleContext<ReentParser::ClassHeadNameContext>(0);
}

ReentParser::BaseClauseContext* ReentParser::ClassHeadContext::baseClause() {
  return getRuleContext<ReentParser::BaseClauseContext>(0);
}

ReentParser::ClassVirtSpecifierContext* ReentParser::ClassHeadContext::classVirtSpecifier() {
  return getRuleContext<ReentParser::ClassVirtSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::ClassHeadContext::Union() {
  return getToken(ReentParser::Union, 0);
}


size_t ReentParser::ClassHeadContext::getRuleIndex() const {
  return ReentParser::RuleClassHead;
}

void ReentParser::ClassHeadContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassHead(this);
}

void ReentParser::ClassHeadContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassHead(this);
}

ReentParser::ClassHeadContext* ReentParser::classHead() {
  ClassHeadContext *_localctx = _tracker.createInstance<ClassHeadContext>(_ctx, getState());
  enterRule(_localctx, 450, ReentParser::RuleClassHead);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2561);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Class:
      case ReentParser::Struct: {
        enterOuterAlt(_localctx, 1);
        setState(2538);
        classKey();
        setState(2540);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
          setState(2539);
          attributeSpecifierSeq();
        }
        setState(2546);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << ReentParser::Begin)
          | (1ULL << ReentParser::Clustered)
          | (1ULL << ReentParser::Common)
          | (1ULL << ReentParser::Decltype)
          | (1ULL << ReentParser::Depends)
          | (1ULL << ReentParser::End)
          | (1ULL << ReentParser::Global)
          | (1ULL << ReentParser::Gpu)
          | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
          | (1ULL << (ReentParser::Local - 65))
          | (1ULL << (ReentParser::MarkPreCondition - 65))
          | (1ULL << (ReentParser::MarkState - 65))
          | (1ULL << (ReentParser::Out - 65))
          | (1ULL << (ReentParser::Plan - 65))
          | (1ULL << (ReentParser::Reset - 65))
          | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
          | (1ULL << (ReentParser::Doublecolon - 140))
          | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
          setState(2542);
          classHeadName();
          setState(2544);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ReentParser::Final) {
            setState(2543);
            classVirtSpecifier();
          }
        }
        setState(2549);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Colon) {
          setState(2548);
          baseClause();
        }
        break;
      }

      case ReentParser::Union: {
        enterOuterAlt(_localctx, 2);
        setState(2551);
        match(ReentParser::Union);
        setState(2553);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
          setState(2552);
          attributeSpecifierSeq();
        }
        setState(2559);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & ((1ULL << ReentParser::Begin)
          | (1ULL << ReentParser::Clustered)
          | (1ULL << ReentParser::Common)
          | (1ULL << ReentParser::Decltype)
          | (1ULL << ReentParser::Depends)
          | (1ULL << ReentParser::End)
          | (1ULL << ReentParser::Global)
          | (1ULL << ReentParser::Gpu)
          | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
          | (1ULL << (ReentParser::Local - 65))
          | (1ULL << (ReentParser::MarkPreCondition - 65))
          | (1ULL << (ReentParser::MarkState - 65))
          | (1ULL << (ReentParser::Out - 65))
          | (1ULL << (ReentParser::Plan - 65))
          | (1ULL << (ReentParser::Reset - 65))
          | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
          | (1ULL << (ReentParser::Doublecolon - 140))
          | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
          setState(2555);
          classHeadName();
          setState(2557);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ReentParser::Final) {
            setState(2556);
            classVirtSpecifier();
          }
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassHeadNameContext ------------------------------------------------------------------

ReentParser::ClassHeadNameContext::ClassHeadNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassNameContext* ReentParser::ClassHeadNameContext::className() {
  return getRuleContext<ReentParser::ClassNameContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::ClassHeadNameContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}


size_t ReentParser::ClassHeadNameContext::getRuleIndex() const {
  return ReentParser::RuleClassHeadName;
}

void ReentParser::ClassHeadNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassHeadName(this);
}

void ReentParser::ClassHeadNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassHeadName(this);
}

ReentParser::ClassHeadNameContext* ReentParser::classHeadName() {
  ClassHeadNameContext *_localctx = _tracker.createInstance<ClassHeadNameContext>(_ctx, getState());
  enterRule(_localctx, 452, ReentParser::RuleClassHeadName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2564);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 294, _ctx)) {
    case 1: {
      setState(2563);
      nestedNameSpecifier(0);
      break;
    }

    default:
      break;
    }
    setState(2566);
    className();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassVirtSpecifierContext ------------------------------------------------------------------

ReentParser::ClassVirtSpecifierContext::ClassVirtSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ClassVirtSpecifierContext::Final() {
  return getToken(ReentParser::Final, 0);
}


size_t ReentParser::ClassVirtSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleClassVirtSpecifier;
}

void ReentParser::ClassVirtSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassVirtSpecifier(this);
}

void ReentParser::ClassVirtSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassVirtSpecifier(this);
}

ReentParser::ClassVirtSpecifierContext* ReentParser::classVirtSpecifier() {
  ClassVirtSpecifierContext *_localctx = _tracker.createInstance<ClassVirtSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 454, ReentParser::RuleClassVirtSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2568);
    match(ReentParser::Final);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassKeyContext ------------------------------------------------------------------

ReentParser::ClassKeyContext::ClassKeyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ClassKeyContext::Class() {
  return getToken(ReentParser::Class, 0);
}

tree::TerminalNode* ReentParser::ClassKeyContext::Struct() {
  return getToken(ReentParser::Struct, 0);
}


size_t ReentParser::ClassKeyContext::getRuleIndex() const {
  return ReentParser::RuleClassKey;
}

void ReentParser::ClassKeyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassKey(this);
}

void ReentParser::ClassKeyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassKey(this);
}

ReentParser::ClassKeyContext* ReentParser::classKey() {
  ClassKeyContext *_localctx = _tracker.createInstance<ClassKeyContext>(_ctx, getState());
  enterRule(_localctx, 456, ReentParser::RuleClassKey);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2570);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Class || _la == ReentParser::Struct)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberSpecificationContext ------------------------------------------------------------------

ReentParser::MemberSpecificationContext::MemberSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::MarkedmemberdeclarationContext *> ReentParser::MemberSpecificationContext::markedmemberdeclaration() {
  return getRuleContexts<ReentParser::MarkedmemberdeclarationContext>();
}

ReentParser::MarkedmemberdeclarationContext* ReentParser::MemberSpecificationContext::markedmemberdeclaration(size_t i) {
  return getRuleContext<ReentParser::MarkedmemberdeclarationContext>(i);
}

std::vector<ReentParser::MemberdeclarationContext *> ReentParser::MemberSpecificationContext::memberdeclaration() {
  return getRuleContexts<ReentParser::MemberdeclarationContext>();
}

ReentParser::MemberdeclarationContext* ReentParser::MemberSpecificationContext::memberdeclaration(size_t i) {
  return getRuleContext<ReentParser::MemberdeclarationContext>(i);
}

std::vector<ReentParser::AccessSpecifierContext *> ReentParser::MemberSpecificationContext::accessSpecifier() {
  return getRuleContexts<ReentParser::AccessSpecifierContext>();
}

ReentParser::AccessSpecifierContext* ReentParser::MemberSpecificationContext::accessSpecifier(size_t i) {
  return getRuleContext<ReentParser::AccessSpecifierContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::MemberSpecificationContext::Colon() {
  return getTokens(ReentParser::Colon);
}

tree::TerminalNode* ReentParser::MemberSpecificationContext::Colon(size_t i) {
  return getToken(ReentParser::Colon, i);
}


size_t ReentParser::MemberSpecificationContext::getRuleIndex() const {
  return ReentParser::RuleMemberSpecification;
}

void ReentParser::MemberSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberSpecification(this);
}

void ReentParser::MemberSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberSpecification(this);
}

ReentParser::MemberSpecificationContext* ReentParser::memberSpecification() {
  MemberSpecificationContext *_localctx = _tracker.createInstance<MemberSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 458, ReentParser::RuleMemberSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2577); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2577);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 295, _ctx)) {
      case 1: {
        setState(2572);
        markedmemberdeclaration();
        break;
      }

      case 2: {
        setState(2573);
        memberdeclaration();
        break;
      }

      case 3: {
        setState(2574);
        accessSpecifier();
        setState(2575);
        match(ReentParser::Colon);
        break;
      }

      default:
        break;
      }
      setState(2579); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Alignas)
      | (1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Constexpr)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Explicit)
      | (1ULL << ReentParser::Extern)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Friend)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Inline - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Markupdef - 65))
      | (1ULL << (ReentParser::Mutable - 65))
      | (1ULL << (ReentParser::Operator - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Private - 65))
      | (1ULL << (ReentParser::Protected - 65))
      | (1ULL << (ReentParser::Public - 65))
      | (1ULL << (ReentParser::Register - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Static - 65))
      | (1ULL << (ReentParser::Static_assert - 65))
      | (1ULL << (ReentParser::Struct - 65))
      | (1ULL << (ReentParser::Template - 65))
      | (1ULL << (ReentParser::Thread_local - 65)))) != 0) || ((((_la - 134) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 134)) & ((1ULL << (ReentParser::Typedef - 134))
      | (1ULL << (ReentParser::Typename_ - 134))
      | (1ULL << (ReentParser::Union - 134))
      | (1ULL << (ReentParser::Unsigned - 134))
      | (1ULL << (ReentParser::Using - 134))
      | (1ULL << (ReentParser::Vectorized - 134))
      | (1ULL << (ReentParser::Virtual - 134))
      | (1ULL << (ReentParser::Void - 134))
      | (1ULL << (ReentParser::Volatile - 134))
      | (1ULL << (ReentParser::Wchar - 134))
      | (1ULL << (ReentParser::LeftParen - 134))
      | (1ULL << (ReentParser::LeftBracket - 134))
      | (1ULL << (ReentParser::Star - 134))
      | (1ULL << (ReentParser::And - 134))
      | (1ULL << (ReentParser::Tilde - 134))
      | (1ULL << (ReentParser::AndAnd - 134))
      | (1ULL << (ReentParser::Colon - 134))
      | (1ULL << (ReentParser::Doublecolon - 134))
      | (1ULL << (ReentParser::Semi - 134))
      | (1ULL << (ReentParser::Ellipsis - 134))
      | (1ULL << (ReentParser::Identifier - 134)))) != 0));
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MarkedmemberdeclarationContext ------------------------------------------------------------------

ReentParser::MarkedmemberdeclarationContext::MarkedmemberdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclaratorContext* ReentParser::MarkedmemberdeclarationContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

tree::TerminalNode* ReentParser::MarkedmemberdeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

tree::TerminalNode* ReentParser::MarkedmemberdeclarationContext::MarkPreCondition() {
  return getToken(ReentParser::MarkPreCondition, 0);
}

tree::TerminalNode* ReentParser::MarkedmemberdeclarationContext::MarkState() {
  return getToken(ReentParser::MarkState, 0);
}

tree::TerminalNode* ReentParser::MarkedmemberdeclarationContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

std::vector<ReentParser::PrimaryExpressionContext *> ReentParser::MarkedmemberdeclarationContext::primaryExpression() {
  return getRuleContexts<ReentParser::PrimaryExpressionContext>();
}

ReentParser::PrimaryExpressionContext* ReentParser::MarkedmemberdeclarationContext::primaryExpression(size_t i) {
  return getRuleContext<ReentParser::PrimaryExpressionContext>(i);
}

tree::TerminalNode* ReentParser::MarkedmemberdeclarationContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

tree::TerminalNode* ReentParser::MarkedmemberdeclarationContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::MarkedmemberdeclarationContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}


size_t ReentParser::MarkedmemberdeclarationContext::getRuleIndex() const {
  return ReentParser::RuleMarkedmemberdeclaration;
}

void ReentParser::MarkedmemberdeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMarkedmemberdeclaration(this);
}

void ReentParser::MarkedmemberdeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMarkedmemberdeclaration(this);
}

ReentParser::MarkedmemberdeclarationContext* ReentParser::markedmemberdeclaration() {
  MarkedmemberdeclarationContext *_localctx = _tracker.createInstance<MarkedmemberdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 460, ReentParser::RuleMarkedmemberdeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2589);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::MarkPreCondition: {
        setState(2581);
        match(ReentParser::MarkPreCondition);
        break;
      }

      case ReentParser::MarkState: {
        setState(2582);
        match(ReentParser::MarkState);
        setState(2583);
        match(ReentParser::LeftParen);
        setState(2584);
        primaryExpression();
        setState(2585);
        match(ReentParser::Comma);
        setState(2586);
        primaryExpression();
        setState(2587);
        match(ReentParser::RightParen);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2592);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 298, _ctx)) {
    case 1: {
      setState(2591);
      declSpecifierSeq();
      break;
    }

    default:
      break;
    }
    setState(2594);
    declarator();
    setState(2595);
    match(ReentParser::Semi);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberdeclarationContext ------------------------------------------------------------------

ReentParser::MemberdeclarationContext::MemberdeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::MemberdeclarationContext::Semi() {
  return getToken(ReentParser::Semi, 0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::MemberdeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::DeclSpecifierSeqContext* ReentParser::MemberdeclarationContext::declSpecifierSeq() {
  return getRuleContext<ReentParser::DeclSpecifierSeqContext>(0);
}

ReentParser::MemberDeclaratorListContext* ReentParser::MemberdeclarationContext::memberDeclaratorList() {
  return getRuleContext<ReentParser::MemberDeclaratorListContext>(0);
}

ReentParser::FunctionDefinitionContext* ReentParser::MemberdeclarationContext::functionDefinition() {
  return getRuleContext<ReentParser::FunctionDefinitionContext>(0);
}

ReentParser::UsingDeclarationContext* ReentParser::MemberdeclarationContext::usingDeclaration() {
  return getRuleContext<ReentParser::UsingDeclarationContext>(0);
}

ReentParser::StaticAssertDeclarationContext* ReentParser::MemberdeclarationContext::staticAssertDeclaration() {
  return getRuleContext<ReentParser::StaticAssertDeclarationContext>(0);
}

ReentParser::TemplateDeclarationContext* ReentParser::MemberdeclarationContext::templateDeclaration() {
  return getRuleContext<ReentParser::TemplateDeclarationContext>(0);
}

ReentParser::AliasDeclarationContext* ReentParser::MemberdeclarationContext::aliasDeclaration() {
  return getRuleContext<ReentParser::AliasDeclarationContext>(0);
}

ReentParser::EmptyDeclarationContext* ReentParser::MemberdeclarationContext::emptyDeclaration() {
  return getRuleContext<ReentParser::EmptyDeclarationContext>(0);
}


size_t ReentParser::MemberdeclarationContext::getRuleIndex() const {
  return ReentParser::RuleMemberdeclaration;
}

void ReentParser::MemberdeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberdeclaration(this);
}

void ReentParser::MemberdeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberdeclaration(this);
}

ReentParser::MemberdeclarationContext* ReentParser::memberdeclaration() {
  MemberdeclarationContext *_localctx = _tracker.createInstance<MemberdeclarationContext>(_ctx, getState());
  enterRule(_localctx, 462, ReentParser::RuleMemberdeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2613);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 302, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2598);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 299, _ctx)) {
      case 1: {
        setState(2597);
        attributeSpecifierSeq();
        break;
      }

      default:
        break;
      }
      setState(2601);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 300, _ctx)) {
      case 1: {
        setState(2600);
        declSpecifierSeq();
        break;
      }

      default:
        break;
      }
      setState(2604);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ReentParser::Alignas)
        | (1ULL << ReentParser::Begin)
        | (1ULL << ReentParser::Clustered)
        | (1ULL << ReentParser::Common)
        | (1ULL << ReentParser::Decltype)
        | (1ULL << ReentParser::Depends)
        | (1ULL << ReentParser::End)
        | (1ULL << ReentParser::Global)
        | (1ULL << ReentParser::Gpu)
        | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
        | (1ULL << (ReentParser::Local - 65))
        | (1ULL << (ReentParser::MarkPreCondition - 65))
        | (1ULL << (ReentParser::MarkState - 65))
        | (1ULL << (ReentParser::Operator - 65))
        | (1ULL << (ReentParser::Out - 65))
        | (1ULL << (ReentParser::Plan - 65))
        | (1ULL << (ReentParser::Reset - 65))
        | (1ULL << (ReentParser::Set - 65)))) != 0) || ((((_la - 140) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 140)) & ((1ULL << (ReentParser::Vectorized - 140))
        | (1ULL << (ReentParser::LeftParen - 140))
        | (1ULL << (ReentParser::LeftBracket - 140))
        | (1ULL << (ReentParser::Star - 140))
        | (1ULL << (ReentParser::And - 140))
        | (1ULL << (ReentParser::Tilde - 140))
        | (1ULL << (ReentParser::AndAnd - 140))
        | (1ULL << (ReentParser::Colon - 140))
        | (1ULL << (ReentParser::Doublecolon - 140))
        | (1ULL << (ReentParser::Ellipsis - 140))
        | (1ULL << (ReentParser::Identifier - 140)))) != 0)) {
        setState(2603);
        memberDeclaratorList();
      }
      setState(2606);
      match(ReentParser::Semi);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2607);
      functionDefinition();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2608);
      usingDeclaration();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2609);
      staticAssertDeclaration();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2610);
      templateDeclaration();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2611);
      aliasDeclaration();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2612);
      emptyDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclaratorListContext ------------------------------------------------------------------

ReentParser::MemberDeclaratorListContext::MemberDeclaratorListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::MemberDeclaratorContext *> ReentParser::MemberDeclaratorListContext::memberDeclarator() {
  return getRuleContexts<ReentParser::MemberDeclaratorContext>();
}

ReentParser::MemberDeclaratorContext* ReentParser::MemberDeclaratorListContext::memberDeclarator(size_t i) {
  return getRuleContext<ReentParser::MemberDeclaratorContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::MemberDeclaratorListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::MemberDeclaratorListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::MemberDeclaratorListContext::getRuleIndex() const {
  return ReentParser::RuleMemberDeclaratorList;
}

void ReentParser::MemberDeclaratorListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberDeclaratorList(this);
}

void ReentParser::MemberDeclaratorListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberDeclaratorList(this);
}

ReentParser::MemberDeclaratorListContext* ReentParser::memberDeclaratorList() {
  MemberDeclaratorListContext *_localctx = _tracker.createInstance<MemberDeclaratorListContext>(_ctx, getState());
  enterRule(_localctx, 464, ReentParser::RuleMemberDeclaratorList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2615);
    memberDeclarator();
    setState(2620);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2616);
      match(ReentParser::Comma);
      setState(2617);
      memberDeclarator();
      setState(2622);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemberDeclaratorContext ------------------------------------------------------------------

ReentParser::MemberDeclaratorContext::MemberDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DeclaratorContext* ReentParser::MemberDeclaratorContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

ReentParser::VirtualSpecifierSeqContext* ReentParser::MemberDeclaratorContext::virtualSpecifierSeq() {
  return getRuleContext<ReentParser::VirtualSpecifierSeqContext>(0);
}

ReentParser::PureSpecifierContext* ReentParser::MemberDeclaratorContext::pureSpecifier() {
  return getRuleContext<ReentParser::PureSpecifierContext>(0);
}

ReentParser::BraceOrEqualInitializerContext* ReentParser::MemberDeclaratorContext::braceOrEqualInitializer() {
  return getRuleContext<ReentParser::BraceOrEqualInitializerContext>(0);
}

tree::TerminalNode* ReentParser::MemberDeclaratorContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::MemberDeclaratorContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::MemberDeclaratorContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::MemberDeclaratorContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::MemberDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleMemberDeclarator;
}

void ReentParser::MemberDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemberDeclarator(this);
}

void ReentParser::MemberDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemberDeclarator(this);
}

ReentParser::MemberDeclaratorContext* ReentParser::memberDeclarator() {
  MemberDeclaratorContext *_localctx = _tracker.createInstance<MemberDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 466, ReentParser::RuleMemberDeclarator);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2642);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 309, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2623);
      declarator();
      setState(2632);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case ReentParser::Final:
        case ReentParser::Override: {
          setState(2624);
          virtualSpecifierSeq();
          setState(2626);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == ReentParser::Assign) {
            setState(2625);
            pureSpecifier();
          }
          break;
        }

        case ReentParser::LeftBrace:
        case ReentParser::Assign:
        case ReentParser::Comma:
        case ReentParser::Semi: {
          setState(2630);
          _errHandler->sync(this);

          switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 305, _ctx)) {
          case 1: {
            setState(2628);
            pureSpecifier();
            break;
          }

          case 2: {
            setState(2629);
            braceOrEqualInitializer();
            break;
          }

          default:
            break;
          }
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2635);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ReentParser::Begin)
        | (1ULL << ReentParser::Clustered)
        | (1ULL << ReentParser::Common)
        | (1ULL << ReentParser::Depends)
        | (1ULL << ReentParser::End)
        | (1ULL << ReentParser::Global)
        | (1ULL << ReentParser::Gpu)
        | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
        | (1ULL << (ReentParser::Local - 65))
        | (1ULL << (ReentParser::MarkPreCondition - 65))
        | (1ULL << (ReentParser::MarkState - 65))
        | (1ULL << (ReentParser::Out - 65))
        | (1ULL << (ReentParser::Plan - 65))
        | (1ULL << (ReentParser::Reset - 65))
        | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

      || _la == ReentParser::Identifier) {
        setState(2634);
        anyIdentifier();
      }
      setState(2638);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
        setState(2637);
        attributeSpecifierSeq();
      }
      setState(2640);
      match(ReentParser::Colon);
      setState(2641);
      constantExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VirtualSpecifierSeqContext ------------------------------------------------------------------

ReentParser::VirtualSpecifierSeqContext::VirtualSpecifierSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::VirtualSpecifierContext *> ReentParser::VirtualSpecifierSeqContext::virtualSpecifier() {
  return getRuleContexts<ReentParser::VirtualSpecifierContext>();
}

ReentParser::VirtualSpecifierContext* ReentParser::VirtualSpecifierSeqContext::virtualSpecifier(size_t i) {
  return getRuleContext<ReentParser::VirtualSpecifierContext>(i);
}


size_t ReentParser::VirtualSpecifierSeqContext::getRuleIndex() const {
  return ReentParser::RuleVirtualSpecifierSeq;
}

void ReentParser::VirtualSpecifierSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVirtualSpecifierSeq(this);
}

void ReentParser::VirtualSpecifierSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVirtualSpecifierSeq(this);
}

ReentParser::VirtualSpecifierSeqContext* ReentParser::virtualSpecifierSeq() {
  VirtualSpecifierSeqContext *_localctx = _tracker.createInstance<VirtualSpecifierSeqContext>(_ctx, getState());
  enterRule(_localctx, 468, ReentParser::RuleVirtualSpecifierSeq);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2645); 
    _errHandler->sync(this);
    _la = _input->LA(1);
    do {
      setState(2644);
      virtualSpecifier();
      setState(2647); 
      _errHandler->sync(this);
      _la = _input->LA(1);
    } while (_la == ReentParser::Final

    || _la == ReentParser::Override);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- VirtualSpecifierContext ------------------------------------------------------------------

ReentParser::VirtualSpecifierContext::VirtualSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::VirtualSpecifierContext::Override() {
  return getToken(ReentParser::Override, 0);
}

tree::TerminalNode* ReentParser::VirtualSpecifierContext::Final() {
  return getToken(ReentParser::Final, 0);
}


size_t ReentParser::VirtualSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleVirtualSpecifier;
}

void ReentParser::VirtualSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVirtualSpecifier(this);
}

void ReentParser::VirtualSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVirtualSpecifier(this);
}

ReentParser::VirtualSpecifierContext* ReentParser::virtualSpecifier() {
  VirtualSpecifierContext *_localctx = _tracker.createInstance<VirtualSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 470, ReentParser::RuleVirtualSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2649);
    _la = _input->LA(1);
    if (!(_la == ReentParser::Final

    || _la == ReentParser::Override)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- PureSpecifierContext ------------------------------------------------------------------

ReentParser::PureSpecifierContext::PureSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::PureSpecifierContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

tree::TerminalNode* ReentParser::PureSpecifierContext::OctalLiteral() {
  return getToken(ReentParser::OctalLiteral, 0);
}


size_t ReentParser::PureSpecifierContext::getRuleIndex() const {
  return ReentParser::RulePureSpecifier;
}

void ReentParser::PureSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPureSpecifier(this);
}

void ReentParser::PureSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPureSpecifier(this);
}

ReentParser::PureSpecifierContext* ReentParser::pureSpecifier() {
  PureSpecifierContext *_localctx = _tracker.createInstance<PureSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 472, ReentParser::RulePureSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2651);
    match(ReentParser::Assign);
    setState(2652);
    dynamic_cast<PureSpecifierContext *>(_localctx)->val = match(ReentParser::OctalLiteral);
    if((dynamic_cast<PureSpecifierContext *>(_localctx)->val != nullptr ? dynamic_cast<PureSpecifierContext *>(_localctx)->val->getText() : "").compare("0")!=0) throw InputMismatchException(this);
    		
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseClauseContext ------------------------------------------------------------------

ReentParser::BaseClauseContext::BaseClauseContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::BaseClauseContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::BaseSpecifierListContext* ReentParser::BaseClauseContext::baseSpecifierList() {
  return getRuleContext<ReentParser::BaseSpecifierListContext>(0);
}


size_t ReentParser::BaseClauseContext::getRuleIndex() const {
  return ReentParser::RuleBaseClause;
}

void ReentParser::BaseClauseContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseClause(this);
}

void ReentParser::BaseClauseContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseClause(this);
}

ReentParser::BaseClauseContext* ReentParser::baseClause() {
  BaseClauseContext *_localctx = _tracker.createInstance<BaseClauseContext>(_ctx, getState());
  enterRule(_localctx, 474, ReentParser::RuleBaseClause);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2655);
    match(ReentParser::Colon);
    setState(2656);
    baseSpecifierList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseSpecifierListContext ------------------------------------------------------------------

ReentParser::BaseSpecifierListContext::BaseSpecifierListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::BaseSpecifierContext *> ReentParser::BaseSpecifierListContext::baseSpecifier() {
  return getRuleContexts<ReentParser::BaseSpecifierContext>();
}

ReentParser::BaseSpecifierContext* ReentParser::BaseSpecifierListContext::baseSpecifier(size_t i) {
  return getRuleContext<ReentParser::BaseSpecifierContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::BaseSpecifierListContext::Ellipsis() {
  return getTokens(ReentParser::Ellipsis);
}

tree::TerminalNode* ReentParser::BaseSpecifierListContext::Ellipsis(size_t i) {
  return getToken(ReentParser::Ellipsis, i);
}

std::vector<tree::TerminalNode *> ReentParser::BaseSpecifierListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::BaseSpecifierListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::BaseSpecifierListContext::getRuleIndex() const {
  return ReentParser::RuleBaseSpecifierList;
}

void ReentParser::BaseSpecifierListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseSpecifierList(this);
}

void ReentParser::BaseSpecifierListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseSpecifierList(this);
}

ReentParser::BaseSpecifierListContext* ReentParser::baseSpecifierList() {
  BaseSpecifierListContext *_localctx = _tracker.createInstance<BaseSpecifierListContext>(_ctx, getState());
  enterRule(_localctx, 476, ReentParser::RuleBaseSpecifierList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2658);
    baseSpecifier();
    setState(2660);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(2659);
      match(ReentParser::Ellipsis);
    }
    setState(2669);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2662);
      match(ReentParser::Comma);
      setState(2663);
      baseSpecifier();
      setState(2665);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Ellipsis) {
        setState(2664);
        match(ReentParser::Ellipsis);
      }
      setState(2671);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseSpecifierContext ------------------------------------------------------------------

ReentParser::BaseSpecifierContext::BaseSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::BaseTypeSpecifierContext* ReentParser::BaseSpecifierContext::baseTypeSpecifier() {
  return getRuleContext<ReentParser::BaseTypeSpecifierContext>(0);
}

tree::TerminalNode* ReentParser::BaseSpecifierContext::Virtual() {
  return getToken(ReentParser::Virtual, 0);
}

ReentParser::AccessSpecifierContext* ReentParser::BaseSpecifierContext::accessSpecifier() {
  return getRuleContext<ReentParser::AccessSpecifierContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::BaseSpecifierContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}


size_t ReentParser::BaseSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleBaseSpecifier;
}

void ReentParser::BaseSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseSpecifier(this);
}

void ReentParser::BaseSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseSpecifier(this);
}

ReentParser::BaseSpecifierContext* ReentParser::baseSpecifier() {
  BaseSpecifierContext *_localctx = _tracker.createInstance<BaseSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 478, ReentParser::RuleBaseSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2673);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
      setState(2672);
      attributeSpecifierSeq();
    }
    setState(2687);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        setState(2675);
        baseTypeSpecifier();
        break;
      }

      case ReentParser::Virtual: {
        setState(2676);
        match(ReentParser::Virtual);
        setState(2678);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (((((_la - 103) & ~ 0x3fULL) == 0) &&
          ((1ULL << (_la - 103)) & ((1ULL << (ReentParser::Private - 103))
          | (1ULL << (ReentParser::Protected - 103))
          | (1ULL << (ReentParser::Public - 103)))) != 0)) {
          setState(2677);
          accessSpecifier();
        }
        setState(2680);
        baseTypeSpecifier();
        break;
      }

      case ReentParser::Private:
      case ReentParser::Protected:
      case ReentParser::Public: {
        setState(2681);
        accessSpecifier();
        setState(2683);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Virtual) {
          setState(2682);
          match(ReentParser::Virtual);
        }
        setState(2685);
        baseTypeSpecifier();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ClassOrDeclTypeContext ------------------------------------------------------------------

ReentParser::ClassOrDeclTypeContext::ClassOrDeclTypeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassNameContext* ReentParser::ClassOrDeclTypeContext::className() {
  return getRuleContext<ReentParser::ClassNameContext>(0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::ClassOrDeclTypeContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

ReentParser::DecltypeSpecifierContext* ReentParser::ClassOrDeclTypeContext::decltypeSpecifier() {
  return getRuleContext<ReentParser::DecltypeSpecifierContext>(0);
}


size_t ReentParser::ClassOrDeclTypeContext::getRuleIndex() const {
  return ReentParser::RuleClassOrDeclType;
}

void ReentParser::ClassOrDeclTypeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterClassOrDeclType(this);
}

void ReentParser::ClassOrDeclTypeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitClassOrDeclType(this);
}

ReentParser::ClassOrDeclTypeContext* ReentParser::classOrDeclType() {
  ClassOrDeclTypeContext *_localctx = _tracker.createInstance<ClassOrDeclTypeContext>(_ctx, getState());
  enterRule(_localctx, 480, ReentParser::RuleClassOrDeclType);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2694);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 319, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2690);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 318, _ctx)) {
      case 1: {
        setState(2689);
        nestedNameSpecifier(0);
        break;
      }

      default:
        break;
      }
      setState(2692);
      className();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2693);
      decltypeSpecifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BaseTypeSpecifierContext ------------------------------------------------------------------

ReentParser::BaseTypeSpecifierContext::BaseTypeSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassOrDeclTypeContext* ReentParser::BaseTypeSpecifierContext::classOrDeclType() {
  return getRuleContext<ReentParser::ClassOrDeclTypeContext>(0);
}


size_t ReentParser::BaseTypeSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleBaseTypeSpecifier;
}

void ReentParser::BaseTypeSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBaseTypeSpecifier(this);
}

void ReentParser::BaseTypeSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBaseTypeSpecifier(this);
}

ReentParser::BaseTypeSpecifierContext* ReentParser::baseTypeSpecifier() {
  BaseTypeSpecifierContext *_localctx = _tracker.createInstance<BaseTypeSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 482, ReentParser::RuleBaseTypeSpecifier);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2696);
    classOrDeclType();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AccessSpecifierContext ------------------------------------------------------------------

ReentParser::AccessSpecifierContext::AccessSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::AccessSpecifierContext::Private() {
  return getToken(ReentParser::Private, 0);
}

tree::TerminalNode* ReentParser::AccessSpecifierContext::Protected() {
  return getToken(ReentParser::Protected, 0);
}

tree::TerminalNode* ReentParser::AccessSpecifierContext::Public() {
  return getToken(ReentParser::Public, 0);
}


size_t ReentParser::AccessSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleAccessSpecifier;
}

void ReentParser::AccessSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAccessSpecifier(this);
}

void ReentParser::AccessSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAccessSpecifier(this);
}

ReentParser::AccessSpecifierContext* ReentParser::accessSpecifier() {
  AccessSpecifierContext *_localctx = _tracker.createInstance<AccessSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 484, ReentParser::RuleAccessSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2698);
    _la = _input->LA(1);
    if (!(((((_la - 103) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 103)) & ((1ULL << (ReentParser::Private - 103))
      | (1ULL << (ReentParser::Protected - 103))
      | (1ULL << (ReentParser::Public - 103)))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConversionFunctionIdContext ------------------------------------------------------------------

ReentParser::ConversionFunctionIdContext::ConversionFunctionIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ConversionFunctionIdContext::Operator() {
  return getToken(ReentParser::Operator, 0);
}

ReentParser::ConversionTypeIdContext* ReentParser::ConversionFunctionIdContext::conversionTypeId() {
  return getRuleContext<ReentParser::ConversionTypeIdContext>(0);
}


size_t ReentParser::ConversionFunctionIdContext::getRuleIndex() const {
  return ReentParser::RuleConversionFunctionId;
}

void ReentParser::ConversionFunctionIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConversionFunctionId(this);
}

void ReentParser::ConversionFunctionIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConversionFunctionId(this);
}

ReentParser::ConversionFunctionIdContext* ReentParser::conversionFunctionId() {
  ConversionFunctionIdContext *_localctx = _tracker.createInstance<ConversionFunctionIdContext>(_ctx, getState());
  enterRule(_localctx, 486, ReentParser::RuleConversionFunctionId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2700);
    match(ReentParser::Operator);
    setState(2701);
    conversionTypeId();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConversionTypeIdContext ------------------------------------------------------------------

ReentParser::ConversionTypeIdContext::ConversionTypeIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TypeSpecifierSeqContext* ReentParser::ConversionTypeIdContext::typeSpecifierSeq() {
  return getRuleContext<ReentParser::TypeSpecifierSeqContext>(0);
}

ReentParser::ConversionDeclaratorContext* ReentParser::ConversionTypeIdContext::conversionDeclarator() {
  return getRuleContext<ReentParser::ConversionDeclaratorContext>(0);
}


size_t ReentParser::ConversionTypeIdContext::getRuleIndex() const {
  return ReentParser::RuleConversionTypeId;
}

void ReentParser::ConversionTypeIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConversionTypeId(this);
}

void ReentParser::ConversionTypeIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConversionTypeId(this);
}

ReentParser::ConversionTypeIdContext* ReentParser::conversionTypeId() {
  ConversionTypeIdContext *_localctx = _tracker.createInstance<ConversionTypeIdContext>(_ctx, getState());
  enterRule(_localctx, 488, ReentParser::RuleConversionTypeId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2703);
    typeSpecifierSeq();
    setState(2705);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 320, _ctx)) {
    case 1: {
      setState(2704);
      conversionDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConversionDeclaratorContext ------------------------------------------------------------------

ReentParser::ConversionDeclaratorContext::ConversionDeclaratorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::PointerOperatorContext* ReentParser::ConversionDeclaratorContext::pointerOperator() {
  return getRuleContext<ReentParser::PointerOperatorContext>(0);
}

ReentParser::ConversionDeclaratorContext* ReentParser::ConversionDeclaratorContext::conversionDeclarator() {
  return getRuleContext<ReentParser::ConversionDeclaratorContext>(0);
}


size_t ReentParser::ConversionDeclaratorContext::getRuleIndex() const {
  return ReentParser::RuleConversionDeclarator;
}

void ReentParser::ConversionDeclaratorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConversionDeclarator(this);
}

void ReentParser::ConversionDeclaratorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConversionDeclarator(this);
}

ReentParser::ConversionDeclaratorContext* ReentParser::conversionDeclarator() {
  ConversionDeclaratorContext *_localctx = _tracker.createInstance<ConversionDeclaratorContext>(_ctx, getState());
  enterRule(_localctx, 490, ReentParser::RuleConversionDeclarator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2707);
    pointerOperator();
    setState(2709);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 321, _ctx)) {
    case 1: {
      setState(2708);
      conversionDeclarator();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ConstructorInitializerContext ------------------------------------------------------------------

ReentParser::ConstructorInitializerContext::ConstructorInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ConstructorInitializerContext::Colon() {
  return getToken(ReentParser::Colon, 0);
}

ReentParser::MemInitializerListContext* ReentParser::ConstructorInitializerContext::memInitializerList() {
  return getRuleContext<ReentParser::MemInitializerListContext>(0);
}


size_t ReentParser::ConstructorInitializerContext::getRuleIndex() const {
  return ReentParser::RuleConstructorInitializer;
}

void ReentParser::ConstructorInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConstructorInitializer(this);
}

void ReentParser::ConstructorInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConstructorInitializer(this);
}

ReentParser::ConstructorInitializerContext* ReentParser::constructorInitializer() {
  ConstructorInitializerContext *_localctx = _tracker.createInstance<ConstructorInitializerContext>(_ctx, getState());
  enterRule(_localctx, 492, ReentParser::RuleConstructorInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2711);
    match(ReentParser::Colon);
    setState(2712);
    memInitializerList();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemInitializerListContext ------------------------------------------------------------------

ReentParser::MemInitializerListContext::MemInitializerListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::MemInitializerContext *> ReentParser::MemInitializerListContext::memInitializer() {
  return getRuleContexts<ReentParser::MemInitializerContext>();
}

ReentParser::MemInitializerContext* ReentParser::MemInitializerListContext::memInitializer(size_t i) {
  return getRuleContext<ReentParser::MemInitializerContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::MemInitializerListContext::Ellipsis() {
  return getTokens(ReentParser::Ellipsis);
}

tree::TerminalNode* ReentParser::MemInitializerListContext::Ellipsis(size_t i) {
  return getToken(ReentParser::Ellipsis, i);
}

std::vector<tree::TerminalNode *> ReentParser::MemInitializerListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::MemInitializerListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::MemInitializerListContext::getRuleIndex() const {
  return ReentParser::RuleMemInitializerList;
}

void ReentParser::MemInitializerListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemInitializerList(this);
}

void ReentParser::MemInitializerListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemInitializerList(this);
}

ReentParser::MemInitializerListContext* ReentParser::memInitializerList() {
  MemInitializerListContext *_localctx = _tracker.createInstance<MemInitializerListContext>(_ctx, getState());
  enterRule(_localctx, 494, ReentParser::RuleMemInitializerList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2714);
    memInitializer();
    setState(2716);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(2715);
      match(ReentParser::Ellipsis);
    }
    setState(2725);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2718);
      match(ReentParser::Comma);
      setState(2719);
      memInitializer();
      setState(2721);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Ellipsis) {
        setState(2720);
        match(ReentParser::Ellipsis);
      }
      setState(2727);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemInitializerContext ------------------------------------------------------------------

ReentParser::MemInitializerContext::MemInitializerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::MeminitializeridContext* ReentParser::MemInitializerContext::meminitializerid() {
  return getRuleContext<ReentParser::MeminitializeridContext>(0);
}

tree::TerminalNode* ReentParser::MemInitializerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::MemInitializerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::BracedInitListContext* ReentParser::MemInitializerContext::bracedInitList() {
  return getRuleContext<ReentParser::BracedInitListContext>(0);
}

ReentParser::ExpressionListContext* ReentParser::MemInitializerContext::expressionList() {
  return getRuleContext<ReentParser::ExpressionListContext>(0);
}


size_t ReentParser::MemInitializerContext::getRuleIndex() const {
  return ReentParser::RuleMemInitializer;
}

void ReentParser::MemInitializerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemInitializer(this);
}

void ReentParser::MemInitializerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemInitializer(this);
}

ReentParser::MemInitializerContext* ReentParser::memInitializer() {
  MemInitializerContext *_localctx = _tracker.createInstance<MemInitializerContext>(_ctx, getState());
  enterRule(_localctx, 496, ReentParser::RuleMemInitializer);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2728);
    meminitializerid();
    setState(2735);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::LeftParen: {
        setState(2729);
        match(ReentParser::LeftParen);
        setState(2731);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 325, _ctx)) {
        case 1: {
          setState(2730);
          expressionList();
          break;
        }

        default:
          break;
        }
        setState(2733);
        match(ReentParser::RightParen);
        break;
      }

      case ReentParser::LeftBrace: {
        setState(2734);
        bracedInitList();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MeminitializeridContext ------------------------------------------------------------------

ReentParser::MeminitializeridContext::MeminitializeridContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::ClassOrDeclTypeContext* ReentParser::MeminitializeridContext::classOrDeclType() {
  return getRuleContext<ReentParser::ClassOrDeclTypeContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::MeminitializeridContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::MeminitializeridContext::getRuleIndex() const {
  return ReentParser::RuleMeminitializerid;
}

void ReentParser::MeminitializeridContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeminitializerid(this);
}

void ReentParser::MeminitializeridContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeminitializerid(this);
}

ReentParser::MeminitializeridContext* ReentParser::meminitializerid() {
  MeminitializeridContext *_localctx = _tracker.createInstance<MeminitializeridContext>(_ctx, getState());
  enterRule(_localctx, 498, ReentParser::RuleMeminitializerid);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2739);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 327, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2737);
      classOrDeclType();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2738);
      anyIdentifier();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OperatorFunctionIdContext ------------------------------------------------------------------

ReentParser::OperatorFunctionIdContext::OperatorFunctionIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::OperatorFunctionIdContext::Operator() {
  return getToken(ReentParser::Operator, 0);
}

ReentParser::TheOperatorContext* ReentParser::OperatorFunctionIdContext::theOperator() {
  return getRuleContext<ReentParser::TheOperatorContext>(0);
}


size_t ReentParser::OperatorFunctionIdContext::getRuleIndex() const {
  return ReentParser::RuleOperatorFunctionId;
}

void ReentParser::OperatorFunctionIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOperatorFunctionId(this);
}

void ReentParser::OperatorFunctionIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOperatorFunctionId(this);
}

ReentParser::OperatorFunctionIdContext* ReentParser::operatorFunctionId() {
  OperatorFunctionIdContext *_localctx = _tracker.createInstance<OperatorFunctionIdContext>(_ctx, getState());
  enterRule(_localctx, 500, ReentParser::RuleOperatorFunctionId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2741);
    match(ReentParser::Operator);
    setState(2742);
    theOperator();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralOperatorIdContext ------------------------------------------------------------------

ReentParser::LiteralOperatorIdContext::LiteralOperatorIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::LiteralOperatorIdContext::Operator() {
  return getToken(ReentParser::Operator, 0);
}

tree::TerminalNode* ReentParser::LiteralOperatorIdContext::StringLiteral() {
  return getToken(ReentParser::StringLiteral, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::LiteralOperatorIdContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

tree::TerminalNode* ReentParser::LiteralOperatorIdContext::UserDefinedStringLiteral() {
  return getToken(ReentParser::UserDefinedStringLiteral, 0);
}


size_t ReentParser::LiteralOperatorIdContext::getRuleIndex() const {
  return ReentParser::RuleLiteralOperatorId;
}

void ReentParser::LiteralOperatorIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteralOperatorId(this);
}

void ReentParser::LiteralOperatorIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteralOperatorId(this);
}

ReentParser::LiteralOperatorIdContext* ReentParser::literalOperatorId() {
  LiteralOperatorIdContext *_localctx = _tracker.createInstance<LiteralOperatorIdContext>(_ctx, getState());
  enterRule(_localctx, 502, ReentParser::RuleLiteralOperatorId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2744);
    match(ReentParser::Operator);
    setState(2748);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::StringLiteral: {
        setState(2745);
        match(ReentParser::StringLiteral);
        setState(2746);
        anyIdentifier();
        break;
      }

      case ReentParser::UserDefinedStringLiteral: {
        setState(2747);
        match(ReentParser::UserDefinedStringLiteral);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateDeclarationContext ------------------------------------------------------------------

ReentParser::TemplateDeclarationContext::TemplateDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TemplateDeclarationContext::Template() {
  return getToken(ReentParser::Template, 0);
}

tree::TerminalNode* ReentParser::TemplateDeclarationContext::Less() {
  return getToken(ReentParser::Less, 0);
}

ReentParser::TemplateparameterListContext* ReentParser::TemplateDeclarationContext::templateparameterList() {
  return getRuleContext<ReentParser::TemplateparameterListContext>(0);
}

tree::TerminalNode* ReentParser::TemplateDeclarationContext::Greater() {
  return getToken(ReentParser::Greater, 0);
}

ReentParser::DeclarationContext* ReentParser::TemplateDeclarationContext::declaration() {
  return getRuleContext<ReentParser::DeclarationContext>(0);
}


size_t ReentParser::TemplateDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleTemplateDeclaration;
}

void ReentParser::TemplateDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateDeclaration(this);
}

void ReentParser::TemplateDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateDeclaration(this);
}

ReentParser::TemplateDeclarationContext* ReentParser::templateDeclaration() {
  TemplateDeclarationContext *_localctx = _tracker.createInstance<TemplateDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 504, ReentParser::RuleTemplateDeclaration);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2750);
    match(ReentParser::Template);
    setState(2751);
    match(ReentParser::Less);
    setState(2752);
    templateparameterList();
    setState(2753);
    match(ReentParser::Greater);
    setState(2754);
    declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateparameterListContext ------------------------------------------------------------------

ReentParser::TemplateparameterListContext::TemplateparameterListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::TemplateParameterContext *> ReentParser::TemplateparameterListContext::templateParameter() {
  return getRuleContexts<ReentParser::TemplateParameterContext>();
}

ReentParser::TemplateParameterContext* ReentParser::TemplateparameterListContext::templateParameter(size_t i) {
  return getRuleContext<ReentParser::TemplateParameterContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::TemplateparameterListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::TemplateparameterListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::TemplateparameterListContext::getRuleIndex() const {
  return ReentParser::RuleTemplateparameterList;
}

void ReentParser::TemplateparameterListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateparameterList(this);
}

void ReentParser::TemplateparameterListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateparameterList(this);
}

ReentParser::TemplateparameterListContext* ReentParser::templateparameterList() {
  TemplateparameterListContext *_localctx = _tracker.createInstance<TemplateparameterListContext>(_ctx, getState());
  enterRule(_localctx, 506, ReentParser::RuleTemplateparameterList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2756);
    templateParameter();
    setState(2761);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2757);
      match(ReentParser::Comma);
      setState(2758);
      templateParameter();
      setState(2763);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateParameterContext ------------------------------------------------------------------

ReentParser::TemplateParameterContext::TemplateParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TypeParameterContext* ReentParser::TemplateParameterContext::typeParameter() {
  return getRuleContext<ReentParser::TypeParameterContext>(0);
}

ReentParser::ParameterDeclarationContext* ReentParser::TemplateParameterContext::parameterDeclaration() {
  return getRuleContext<ReentParser::ParameterDeclarationContext>(0);
}


size_t ReentParser::TemplateParameterContext::getRuleIndex() const {
  return ReentParser::RuleTemplateParameter;
}

void ReentParser::TemplateParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateParameter(this);
}

void ReentParser::TemplateParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateParameter(this);
}

ReentParser::TemplateParameterContext* ReentParser::templateParameter() {
  TemplateParameterContext *_localctx = _tracker.createInstance<TemplateParameterContext>(_ctx, getState());
  enterRule(_localctx, 508, ReentParser::RuleTemplateParameter);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2766);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 330, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2764);
      typeParameter();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2765);
      parameterDeclaration();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeParameterContext ------------------------------------------------------------------

ReentParser::TypeParameterContext::TypeParameterContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TypeParameterContext::Class() {
  return getToken(ReentParser::Class, 0);
}

tree::TerminalNode* ReentParser::TypeParameterContext::Typename_() {
  return getToken(ReentParser::Typename_, 0);
}

tree::TerminalNode* ReentParser::TypeParameterContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

ReentParser::TheTypeIdContext* ReentParser::TypeParameterContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

tree::TerminalNode* ReentParser::TypeParameterContext::Template() {
  return getToken(ReentParser::Template, 0);
}

tree::TerminalNode* ReentParser::TypeParameterContext::Less() {
  return getToken(ReentParser::Less, 0);
}

ReentParser::TemplateparameterListContext* ReentParser::TypeParameterContext::templateparameterList() {
  return getRuleContext<ReentParser::TemplateparameterListContext>(0);
}

tree::TerminalNode* ReentParser::TypeParameterContext::Greater() {
  return getToken(ReentParser::Greater, 0);
}

tree::TerminalNode* ReentParser::TypeParameterContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}

ReentParser::AnyIdentifierContext* ReentParser::TypeParameterContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::TypeParameterContext::getRuleIndex() const {
  return ReentParser::RuleTypeParameter;
}

void ReentParser::TypeParameterContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeParameter(this);
}

void ReentParser::TypeParameterContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeParameter(this);
}

ReentParser::TypeParameterContext* ReentParser::typeParameter() {
  TypeParameterContext *_localctx = _tracker.createInstance<TypeParameterContext>(_ctx, getState());
  enterRule(_localctx, 510, ReentParser::RuleTypeParameter);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2777);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Class:
      case ReentParser::Template: {
        setState(2773);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Template) {
          setState(2768);
          match(ReentParser::Template);
          setState(2769);
          match(ReentParser::Less);
          setState(2770);
          templateparameterList();
          setState(2771);
          match(ReentParser::Greater);
        }
        setState(2775);
        match(ReentParser::Class);
        break;
      }

      case ReentParser::Typename_: {
        setState(2776);
        match(ReentParser::Typename_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(2790);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 336, _ctx)) {
    case 1: {
      setState(2780);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Ellipsis) {
        setState(2779);
        match(ReentParser::Ellipsis);
      }
      setState(2783);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ReentParser::Begin)
        | (1ULL << ReentParser::Clustered)
        | (1ULL << ReentParser::Common)
        | (1ULL << ReentParser::Depends)
        | (1ULL << ReentParser::End)
        | (1ULL << ReentParser::Global)
        | (1ULL << ReentParser::Gpu)
        | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
        | (1ULL << (ReentParser::Local - 65))
        | (1ULL << (ReentParser::MarkPreCondition - 65))
        | (1ULL << (ReentParser::MarkState - 65))
        | (1ULL << (ReentParser::Out - 65))
        | (1ULL << (ReentParser::Plan - 65))
        | (1ULL << (ReentParser::Reset - 65))
        | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

      || _la == ReentParser::Identifier) {
        setState(2782);
        anyIdentifier();
      }
      break;
    }

    case 2: {
      setState(2786);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & ((1ULL << ReentParser::Begin)
        | (1ULL << ReentParser::Clustered)
        | (1ULL << ReentParser::Common)
        | (1ULL << ReentParser::Depends)
        | (1ULL << ReentParser::End)
        | (1ULL << ReentParser::Global)
        | (1ULL << ReentParser::Gpu)
        | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
        | (1ULL << (ReentParser::Local - 65))
        | (1ULL << (ReentParser::MarkPreCondition - 65))
        | (1ULL << (ReentParser::MarkState - 65))
        | (1ULL << (ReentParser::Out - 65))
        | (1ULL << (ReentParser::Plan - 65))
        | (1ULL << (ReentParser::Reset - 65))
        | (1ULL << (ReentParser::Set - 65)))) != 0) || _la == ReentParser::Vectorized

      || _la == ReentParser::Identifier) {
        setState(2785);
        anyIdentifier();
      }
      setState(2788);
      match(ReentParser::Assign);
      setState(2789);
      theTypeId();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimpleTemplateIdContext ------------------------------------------------------------------

ReentParser::SimpleTemplateIdContext::SimpleTemplateIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::SimpleTemplateIdContext::Less() {
  return getToken(ReentParser::Less, 0);
}

tree::TerminalNode* ReentParser::SimpleTemplateIdContext::Greater() {
  return getToken(ReentParser::Greater, 0);
}

ReentParser::TemplateNameContext* ReentParser::SimpleTemplateIdContext::templateName() {
  return getRuleContext<ReentParser::TemplateNameContext>(0);
}

ReentParser::TemplateArgumentListContext* ReentParser::SimpleTemplateIdContext::templateArgumentList() {
  return getRuleContext<ReentParser::TemplateArgumentListContext>(0);
}


size_t ReentParser::SimpleTemplateIdContext::getRuleIndex() const {
  return ReentParser::RuleSimpleTemplateId;
}

void ReentParser::SimpleTemplateIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimpleTemplateId(this);
}

void ReentParser::SimpleTemplateIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimpleTemplateId(this);
}

ReentParser::SimpleTemplateIdContext* ReentParser::simpleTemplateId() {
  SimpleTemplateIdContext *_localctx = _tracker.createInstance<SimpleTemplateIdContext>(_ctx, getState());
  enterRule(_localctx, 512, ReentParser::RuleSimpleTemplateId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2792);
    dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id = templateName();
    setState(2793);
    match(ReentParser::Less);
    setState(2795);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 337, _ctx)) {
    case 1: {
      setState(2794);
      templateArgumentList();
      break;
    }

    default:
      break;
    }
    setState(2797);
    match(ReentParser::Greater);
     if (!allow_clustered && ((dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id != nullptr ? _input->getText(dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id->start, dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id->stop) : nullptr) == "cfunneled_predictor_in" || (dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id != nullptr ? _input->getText(dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id->start, dynamic_cast<SimpleTemplateIdContext *>(_localctx)->id->stop) : nullptr) == "cfunneled_predictor_out" ))
    		throw FailedPredicateException(this, "cfunneled_predictor_{in|out} can't be used without '#pragma plan clustered'");
    	
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateIdContext ------------------------------------------------------------------

ReentParser::TemplateIdContext::TemplateIdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::SimpleTemplateIdContext* ReentParser::TemplateIdContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

tree::TerminalNode* ReentParser::TemplateIdContext::Less() {
  return getToken(ReentParser::Less, 0);
}

tree::TerminalNode* ReentParser::TemplateIdContext::Greater() {
  return getToken(ReentParser::Greater, 0);
}

ReentParser::OperatorFunctionIdContext* ReentParser::TemplateIdContext::operatorFunctionId() {
  return getRuleContext<ReentParser::OperatorFunctionIdContext>(0);
}

ReentParser::LiteralOperatorIdContext* ReentParser::TemplateIdContext::literalOperatorId() {
  return getRuleContext<ReentParser::LiteralOperatorIdContext>(0);
}

ReentParser::TemplateArgumentListContext* ReentParser::TemplateIdContext::templateArgumentList() {
  return getRuleContext<ReentParser::TemplateArgumentListContext>(0);
}


size_t ReentParser::TemplateIdContext::getRuleIndex() const {
  return ReentParser::RuleTemplateId;
}

void ReentParser::TemplateIdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateId(this);
}

void ReentParser::TemplateIdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateId(this);
}

ReentParser::TemplateIdContext* ReentParser::templateId() {
  TemplateIdContext *_localctx = _tracker.createInstance<TemplateIdContext>(_ctx, getState());
  enterRule(_localctx, 514, ReentParser::RuleTemplateId);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2811);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Depends:
      case ReentParser::End:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Local:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Vectorized:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(2800);
        simpleTemplateId();
        break;
      }

      case ReentParser::Operator: {
        enterOuterAlt(_localctx, 2);
        setState(2803);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 338, _ctx)) {
        case 1: {
          setState(2801);
          operatorFunctionId();
          break;
        }

        case 2: {
          setState(2802);
          literalOperatorId();
          break;
        }

        default:
          break;
        }
        setState(2805);
        match(ReentParser::Less);
        setState(2807);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 339, _ctx)) {
        case 1: {
          setState(2806);
          templateArgumentList();
          break;
        }

        default:
          break;
        }
        setState(2809);
        match(ReentParser::Greater);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateNameContext ------------------------------------------------------------------

ReentParser::TemplateNameContext::TemplateNameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::AnyIdentifierContext* ReentParser::TemplateNameContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}


size_t ReentParser::TemplateNameContext::getRuleIndex() const {
  return ReentParser::RuleTemplateName;
}

void ReentParser::TemplateNameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateName(this);
}

void ReentParser::TemplateNameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateName(this);
}

ReentParser::TemplateNameContext* ReentParser::templateName() {
  TemplateNameContext *_localctx = _tracker.createInstance<TemplateNameContext>(_ctx, getState());
  enterRule(_localctx, 516, ReentParser::RuleTemplateName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2813);
    anyIdentifier();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateArgumentListContext ------------------------------------------------------------------

ReentParser::TemplateArgumentListContext::TemplateArgumentListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::TemplateArgumentContext *> ReentParser::TemplateArgumentListContext::templateArgument() {
  return getRuleContexts<ReentParser::TemplateArgumentContext>();
}

ReentParser::TemplateArgumentContext* ReentParser::TemplateArgumentListContext::templateArgument(size_t i) {
  return getRuleContext<ReentParser::TemplateArgumentContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::TemplateArgumentListContext::Ellipsis() {
  return getTokens(ReentParser::Ellipsis);
}

tree::TerminalNode* ReentParser::TemplateArgumentListContext::Ellipsis(size_t i) {
  return getToken(ReentParser::Ellipsis, i);
}

std::vector<tree::TerminalNode *> ReentParser::TemplateArgumentListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::TemplateArgumentListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::TemplateArgumentListContext::getRuleIndex() const {
  return ReentParser::RuleTemplateArgumentList;
}

void ReentParser::TemplateArgumentListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateArgumentList(this);
}

void ReentParser::TemplateArgumentListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateArgumentList(this);
}

ReentParser::TemplateArgumentListContext* ReentParser::templateArgumentList() {
  TemplateArgumentListContext *_localctx = _tracker.createInstance<TemplateArgumentListContext>(_ctx, getState());
  enterRule(_localctx, 518, ReentParser::RuleTemplateArgumentList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2815);
    templateArgument();
    setState(2817);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(2816);
      match(ReentParser::Ellipsis);
    }
    setState(2826);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2819);
      match(ReentParser::Comma);
      setState(2820);
      templateArgument();
      setState(2822);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Ellipsis) {
        setState(2821);
        match(ReentParser::Ellipsis);
      }
      setState(2828);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TemplateArgumentContext ------------------------------------------------------------------

ReentParser::TemplateArgumentContext::TemplateArgumentContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TheTypeIdContext* ReentParser::TemplateArgumentContext::theTypeId() {
  return getRuleContext<ReentParser::TheTypeIdContext>(0);
}

ReentParser::ConstantExpressionContext* ReentParser::TemplateArgumentContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

ReentParser::IdExpressionContext* ReentParser::TemplateArgumentContext::idExpression() {
  return getRuleContext<ReentParser::IdExpressionContext>(0);
}


size_t ReentParser::TemplateArgumentContext::getRuleIndex() const {
  return ReentParser::RuleTemplateArgument;
}

void ReentParser::TemplateArgumentContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTemplateArgument(this);
}

void ReentParser::TemplateArgumentContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTemplateArgument(this);
}

ReentParser::TemplateArgumentContext* ReentParser::templateArgument() {
  TemplateArgumentContext *_localctx = _tracker.createInstance<TemplateArgumentContext>(_ctx, getState());
  enterRule(_localctx, 520, ReentParser::RuleTemplateArgument);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2832);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 344, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2829);
      theTypeId();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2830);
      constantExpression();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2831);
      idExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeNameSpecifierContext ------------------------------------------------------------------

ReentParser::TypeNameSpecifierContext::TypeNameSpecifierContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TypeNameSpecifierContext::Typename_() {
  return getToken(ReentParser::Typename_, 0);
}

ReentParser::NestedNameSpecifierContext* ReentParser::TypeNameSpecifierContext::nestedNameSpecifier() {
  return getRuleContext<ReentParser::NestedNameSpecifierContext>(0);
}

ReentParser::AnyIdentifierContext* ReentParser::TypeNameSpecifierContext::anyIdentifier() {
  return getRuleContext<ReentParser::AnyIdentifierContext>(0);
}

ReentParser::SimpleTemplateIdContext* ReentParser::TypeNameSpecifierContext::simpleTemplateId() {
  return getRuleContext<ReentParser::SimpleTemplateIdContext>(0);
}

tree::TerminalNode* ReentParser::TypeNameSpecifierContext::Template() {
  return getToken(ReentParser::Template, 0);
}


size_t ReentParser::TypeNameSpecifierContext::getRuleIndex() const {
  return ReentParser::RuleTypeNameSpecifier;
}

void ReentParser::TypeNameSpecifierContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeNameSpecifier(this);
}

void ReentParser::TypeNameSpecifierContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeNameSpecifier(this);
}

ReentParser::TypeNameSpecifierContext* ReentParser::typeNameSpecifier() {
  TypeNameSpecifierContext *_localctx = _tracker.createInstance<TypeNameSpecifierContext>(_ctx, getState());
  enterRule(_localctx, 522, ReentParser::RuleTypeNameSpecifier);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2834);
    match(ReentParser::Typename_);
    setState(2835);
    nestedNameSpecifier(0);
    setState(2841);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 346, _ctx)) {
    case 1: {
      setState(2836);
      anyIdentifier();
      break;
    }

    case 2: {
      setState(2838);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Template) {
        setState(2837);
        match(ReentParser::Template);
      }
      setState(2840);
      simpleTemplateId();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitInstantiationContext ------------------------------------------------------------------

ReentParser::ExplicitInstantiationContext::ExplicitInstantiationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ExplicitInstantiationContext::Template() {
  return getToken(ReentParser::Template, 0);
}

ReentParser::DeclarationContext* ReentParser::ExplicitInstantiationContext::declaration() {
  return getRuleContext<ReentParser::DeclarationContext>(0);
}

tree::TerminalNode* ReentParser::ExplicitInstantiationContext::Extern() {
  return getToken(ReentParser::Extern, 0);
}


size_t ReentParser::ExplicitInstantiationContext::getRuleIndex() const {
  return ReentParser::RuleExplicitInstantiation;
}

void ReentParser::ExplicitInstantiationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitInstantiation(this);
}

void ReentParser::ExplicitInstantiationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitInstantiation(this);
}

ReentParser::ExplicitInstantiationContext* ReentParser::explicitInstantiation() {
  ExplicitInstantiationContext *_localctx = _tracker.createInstance<ExplicitInstantiationContext>(_ctx, getState());
  enterRule(_localctx, 524, ReentParser::RuleExplicitInstantiation);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2844);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Extern) {
      setState(2843);
      match(ReentParser::Extern);
    }
    setState(2846);
    match(ReentParser::Template);
    setState(2847);
    declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExplicitSpecializationContext ------------------------------------------------------------------

ReentParser::ExplicitSpecializationContext::ExplicitSpecializationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ExplicitSpecializationContext::Template() {
  return getToken(ReentParser::Template, 0);
}

tree::TerminalNode* ReentParser::ExplicitSpecializationContext::Less() {
  return getToken(ReentParser::Less, 0);
}

tree::TerminalNode* ReentParser::ExplicitSpecializationContext::Greater() {
  return getToken(ReentParser::Greater, 0);
}

ReentParser::DeclarationContext* ReentParser::ExplicitSpecializationContext::declaration() {
  return getRuleContext<ReentParser::DeclarationContext>(0);
}


size_t ReentParser::ExplicitSpecializationContext::getRuleIndex() const {
  return ReentParser::RuleExplicitSpecialization;
}

void ReentParser::ExplicitSpecializationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExplicitSpecialization(this);
}

void ReentParser::ExplicitSpecializationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExplicitSpecialization(this);
}

ReentParser::ExplicitSpecializationContext* ReentParser::explicitSpecialization() {
  ExplicitSpecializationContext *_localctx = _tracker.createInstance<ExplicitSpecializationContext>(_ctx, getState());
  enterRule(_localctx, 526, ReentParser::RuleExplicitSpecialization);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2849);
    match(ReentParser::Template);
    setState(2850);
    match(ReentParser::Less);
    setState(2851);
    match(ReentParser::Greater);
    setState(2852);
    declaration();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TryBlockContext ------------------------------------------------------------------

ReentParser::TryBlockContext::TryBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TryBlockContext::Try() {
  return getToken(ReentParser::Try, 0);
}

ReentParser::CompoundStatementContext* ReentParser::TryBlockContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}

ReentParser::HandlerSeqContext* ReentParser::TryBlockContext::handlerSeq() {
  return getRuleContext<ReentParser::HandlerSeqContext>(0);
}


size_t ReentParser::TryBlockContext::getRuleIndex() const {
  return ReentParser::RuleTryBlock;
}

void ReentParser::TryBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTryBlock(this);
}

void ReentParser::TryBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTryBlock(this);
}

ReentParser::TryBlockContext* ReentParser::tryBlock() {
  TryBlockContext *_localctx = _tracker.createInstance<TryBlockContext>(_ctx, getState());
  enterRule(_localctx, 528, ReentParser::RuleTryBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2854);
    match(ReentParser::Try);
    setState(2855);
    compoundStatement();
    setState(2856);
    handlerSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- FunctionTryBlockContext ------------------------------------------------------------------

ReentParser::FunctionTryBlockContext::FunctionTryBlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::FunctionTryBlockContext::Try() {
  return getToken(ReentParser::Try, 0);
}

ReentParser::CompoundStatementContext* ReentParser::FunctionTryBlockContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}

ReentParser::HandlerSeqContext* ReentParser::FunctionTryBlockContext::handlerSeq() {
  return getRuleContext<ReentParser::HandlerSeqContext>(0);
}

ReentParser::ConstructorInitializerContext* ReentParser::FunctionTryBlockContext::constructorInitializer() {
  return getRuleContext<ReentParser::ConstructorInitializerContext>(0);
}


size_t ReentParser::FunctionTryBlockContext::getRuleIndex() const {
  return ReentParser::RuleFunctionTryBlock;
}

void ReentParser::FunctionTryBlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunctionTryBlock(this);
}

void ReentParser::FunctionTryBlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunctionTryBlock(this);
}

ReentParser::FunctionTryBlockContext* ReentParser::functionTryBlock() {
  FunctionTryBlockContext *_localctx = _tracker.createInstance<FunctionTryBlockContext>(_ctx, getState());
  enterRule(_localctx, 530, ReentParser::RuleFunctionTryBlock);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2858);
    match(ReentParser::Try);
    setState(2860);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Colon) {
      setState(2859);
      constructorInitializer();
    }
    setState(2862);
    compoundStatement();
    setState(2863);
    handlerSeq();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerSeqContext ------------------------------------------------------------------

ReentParser::HandlerSeqContext::HandlerSeqContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::HandlerContext *> ReentParser::HandlerSeqContext::handler() {
  return getRuleContexts<ReentParser::HandlerContext>();
}

ReentParser::HandlerContext* ReentParser::HandlerSeqContext::handler(size_t i) {
  return getRuleContext<ReentParser::HandlerContext>(i);
}


size_t ReentParser::HandlerSeqContext::getRuleIndex() const {
  return ReentParser::RuleHandlerSeq;
}

void ReentParser::HandlerSeqContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandlerSeq(this);
}

void ReentParser::HandlerSeqContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandlerSeq(this);
}

ReentParser::HandlerSeqContext* ReentParser::handlerSeq() {
  HandlerSeqContext *_localctx = _tracker.createInstance<HandlerSeqContext>(_ctx, getState());
  enterRule(_localctx, 532, ReentParser::RuleHandlerSeq);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(2866); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(2865);
              handler();
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(2868); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 349, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- HandlerContext ------------------------------------------------------------------

ReentParser::HandlerContext::HandlerContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::HandlerContext::Catch() {
  return getToken(ReentParser::Catch, 0);
}

tree::TerminalNode* ReentParser::HandlerContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ExceptionDeclarationContext* ReentParser::HandlerContext::exceptionDeclaration() {
  return getRuleContext<ReentParser::ExceptionDeclarationContext>(0);
}

tree::TerminalNode* ReentParser::HandlerContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::CompoundStatementContext* ReentParser::HandlerContext::compoundStatement() {
  return getRuleContext<ReentParser::CompoundStatementContext>(0);
}


size_t ReentParser::HandlerContext::getRuleIndex() const {
  return ReentParser::RuleHandler;
}

void ReentParser::HandlerContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler(this);
}

void ReentParser::HandlerContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler(this);
}

ReentParser::HandlerContext* ReentParser::handler() {
  HandlerContext *_localctx = _tracker.createInstance<HandlerContext>(_ctx, getState());
  enterRule(_localctx, 534, ReentParser::RuleHandler);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2870);
    match(ReentParser::Catch);
    setState(2871);
    match(ReentParser::LeftParen);
    setState(2872);
    exceptionDeclaration();
    setState(2873);
    match(ReentParser::RightParen);
    setState(2874);
    compoundStatement();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionDeclarationContext ------------------------------------------------------------------

ReentParser::ExceptionDeclarationContext::ExceptionDeclarationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::TypeSpecifierSeqContext* ReentParser::ExceptionDeclarationContext::typeSpecifierSeq() {
  return getRuleContext<ReentParser::TypeSpecifierSeqContext>(0);
}

ReentParser::AttributeSpecifierSeqContext* ReentParser::ExceptionDeclarationContext::attributeSpecifierSeq() {
  return getRuleContext<ReentParser::AttributeSpecifierSeqContext>(0);
}

ReentParser::DeclaratorContext* ReentParser::ExceptionDeclarationContext::declarator() {
  return getRuleContext<ReentParser::DeclaratorContext>(0);
}

ReentParser::AbstractDeclaratorContext* ReentParser::ExceptionDeclarationContext::abstractDeclarator() {
  return getRuleContext<ReentParser::AbstractDeclaratorContext>(0);
}

tree::TerminalNode* ReentParser::ExceptionDeclarationContext::Ellipsis() {
  return getToken(ReentParser::Ellipsis, 0);
}


size_t ReentParser::ExceptionDeclarationContext::getRuleIndex() const {
  return ReentParser::RuleExceptionDeclaration;
}

void ReentParser::ExceptionDeclarationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionDeclaration(this);
}

void ReentParser::ExceptionDeclarationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionDeclaration(this);
}

ReentParser::ExceptionDeclarationContext* ReentParser::exceptionDeclaration() {
  ExceptionDeclarationContext *_localctx = _tracker.createInstance<ExceptionDeclarationContext>(_ctx, getState());
  enterRule(_localctx, 536, ReentParser::RuleExceptionDeclaration);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2885);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Alignas:
      case ReentParser::Auto:
      case ReentParser::Begin:
      case ReentParser::Bool:
      case ReentParser::Cfunnel:
      case ReentParser::Char:
      case ReentParser::Char16:
      case ReentParser::Char32:
      case ReentParser::Class:
      case ReentParser::Clustered:
      case ReentParser::Common:
      case ReentParser::Const:
      case ReentParser::Csem:
      case ReentParser::Cvar:
      case ReentParser::Decltype:
      case ReentParser::Depends:
      case ReentParser::Double:
      case ReentParser::End:
      case ReentParser::Enum:
      case ReentParser::Float:
      case ReentParser::Funnel:
      case ReentParser::Global:
      case ReentParser::Gpu:
      case ReentParser::Id:
      case ReentParser::In:
      case ReentParser::Int:
      case ReentParser::Local:
      case ReentParser::Long:
      case ReentParser::MarkPreCondition:
      case ReentParser::MarkState:
      case ReentParser::Out:
      case ReentParser::Plan:
      case ReentParser::Plan_item_type:
      case ReentParser::Plan_type:
      case ReentParser::Reset:
      case ReentParser::Set:
      case ReentParser::Short:
      case ReentParser::Signed:
      case ReentParser::Soft_transact_array:
      case ReentParser::Soft_transact_in:
      case ReentParser::Soft_transact_out:
      case ReentParser::Soft_transact_var:
      case ReentParser::Struct:
      case ReentParser::Typename_:
      case ReentParser::Union:
      case ReentParser::Unsigned:
      case ReentParser::Vectorized:
      case ReentParser::Void:
      case ReentParser::Volatile:
      case ReentParser::Wchar:
      case ReentParser::LeftBracket:
      case ReentParser::Doublecolon:
      case ReentParser::Identifier: {
        enterOuterAlt(_localctx, 1);
        setState(2877);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == ReentParser::Alignas || _la == ReentParser::LeftBracket) {
          setState(2876);
          attributeSpecifierSeq();
        }
        setState(2879);
        typeSpecifierSeq();
        setState(2882);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 351, _ctx)) {
        case 1: {
          setState(2880);
          declarator();
          break;
        }

        case 2: {
          setState(2881);
          abstractDeclarator();
          break;
        }

        default:
          break;
        }
        break;
      }

      case ReentParser::Ellipsis: {
        enterOuterAlt(_localctx, 2);
        setState(2884);
        match(ReentParser::Ellipsis);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ThrowExpressionContext ------------------------------------------------------------------

ReentParser::ThrowExpressionContext::ThrowExpressionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::ThrowExpressionContext::Throw() {
  return getToken(ReentParser::Throw, 0);
}

ReentParser::AssignmentExpressionContext* ReentParser::ThrowExpressionContext::assignmentExpression() {
  return getRuleContext<ReentParser::AssignmentExpressionContext>(0);
}


size_t ReentParser::ThrowExpressionContext::getRuleIndex() const {
  return ReentParser::RuleThrowExpression;
}

void ReentParser::ThrowExpressionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterThrowExpression(this);
}

void ReentParser::ThrowExpressionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitThrowExpression(this);
}

ReentParser::ThrowExpressionContext* ReentParser::throwExpression() {
  ThrowExpressionContext *_localctx = _tracker.createInstance<ThrowExpressionContext>(_ctx, getState());
  enterRule(_localctx, 538, ReentParser::RuleThrowExpression);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2887);
    match(ReentParser::Throw);
    setState(2889);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 353, _ctx)) {
    case 1: {
      setState(2888);
      assignmentExpression();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExceptionSpecificationContext ------------------------------------------------------------------

ReentParser::ExceptionSpecificationContext::ExceptionSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::DynamicExceptionSpecificationContext* ReentParser::ExceptionSpecificationContext::dynamicExceptionSpecification() {
  return getRuleContext<ReentParser::DynamicExceptionSpecificationContext>(0);
}

ReentParser::NoeExceptSpecificationContext* ReentParser::ExceptionSpecificationContext::noeExceptSpecification() {
  return getRuleContext<ReentParser::NoeExceptSpecificationContext>(0);
}


size_t ReentParser::ExceptionSpecificationContext::getRuleIndex() const {
  return ReentParser::RuleExceptionSpecification;
}

void ReentParser::ExceptionSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExceptionSpecification(this);
}

void ReentParser::ExceptionSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExceptionSpecification(this);
}

ReentParser::ExceptionSpecificationContext* ReentParser::exceptionSpecification() {
  ExceptionSpecificationContext *_localctx = _tracker.createInstance<ExceptionSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 540, ReentParser::RuleExceptionSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2893);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Throw: {
        enterOuterAlt(_localctx, 1);
        setState(2891);
        dynamicExceptionSpecification();
        break;
      }

      case ReentParser::Noexcept: {
        enterOuterAlt(_localctx, 2);
        setState(2892);
        noeExceptSpecification();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DynamicExceptionSpecificationContext ------------------------------------------------------------------

ReentParser::DynamicExceptionSpecificationContext::DynamicExceptionSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::DynamicExceptionSpecificationContext::Throw() {
  return getToken(ReentParser::Throw, 0);
}

tree::TerminalNode* ReentParser::DynamicExceptionSpecificationContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::DynamicExceptionSpecificationContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}

ReentParser::TypeIdListContext* ReentParser::DynamicExceptionSpecificationContext::typeIdList() {
  return getRuleContext<ReentParser::TypeIdListContext>(0);
}


size_t ReentParser::DynamicExceptionSpecificationContext::getRuleIndex() const {
  return ReentParser::RuleDynamicExceptionSpecification;
}

void ReentParser::DynamicExceptionSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterDynamicExceptionSpecification(this);
}

void ReentParser::DynamicExceptionSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitDynamicExceptionSpecification(this);
}

ReentParser::DynamicExceptionSpecificationContext* ReentParser::dynamicExceptionSpecification() {
  DynamicExceptionSpecificationContext *_localctx = _tracker.createInstance<DynamicExceptionSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 542, ReentParser::RuleDynamicExceptionSpecification);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2895);
    match(ReentParser::Throw);
    setState(2896);
    match(ReentParser::LeftParen);
    setState(2898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::Auto)
      | (1ULL << ReentParser::Begin)
      | (1ULL << ReentParser::Bool)
      | (1ULL << ReentParser::Cfunnel)
      | (1ULL << ReentParser::Char)
      | (1ULL << ReentParser::Char16)
      | (1ULL << ReentParser::Char32)
      | (1ULL << ReentParser::Class)
      | (1ULL << ReentParser::Clustered)
      | (1ULL << ReentParser::Common)
      | (1ULL << ReentParser::Const)
      | (1ULL << ReentParser::Csem)
      | (1ULL << ReentParser::Cvar)
      | (1ULL << ReentParser::Decltype)
      | (1ULL << ReentParser::Depends)
      | (1ULL << ReentParser::Double)
      | (1ULL << ReentParser::End)
      | (1ULL << ReentParser::Enum)
      | (1ULL << ReentParser::Float)
      | (1ULL << ReentParser::Funnel)
      | (1ULL << ReentParser::Global)
      | (1ULL << ReentParser::Gpu)
      | (1ULL << ReentParser::Id))) != 0) || ((((_la - 65) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 65)) & ((1ULL << (ReentParser::In - 65))
      | (1ULL << (ReentParser::Int - 65))
      | (1ULL << (ReentParser::Local - 65))
      | (1ULL << (ReentParser::Long - 65))
      | (1ULL << (ReentParser::MarkPreCondition - 65))
      | (1ULL << (ReentParser::MarkState - 65))
      | (1ULL << (ReentParser::Out - 65))
      | (1ULL << (ReentParser::Plan - 65))
      | (1ULL << (ReentParser::Plan_item_type - 65))
      | (1ULL << (ReentParser::Plan_type - 65))
      | (1ULL << (ReentParser::Reset - 65))
      | (1ULL << (ReentParser::Set - 65))
      | (1ULL << (ReentParser::Short - 65))
      | (1ULL << (ReentParser::Signed - 65))
      | (1ULL << (ReentParser::Soft_transact_array - 65))
      | (1ULL << (ReentParser::Soft_transact_in - 65))
      | (1ULL << (ReentParser::Soft_transact_out - 65))
      | (1ULL << (ReentParser::Soft_transact_var - 65))
      | (1ULL << (ReentParser::Struct - 65)))) != 0) || ((((_la - 136) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 136)) & ((1ULL << (ReentParser::Typename_ - 136))
      | (1ULL << (ReentParser::Union - 136))
      | (1ULL << (ReentParser::Unsigned - 136))
      | (1ULL << (ReentParser::Vectorized - 136))
      | (1ULL << (ReentParser::Void - 136))
      | (1ULL << (ReentParser::Volatile - 136))
      | (1ULL << (ReentParser::Wchar - 136))
      | (1ULL << (ReentParser::Doublecolon - 136))
      | (1ULL << (ReentParser::Identifier - 136)))) != 0)) {
      setState(2897);
      typeIdList();
    }
    setState(2900);
    match(ReentParser::RightParen);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TypeIdListContext ------------------------------------------------------------------

ReentParser::TypeIdListContext::TypeIdListContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<ReentParser::TheTypeIdContext *> ReentParser::TypeIdListContext::theTypeId() {
  return getRuleContexts<ReentParser::TheTypeIdContext>();
}

ReentParser::TheTypeIdContext* ReentParser::TypeIdListContext::theTypeId(size_t i) {
  return getRuleContext<ReentParser::TheTypeIdContext>(i);
}

std::vector<tree::TerminalNode *> ReentParser::TypeIdListContext::Ellipsis() {
  return getTokens(ReentParser::Ellipsis);
}

tree::TerminalNode* ReentParser::TypeIdListContext::Ellipsis(size_t i) {
  return getToken(ReentParser::Ellipsis, i);
}

std::vector<tree::TerminalNode *> ReentParser::TypeIdListContext::Comma() {
  return getTokens(ReentParser::Comma);
}

tree::TerminalNode* ReentParser::TypeIdListContext::Comma(size_t i) {
  return getToken(ReentParser::Comma, i);
}


size_t ReentParser::TypeIdListContext::getRuleIndex() const {
  return ReentParser::RuleTypeIdList;
}

void ReentParser::TypeIdListContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTypeIdList(this);
}

void ReentParser::TypeIdListContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTypeIdList(this);
}

ReentParser::TypeIdListContext* ReentParser::typeIdList() {
  TypeIdListContext *_localctx = _tracker.createInstance<TypeIdListContext>(_ctx, getState());
  enterRule(_localctx, 544, ReentParser::RuleTypeIdList);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2902);
    theTypeId();
    setState(2904);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == ReentParser::Ellipsis) {
      setState(2903);
      match(ReentParser::Ellipsis);
    }
    setState(2913);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == ReentParser::Comma) {
      setState(2906);
      match(ReentParser::Comma);
      setState(2907);
      theTypeId();
      setState(2909);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == ReentParser::Ellipsis) {
        setState(2908);
        match(ReentParser::Ellipsis);
      }
      setState(2915);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NoeExceptSpecificationContext ------------------------------------------------------------------

ReentParser::NoeExceptSpecificationContext::NoeExceptSpecificationContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::NoeExceptSpecificationContext::Noexcept() {
  return getToken(ReentParser::Noexcept, 0);
}

tree::TerminalNode* ReentParser::NoeExceptSpecificationContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

ReentParser::ConstantExpressionContext* ReentParser::NoeExceptSpecificationContext::constantExpression() {
  return getRuleContext<ReentParser::ConstantExpressionContext>(0);
}

tree::TerminalNode* ReentParser::NoeExceptSpecificationContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::NoeExceptSpecificationContext::getRuleIndex() const {
  return ReentParser::RuleNoeExceptSpecification;
}

void ReentParser::NoeExceptSpecificationContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNoeExceptSpecification(this);
}

void ReentParser::NoeExceptSpecificationContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNoeExceptSpecification(this);
}

ReentParser::NoeExceptSpecificationContext* ReentParser::noeExceptSpecification() {
  NoeExceptSpecificationContext *_localctx = _tracker.createInstance<NoeExceptSpecificationContext>(_ctx, getState());
  enterRule(_localctx, 546, ReentParser::RuleNoeExceptSpecification);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2922);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 359, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2916);
      match(ReentParser::Noexcept);
      setState(2917);
      match(ReentParser::LeftParen);
      setState(2918);
      constantExpression();
      setState(2919);
      match(ReentParser::RightParen);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2921);
      match(ReentParser::Noexcept);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_pragmaContext ------------------------------------------------------------------

ReentParser::Plan_pragmaContext::Plan_pragmaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_pragmaContext::PlanPragma() {
  return getToken(ReentParser::PlanPragma, 0);
}

ReentParser::Plan_directiveContext* ReentParser::Plan_pragmaContext::plan_directive() {
  return getRuleContext<ReentParser::Plan_directiveContext>(0);
}


size_t ReentParser::Plan_pragmaContext::getRuleIndex() const {
  return ReentParser::RulePlan_pragma;
}

void ReentParser::Plan_pragmaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_pragma(this);
}

void ReentParser::Plan_pragmaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_pragma(this);
}

ReentParser::Plan_pragmaContext* ReentParser::plan_pragma() {
  Plan_pragmaContext *_localctx = _tracker.createInstance<Plan_pragmaContext>(_ctx, getState());
  enterRule(_localctx, 548, ReentParser::RulePlan_pragma);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2924);
    match(ReentParser::PlanPragma);
    setState(2925);
    plan_directive();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_directiveContext ------------------------------------------------------------------

ReentParser::Plan_directiveContext::Plan_directiveContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

ReentParser::Plan_dir_vectorizedContext* ReentParser::Plan_directiveContext::plan_dir_vectorized() {
  return getRuleContext<ReentParser::Plan_dir_vectorizedContext>(0);
}

ReentParser::Plan_dir_clusteredContext* ReentParser::Plan_directiveContext::plan_dir_clustered() {
  return getRuleContext<ReentParser::Plan_dir_clusteredContext>(0);
}

ReentParser::Plan_commonContext* ReentParser::Plan_directiveContext::plan_common() {
  return getRuleContext<ReentParser::Plan_commonContext>(0);
}

ReentParser::Plan_gpuContext* ReentParser::Plan_directiveContext::plan_gpu() {
  return getRuleContext<ReentParser::Plan_gpuContext>(0);
}


size_t ReentParser::Plan_directiveContext::getRuleIndex() const {
  return ReentParser::RulePlan_directive;
}

void ReentParser::Plan_directiveContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_directive(this);
}

void ReentParser::Plan_directiveContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_directive(this);
}

ReentParser::Plan_directiveContext* ReentParser::plan_directive() {
  Plan_directiveContext *_localctx = _tracker.createInstance<Plan_directiveContext>(_ctx, getState());
  enterRule(_localctx, 550, ReentParser::RulePlan_directive);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(2931);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Vectorized: {
        enterOuterAlt(_localctx, 1);
        setState(2927);
        plan_dir_vectorized();
        break;
      }

      case ReentParser::Clustered: {
        enterOuterAlt(_localctx, 2);
        setState(2928);
        plan_dir_clustered();
        break;
      }

      case ReentParser::Common: {
        enterOuterAlt(_localctx, 3);
        setState(2929);
        plan_common();
        break;
      }

      case ReentParser::Gpu: {
        enterOuterAlt(_localctx, 4);
        setState(2930);
        plan_gpu();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_dir_vectorizedContext ------------------------------------------------------------------

ReentParser::Plan_dir_vectorizedContext::Plan_dir_vectorizedContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_dir_vectorizedContext::Vectorized() {
  return getToken(ReentParser::Vectorized, 0);
}


size_t ReentParser::Plan_dir_vectorizedContext::getRuleIndex() const {
  return ReentParser::RulePlan_dir_vectorized;
}

void ReentParser::Plan_dir_vectorizedContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_dir_vectorized(this);
}

void ReentParser::Plan_dir_vectorizedContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_dir_vectorized(this);
}

ReentParser::Plan_dir_vectorizedContext* ReentParser::plan_dir_vectorized() {
  Plan_dir_vectorizedContext *_localctx = _tracker.createInstance<Plan_dir_vectorizedContext>(_ctx, getState());
  enterRule(_localctx, 552, ReentParser::RulePlan_dir_vectorized);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2933);
    match(ReentParser::Vectorized);
     allow_vectorized = true; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_dir_clusteredContext ------------------------------------------------------------------

ReentParser::Plan_dir_clusteredContext::Plan_dir_clusteredContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_dir_clusteredContext::Clustered() {
  return getToken(ReentParser::Clustered, 0);
}


size_t ReentParser::Plan_dir_clusteredContext::getRuleIndex() const {
  return ReentParser::RulePlan_dir_clustered;
}

void ReentParser::Plan_dir_clusteredContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_dir_clustered(this);
}

void ReentParser::Plan_dir_clusteredContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_dir_clustered(this);
}

ReentParser::Plan_dir_clusteredContext* ReentParser::plan_dir_clustered() {
  Plan_dir_clusteredContext *_localctx = _tracker.createInstance<Plan_dir_clusteredContext>(_ctx, getState());
  enterRule(_localctx, 554, ReentParser::RulePlan_dir_clustered);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2936);
    match(ReentParser::Clustered);
     allow_clustered = true; 
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_commonContext ------------------------------------------------------------------

ReentParser::Plan_commonContext::Plan_commonContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_commonContext::Common() {
  return getToken(ReentParser::Common, 0);
}

tree::TerminalNode* ReentParser::Plan_commonContext::Begin() {
  return getToken(ReentParser::Begin, 0);
}

tree::TerminalNode* ReentParser::Plan_commonContext::End() {
  return getToken(ReentParser::End, 0);
}


size_t ReentParser::Plan_commonContext::getRuleIndex() const {
  return ReentParser::RulePlan_common;
}

void ReentParser::Plan_commonContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_common(this);
}

void ReentParser::Plan_commonContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_common(this);
}

ReentParser::Plan_commonContext* ReentParser::plan_common() {
  Plan_commonContext *_localctx = _tracker.createInstance<Plan_commonContext>(_ctx, getState());
  enterRule(_localctx, 556, ReentParser::RulePlan_common);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2939);
    match(ReentParser::Common);

    		if (!allow_vectorized)
    			throw FailedPredicateException(this, "'#pragma plan common' without '#pragma plan vectorized'");
    		if (gpu_block_opened)
    			throw FailedPredicateException(this, "'#pragma plan common' can present only in non-gpu blocks'");
    	
    setState(2945);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin: {
        setState(2941);
        match(ReentParser::Begin);

        		if (common_block_opened)
        			throw FailedPredicateException(this, "'#pragma plan common begin' reintroduced");
        		common_block_opened = true;
        	  
        break;
      }

      case ReentParser::End: {
        setState(2943);
        match(ReentParser::End);

        		if (!common_block_opened)
        			throw FailedPredicateException(this, "'#pragma plan common end' in non-common block");
        		common_block_opened = false;
        	  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plan_gpuContext ------------------------------------------------------------------

ReentParser::Plan_gpuContext::Plan_gpuContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::Plan_gpuContext::Gpu() {
  return getToken(ReentParser::Gpu, 0);
}

tree::TerminalNode* ReentParser::Plan_gpuContext::Begin() {
  return getToken(ReentParser::Begin, 0);
}

tree::TerminalNode* ReentParser::Plan_gpuContext::End() {
  return getToken(ReentParser::End, 0);
}


size_t ReentParser::Plan_gpuContext::getRuleIndex() const {
  return ReentParser::RulePlan_gpu;
}

void ReentParser::Plan_gpuContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlan_gpu(this);
}

void ReentParser::Plan_gpuContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlan_gpu(this);
}

ReentParser::Plan_gpuContext* ReentParser::plan_gpu() {
  Plan_gpuContext *_localctx = _tracker.createInstance<Plan_gpuContext>(_ctx, getState());
  enterRule(_localctx, 558, ReentParser::RulePlan_gpu);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(2947);
    match(ReentParser::Gpu);

    		if (!allow_vectorized)
    			throw FailedPredicateException(this, "'#pragma plan gpu' without '#pragma plan vectorized'");
    		if (common_block_opened)
    			throw FailedPredicateException(this, "'#pragma plan gpu' can present only in non-common blocks'");
    	
    setState(2953);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case ReentParser::Begin: {
        setState(2949);
        match(ReentParser::Begin);

        		if (gpu_block_opened)
        			throw FailedPredicateException(this, "'#pragma plan gpu begin' reintroduced");
        		gpu_block_opened = true;
        	  
        break;
      }

      case ReentParser::End: {
        setState(2951);
        match(ReentParser::End);

        		if (!gpu_block_opened)
        			throw FailedPredicateException(this, "'#pragma plan gpu end' in non-gpu block");
        		gpu_block_opened = false;
        	  
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TheOperatorContext ------------------------------------------------------------------

ReentParser::TheOperatorContext::TheOperatorContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::TheOperatorContext::New() {
  return getToken(ReentParser::New, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::LeftBracket() {
  return getToken(ReentParser::LeftBracket, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::RightBracket() {
  return getToken(ReentParser::RightBracket, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Delete() {
  return getToken(ReentParser::Delete, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Plus() {
  return getToken(ReentParser::Plus, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Minus() {
  return getToken(ReentParser::Minus, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Star() {
  return getToken(ReentParser::Star, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Div() {
  return getToken(ReentParser::Div, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Mod() {
  return getToken(ReentParser::Mod, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Caret() {
  return getToken(ReentParser::Caret, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::And() {
  return getToken(ReentParser::And, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Or() {
  return getToken(ReentParser::Or, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Tilde() {
  return getToken(ReentParser::Tilde, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Not() {
  return getToken(ReentParser::Not, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Assign() {
  return getToken(ReentParser::Assign, 0);
}

std::vector<tree::TerminalNode *> ReentParser::TheOperatorContext::Greater() {
  return getTokens(ReentParser::Greater);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Greater(size_t i) {
  return getToken(ReentParser::Greater, i);
}

std::vector<tree::TerminalNode *> ReentParser::TheOperatorContext::Less() {
  return getTokens(ReentParser::Less);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Less(size_t i) {
  return getToken(ReentParser::Less, i);
}

tree::TerminalNode* ReentParser::TheOperatorContext::GreaterEqual() {
  return getToken(ReentParser::GreaterEqual, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::PlusAssign() {
  return getToken(ReentParser::PlusAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::MinusAssign() {
  return getToken(ReentParser::MinusAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::StarAssign() {
  return getToken(ReentParser::StarAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::ModAssign() {
  return getToken(ReentParser::ModAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::XorAssign() {
  return getToken(ReentParser::XorAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::AndAssign() {
  return getToken(ReentParser::AndAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::OrAssign() {
  return getToken(ReentParser::OrAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::RightShiftAssign() {
  return getToken(ReentParser::RightShiftAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::LeftShiftAssign() {
  return getToken(ReentParser::LeftShiftAssign, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Equal() {
  return getToken(ReentParser::Equal, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::NotEqual() {
  return getToken(ReentParser::NotEqual, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::LessEqual() {
  return getToken(ReentParser::LessEqual, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::AndAnd() {
  return getToken(ReentParser::AndAnd, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::OrOr() {
  return getToken(ReentParser::OrOr, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::PlusPlus() {
  return getToken(ReentParser::PlusPlus, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::MinusMinus() {
  return getToken(ReentParser::MinusMinus, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Comma() {
  return getToken(ReentParser::Comma, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::ArrowStar() {
  return getToken(ReentParser::ArrowStar, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::Arrow() {
  return getToken(ReentParser::Arrow, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::LeftParen() {
  return getToken(ReentParser::LeftParen, 0);
}

tree::TerminalNode* ReentParser::TheOperatorContext::RightParen() {
  return getToken(ReentParser::RightParen, 0);
}


size_t ReentParser::TheOperatorContext::getRuleIndex() const {
  return ReentParser::RuleTheOperator;
}

void ReentParser::TheOperatorContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTheOperator(this);
}

void ReentParser::TheOperatorContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTheOperator(this);
}

ReentParser::TheOperatorContext* ReentParser::theOperator() {
  TheOperatorContext *_localctx = _tracker.createInstance<TheOperatorContext>(_ctx, getState());
  enterRule(_localctx, 560, ReentParser::RuleTheOperator);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(3006);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 365, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(2955);
      match(ReentParser::New);
      setState(2958);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 363, _ctx)) {
      case 1: {
        setState(2956);
        match(ReentParser::LeftBracket);
        setState(2957);
        match(ReentParser::RightBracket);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(2960);
      match(ReentParser::Delete);
      setState(2963);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 364, _ctx)) {
      case 1: {
        setState(2961);
        match(ReentParser::LeftBracket);
        setState(2962);
        match(ReentParser::RightBracket);
        break;
      }

      default:
        break;
      }
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(2965);
      match(ReentParser::Plus);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(2966);
      match(ReentParser::Minus);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(2967);
      match(ReentParser::Star);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(2968);
      match(ReentParser::Div);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(2969);
      match(ReentParser::Mod);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(2970);
      match(ReentParser::Caret);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(2971);
      match(ReentParser::And);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(2972);
      match(ReentParser::Or);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(2973);
      match(ReentParser::Tilde);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(2974);
      match(ReentParser::Not);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(2975);
      match(ReentParser::Assign);
      break;
    }

    case 14: {
      enterOuterAlt(_localctx, 14);
      setState(2976);
      match(ReentParser::Greater);
      break;
    }

    case 15: {
      enterOuterAlt(_localctx, 15);
      setState(2977);
      match(ReentParser::Less);
      break;
    }

    case 16: {
      enterOuterAlt(_localctx, 16);
      setState(2978);
      match(ReentParser::GreaterEqual);
      break;
    }

    case 17: {
      enterOuterAlt(_localctx, 17);
      setState(2979);
      match(ReentParser::PlusAssign);
      break;
    }

    case 18: {
      enterOuterAlt(_localctx, 18);
      setState(2980);
      match(ReentParser::MinusAssign);
      break;
    }

    case 19: {
      enterOuterAlt(_localctx, 19);
      setState(2981);
      match(ReentParser::StarAssign);
      break;
    }

    case 20: {
      enterOuterAlt(_localctx, 20);
      setState(2982);
      match(ReentParser::ModAssign);
      break;
    }

    case 21: {
      enterOuterAlt(_localctx, 21);
      setState(2983);
      match(ReentParser::XorAssign);
      break;
    }

    case 22: {
      enterOuterAlt(_localctx, 22);
      setState(2984);
      match(ReentParser::AndAssign);
      break;
    }

    case 23: {
      enterOuterAlt(_localctx, 23);
      setState(2985);
      match(ReentParser::OrAssign);
      break;
    }

    case 24: {
      enterOuterAlt(_localctx, 24);
      setState(2986);
      match(ReentParser::Less);
      setState(2987);
      match(ReentParser::Less);
      break;
    }

    case 25: {
      enterOuterAlt(_localctx, 25);
      setState(2988);
      match(ReentParser::Greater);
      setState(2989);
      match(ReentParser::Greater);
      break;
    }

    case 26: {
      enterOuterAlt(_localctx, 26);
      setState(2990);
      match(ReentParser::RightShiftAssign);
      break;
    }

    case 27: {
      enterOuterAlt(_localctx, 27);
      setState(2991);
      match(ReentParser::LeftShiftAssign);
      break;
    }

    case 28: {
      enterOuterAlt(_localctx, 28);
      setState(2992);
      match(ReentParser::Equal);
      break;
    }

    case 29: {
      enterOuterAlt(_localctx, 29);
      setState(2993);
      match(ReentParser::NotEqual);
      break;
    }

    case 30: {
      enterOuterAlt(_localctx, 30);
      setState(2994);
      match(ReentParser::LessEqual);
      break;
    }

    case 31: {
      enterOuterAlt(_localctx, 31);
      setState(2995);
      match(ReentParser::AndAnd);
      break;
    }

    case 32: {
      enterOuterAlt(_localctx, 32);
      setState(2996);
      match(ReentParser::OrOr);
      break;
    }

    case 33: {
      enterOuterAlt(_localctx, 33);
      setState(2997);
      match(ReentParser::PlusPlus);
      break;
    }

    case 34: {
      enterOuterAlt(_localctx, 34);
      setState(2998);
      match(ReentParser::MinusMinus);
      break;
    }

    case 35: {
      enterOuterAlt(_localctx, 35);
      setState(2999);
      match(ReentParser::Comma);
      break;
    }

    case 36: {
      enterOuterAlt(_localctx, 36);
      setState(3000);
      match(ReentParser::ArrowStar);
      break;
    }

    case 37: {
      enterOuterAlt(_localctx, 37);
      setState(3001);
      match(ReentParser::Arrow);
      break;
    }

    case 38: {
      enterOuterAlt(_localctx, 38);
      setState(3002);
      match(ReentParser::LeftParen);
      setState(3003);
      match(ReentParser::RightParen);
      break;
    }

    case 39: {
      enterOuterAlt(_localctx, 39);
      setState(3004);
      match(ReentParser::LeftBracket);
      setState(3005);
      match(ReentParser::RightBracket);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

ReentParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* ReentParser::LiteralContext::IntegerLiteral() {
  return getToken(ReentParser::IntegerLiteral, 0);
}

tree::TerminalNode* ReentParser::LiteralContext::CharacterLiteral() {
  return getToken(ReentParser::CharacterLiteral, 0);
}

tree::TerminalNode* ReentParser::LiteralContext::FloatingLiteral() {
  return getToken(ReentParser::FloatingLiteral, 0);
}

tree::TerminalNode* ReentParser::LiteralContext::StringLiteral() {
  return getToken(ReentParser::StringLiteral, 0);
}

tree::TerminalNode* ReentParser::LiteralContext::BooleanLiteral() {
  return getToken(ReentParser::BooleanLiteral, 0);
}

tree::TerminalNode* ReentParser::LiteralContext::PointerLiteral() {
  return getToken(ReentParser::PointerLiteral, 0);
}

tree::TerminalNode* ReentParser::LiteralContext::UserDefinedLiteral() {
  return getToken(ReentParser::UserDefinedLiteral, 0);
}


size_t ReentParser::LiteralContext::getRuleIndex() const {
  return ReentParser::RuleLiteral;
}

void ReentParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void ReentParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<ReentParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}

ReentParser::LiteralContext* ReentParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 562, ReentParser::RuleLiteral);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(3008);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & ((1ULL << ReentParser::IntegerLiteral)
      | (1ULL << ReentParser::CharacterLiteral)
      | (1ULL << ReentParser::FloatingLiteral)
      | (1ULL << ReentParser::StringLiteral)
      | (1ULL << ReentParser::BooleanLiteral)
      | (1ULL << ReentParser::PointerLiteral)
      | (1ULL << ReentParser::UserDefinedLiteral))) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

bool ReentParser::sempred(RuleContext *context, size_t ruleIndex, size_t predicateIndex) {
  switch (ruleIndex) {
    case 4: return reent_funs_idSempred(dynamic_cast<Reent_funs_idContext *>(context), predicateIndex);
    case 5: return chain_funs_idSempred(dynamic_cast<Chain_funs_idContext *>(context), predicateIndex);
    case 8: return nestedNameSpecifierSempred(dynamic_cast<NestedNameSpecifierContext *>(context), predicateIndex);
    case 18: return postfixExpressionSempred(dynamic_cast<PostfixExpressionContext *>(context), predicateIndex);
    case 28: return noPointerNewDeclaratorSempred(dynamic_cast<NoPointerNewDeclaratorContext *>(context), predicateIndex);
    case 57: return reent_statementSempred(dynamic_cast<Reent_statementContext *>(context), predicateIndex);
    case 58: return chain_statementSempred(dynamic_cast<Chain_statementContext *>(context), predicateIndex);
    case 59: return atomic_blockSempred(dynamic_cast<Atomic_blockContext *>(context), predicateIndex);
    case 88: return vector_chain_descriptorSempred(dynamic_cast<Vector_chain_descriptorContext *>(context), predicateIndex);
    case 174: return noPointerDeclaratorSempred(dynamic_cast<NoPointerDeclaratorContext *>(context), predicateIndex);
    case 185: return noPointerAbstractDeclaratorSempred(dynamic_cast<NoPointerAbstractDeclaratorContext *>(context), predicateIndex);
    case 187: return noPointerAbstractPackDeclaratorSempred(dynamic_cast<NoPointerAbstractPackDeclaratorContext *>(context), predicateIndex);

  default:
    break;
  }
  return true;
}

bool ReentParser::reent_funs_idSempred(Reent_funs_idContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 0: return (in_reenterable || in_chain);

  default:
    break;
  }
  return true;
}

bool ReentParser::chain_funs_idSempred(Chain_funs_idContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 1: return in_chain;

  default:
    break;
  }
  return true;
}

bool ReentParser::nestedNameSpecifierSempred(NestedNameSpecifierContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 2: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool ReentParser::postfixExpressionSempred(PostfixExpressionContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 3: return precpred(_ctx, 8);
    case 4: return precpred(_ctx, 7);
    case 5: return precpred(_ctx, 4);
    case 6: return precpred(_ctx, 3);

  default:
    break;
  }
  return true;
}

bool ReentParser::noPointerNewDeclaratorSempred(NoPointerNewDeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 7: return precpred(_ctx, 1);

  default:
    break;
  }
  return true;
}

bool ReentParser::reent_statementSempred(Reent_statementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 8: return (in_reenterable || in_chain);

  default:
    break;
  }
  return true;
}

bool ReentParser::chain_statementSempred(Chain_statementContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 9: return in_chain;

  default:
    break;
  }
  return true;
}

bool ReentParser::atomic_blockSempred(Atomic_blockContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 10: return (!in_reenterable && !in_chain);

  default:
    break;
  }
  return true;
}

bool ReentParser::vector_chain_descriptorSempred(Vector_chain_descriptorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 11: return  chains.find((dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident != nullptr ? _input->getText(dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident->start, dynamic_cast<Vector_chain_descriptorContext *>(_localctx)->ident->stop) : nullptr)) == chains.end() ;

  default:
    break;
  }
  return true;
}

bool ReentParser::noPointerDeclaratorSempred(NoPointerDeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 12: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

bool ReentParser::noPointerAbstractDeclaratorSempred(NoPointerAbstractDeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 13: return precpred(_ctx, 4);

  default:
    break;
  }
  return true;
}

bool ReentParser::noPointerAbstractPackDeclaratorSempred(NoPointerAbstractPackDeclaratorContext *_localctx, size_t predicateIndex) {
  switch (predicateIndex) {
    case 14: return precpred(_ctx, 2);

  default:
    break;
  }
  return true;
}

// Static vars and initialization.
std::vector<dfa::DFA> ReentParser::_decisionToDFA;
atn::PredictionContextCache ReentParser::_sharedContextCache;

// We own the ATN which in turn owns the ATN states.
atn::ATN ReentParser::_atn;
std::vector<uint16_t> ReentParser::_serializedATN;

std::vector<std::string> ReentParser::_ruleNames = {
  "translationUnit", "anyIdentifier", "primaryExpression", "idExpression", 
  "reent_funs_id", "chain_funs_id", "unqualifiedId", "qualifiedId", "nestedNameSpecifier", 
  "lambdaExpression", "lambdaIntroducer", "lambdaCapture", "captureDefault", 
  "captureList", "capture", "simpleCapture", "initcapture", "lambdaDeclarator", 
  "postfixExpression", "typeIdOfTheTypeId", "expressionList", "pseudoDestructorName", 
  "unaryExpression", "unaryOperator", "newExpression", "newPlacement", "newTypeId", 
  "newDeclarator", "noPointerNewDeclarator", "newInitializer", "deleteExpression", 
  "noExceptExpression", "castExpression", "pointerMemberExpression", "multiplicativeExpression", 
  "additiveExpression", "shiftExpression", "shiftOperator", "relationalExpression", 
  "equalityExpression", "andExpression", "exclusiveOrExpression", "inclusiveOrExpression", 
  "logicalAndExpression", "logicalOrExpression", "conditionalExpression", 
  "assignmentExpression", "assignmentOperator", "expression", "constantExpression", 
  "statement", "labeledStatement", "fill_into_plan", "fill_from_plan", "reent_filler", 
  "reent_reader", "reent_filler_array", "reent_statement", "chain_statement", 
  "atomic_block", "soft_atomic_block", "plan_first", "plan_get_first", "plan_last", 
  "plan_get_last", "plan_register", "plan_registered_barrier", "plan_critical", 
  "plan_stop", "clear_plan", "plan_group_first", "plan_group_last", "plan_group_parallelize", 
  "plan_group_atomize", "plan_group_soft_atomize", "plan_group_vectorize", 
  "throw_first", "throw_last", "planning_params", "reent_parameter_cut", 
  "reent_special_call", "reent_continue_any_call", "reent_compact_continue", 
  "reent_np_call", "start_chain", "start_single_proc_chain", "start_multi_proc_chain", 
  "chain_descriptor", "vector_chain_descriptor", "list_chain_descriptor", 
  "start_topology", "topology_item", "topology_line", "topology_reverse", 
  "topology_node", "chain_call", "qualified_call_statement", "expressionStatement", 
  "compoundStatement", "statementSeq", "selectionStatement", "condition", 
  "iterationStatement", "forInitStatement", "forRangeDeclaration", "forRangeInitializer", 
  "jumpStatement", "declarationStatement", "declarationseq", "declaration", 
  "blockDeclaration", "aliasDeclaration", "simpleDeclaration", "staticAssertDeclaration", 
  "emptyDeclaration", "attributeDeclaration", "declSpecifier", "declSpecifierSeq", 
  "reent_special_type", "reent_funnel_type", "reent_cfunnel_type", "reent_cvar_type", 
  "reent_csem_type", "reent_soft_transact_array", "reent_soft_transact_var", 
  "reent_soft_transact_in", "reent_soft_transact_out", "reent_plan_type", 
  "reent_plan_item_type", "storageClassSpecifier", "functionSpecifier", 
  "typedefName", "typeSpecifier", "trailingTypeSpecifier", "typeSpecifierSeq", 
  "trailingTypeSpecifierSeq", "simpleTypeLengthModifier", "simpleTypeSignednessModifier", 
  "simpleTypeSpecifier", "theTypeName", "decltypeSpecifier", "elaboratedTypeSpecifier", 
  "enumName", "enumSpecifier", "enumHead", "opaqueEnumDeclaration", "enumkey", 
  "enumbase", "enumeratorList", "enumeratorDefinition", "enumerator", "namespaceName", 
  "originalNamespaceName", "namespaceDefinition", "namespaceAlias", "namespaceAliasDefinition", 
  "qualifiednamespacespecifier", "usingDeclaration", "usingDirective", "asmDefinition", 
  "linkageSpecification", "attributeSpecifierSeq", "attributeSpecifier", 
  "alignmentspecifier", "attributeList", "attribute", "attributeNamespace", 
  "attributeArgumentClause", "balancedTokenSeq", "balancedtoken", "initDeclaratorList", 
  "initDeclarator", "declarator", "pointerDeclarator", "noPointerDeclarator", 
  "parametersAndQualifiers", "trailingReturnType", "pointerOperator", "cvqualifierseq", 
  "cvQualifier", "refqualifier", "declaratorid", "theTypeId", "abstractDeclarator", 
  "pointerAbstractDeclarator", "noPointerAbstractDeclarator", "abstractPackDeclarator", 
  "noPointerAbstractPackDeclarator", "parameterDeclarationClause", "parameterDeclarationList", 
  "parameterDeclaration", "reenterableDefinition", "reenterableDeclaration", 
  "reenterableHead", "reent_chain_header", "reent_chain_params", "reent_chain_param", 
  "reent_recursive_type", "reent_reduction", "reent_gpu_global", "reent_gpu_local", 
  "reduction_symbol", "reent_chain_predicate", "reent_predicate_set", "reent_predicate_reset", 
  "reent_predicate_depends", "reent_predicate_if", "reent_dependents", "reent_enumerator", 
  "loop_statement_header", "reent_single_dependent", "chain_interface", 
  "chainDefinition", "chainDeclaration", "chainHead", "functionDefinition", 
  "special_method_name", "functionBody", "initializer", "braceOrEqualInitializer", 
  "initializerClause", "initializerList", "bracedInitList", "className", 
  "classSpecifier", "classHead", "classHeadName", "classVirtSpecifier", 
  "classKey", "memberSpecification", "markedmemberdeclaration", "memberdeclaration", 
  "memberDeclaratorList", "memberDeclarator", "virtualSpecifierSeq", "virtualSpecifier", 
  "pureSpecifier", "baseClause", "baseSpecifierList", "baseSpecifier", "classOrDeclType", 
  "baseTypeSpecifier", "accessSpecifier", "conversionFunctionId", "conversionTypeId", 
  "conversionDeclarator", "constructorInitializer", "memInitializerList", 
  "memInitializer", "meminitializerid", "operatorFunctionId", "literalOperatorId", 
  "templateDeclaration", "templateparameterList", "templateParameter", "typeParameter", 
  "simpleTemplateId", "templateId", "templateName", "templateArgumentList", 
  "templateArgument", "typeNameSpecifier", "explicitInstantiation", "explicitSpecialization", 
  "tryBlock", "functionTryBlock", "handlerSeq", "handler", "exceptionDeclaration", 
  "throwExpression", "exceptionSpecification", "dynamicExceptionSpecification", 
  "typeIdList", "noeExceptSpecification", "plan_pragma", "plan_directive", 
  "plan_dir_vectorized", "plan_dir_clustered", "plan_common", "plan_gpu", 
  "theOperator", "literal"
};

std::vector<std::string> ReentParser::_literalNames = {
  "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "'alignas'", 
  "'alignof'", "'asm'", "'auto'", "'begin'", "'bool'", "'break'", "'case'", 
  "'catch'", "'cfunnel'", "'chain'", "'char'", "'char16_t'", "'char32_t'", 
  "'class'", "'clear_plan'", "'clustered'", "'common'", "'const'", "'constexpr'", 
  "'const_cast'", "'continue'", "'plan_csem_t'", "'cvar'", "'decltype'", 
  "'default'", "'delete'", "'depends'", "'do'", "'double'", "'dynamic_cast'", 
  "'else'", "'end'", "'enum'", "'explicit'", "'export'", "'extern'", "'false'", 
  "'final'", "'float'", "'for'", "'friend'", "'funnel'", "'global'", "'gpu'", 
  "'goto'", "'_global'", "'_local'", "'id'", "'if'", "'in'", "'inline'", 
  "'int'", "'local'", "'long'", "'pre_id'", "'state'", "'markupdef'", "'mutable'", 
  "'namespace'", "'new'", "'noexcept'", "'nullptr'", "'operator'", "'out'", 
  "'override'", "'plan'", "'plan_atomize'", "'plan_chain'", "'plan_critical'", 
  "'plan_first'", "'plan_get_first'", "'plan_get_last'", "'plan_group_atomize'", 
  "'plan_group_first'", "'plan_group_last'", "'plan_group_parallelize'", 
  "'plan_group_soft_atomize'", "'plan_group_vectorize'", "'plan_item_type'", 
  "'plan_last'", "'plan_parallel_chain'", "'plan_parallel_reverse'", "'plan_register'", 
  "'plan_registered_barrier'", "'plan_stop'", "'plan_topology'", "'plan_type'", 
  "'private'", "'protected'", "'public'", "'reduction'", "'reenterable'", 
  "'register'", "'reinterpret_cast'", "'reset'", "'return'", "'set'", "'short'", 
  "'signed'", "'sizeof'", "'soft_transact_array'", "'soft_transact_in'", 
  "'soft_transact_out'", "'soft_transact_var'", "'static'", "'static_assert'", 
  "'static_cast'", "'struct'", "'switch'", "'template'", "'this'", "'thread_local'", 
  "'throw'", "'throw_first'", "'throw_last'", "'transaction_atomic'", "'true'", 
  "'try'", "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
  "'using'", "'vectorized'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
  "'while'", "'@'", "'$'", "':-'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
  "'_'", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", "'~'", 
  "", "'='", "'<'", "'>'", "'+='", "'-='", "'*='", "'/='", "'%='", "'^='", 
  "'&='", "'|='", "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", "", 
  "", "'++'", "'--'", "','", "'->*'", "'->'", "'\u003F'", "':'", "'::'", 
  "';'", "'.'", "'.*'", "'...'"
};

std::vector<std::string> ReentParser::_symbolicNames = {
  "", "IntegerLiteral", "CharacterLiteral", "FloatingLiteral", "StringLiteral", 
  "BooleanLiteral", "PointerLiteral", "UserDefinedLiteral", "PlanPragma", 
  "DoNotCheck", "BlockComment", "OtherPragma", "Line", "MultiLineMacro", 
  "Directive", "Alignas", "Alignof", "Asm", "Auto", "Begin", "Bool", "Break", 
  "Case", "Catch", "Cfunnel", "Chain", "Char", "Char16", "Char32", "Class", 
  "Clear_plan", "Clustered", "Common", "Const", "Constexpr", "Const_cast", 
  "Continue", "Csem", "Cvar", "Decltype", "Default", "Delete", "Depends", 
  "Do", "Double", "Dynamic_cast", "Else", "End", "Enum", "Explicit", "Export", 
  "Extern", "False_", "Final", "Float", "For", "Friend", "Funnel", "Global", 
  "Gpu", "Goto", "GpuGlobal", "GpuLocal", "Id", "If", "In", "Inline", "Int", 
  "Local", "Long", "MarkPreCondition", "MarkState", "Markupdef", "Mutable", 
  "Namespace", "New", "Noexcept", "Nullptr", "Operator", "Out", "Override", 
  "Plan", "Plan_atomize", "Plan_chain", "Plan_critical", "Plan_first", "Plan_get_first", 
  "Plan_get_last", "Plan_group_atomize", "Plan_group_first", "Plan_group_last", 
  "Plan_group_parallelize", "Plan_group_soft_atomize", "Plan_group_vectorize", 
  "Plan_item_type", "Plan_last", "Plan_parallel_chain", "Plan_parallel_reverse", 
  "Plan_register", "Plan_registered_barrier", "Plan_stop", "Plan_topology", 
  "Plan_type", "Private", "Protected", "Public", "Reduction", "Reenterable", 
  "Register", "Reinterpret_cast", "Reset", "Return", "Set", "Short", "Signed", 
  "Sizeof", "Soft_transact_array", "Soft_transact_in", "Soft_transact_out", 
  "Soft_transact_var", "Static", "Static_assert", "Static_cast", "Struct", 
  "Switch", "Template", "This", "Thread_local", "Throw", "Throw_first", 
  "Throw_last", "Transaction_atomic", "True_", "Try", "Typedef", "Typeid_", 
  "Typename_", "Union", "Unsigned", "Using", "Vectorized", "Virtual", "Void", 
  "Volatile", "Wchar", "While", "At", "Dollar", "Is", "LeftParen", "RightParen", 
  "LeftBracket", "RightBracket", "LeftBrace", "RightBrace", "Underscore", 
  "Plus", "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", "Tilde", 
  "Not", "Assign", "Less", "Greater", "PlusAssign", "MinusAssign", "StarAssign", 
  "DivAssign", "ModAssign", "XorAssign", "AndAssign", "OrAssign", "LeftShiftAssign", 
  "RightShiftAssign", "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
  "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", "ArrowStar", "Arrow", 
  "Question", "Colon", "Doublecolon", "Semi", "Dot", "DotStar", "Ellipsis", 
  "Identifier", "DecimalLiteral", "OctalLiteral", "HexadecimalLiteral", 
  "BinaryLiteral", "Integersuffix", "UserDefinedIntegerLiteral", "UserDefinedFloatingLiteral", 
  "UserDefinedStringLiteral", "UserDefinedCharacterLiteral", "Whitespace", 
  "Newline", "LineComment"
};

dfa::Vocabulary ReentParser::_vocabulary(_literalNames, _symbolicNames);

std::vector<std::string> ReentParser::_tokenNames;

ReentParser::Initializer::Initializer() {
	for (size_t i = 0; i < _symbolicNames.size(); ++i) {
		std::string name = _vocabulary.getLiteralName(i);
		if (name.empty()) {
			name = _vocabulary.getSymbolicName(i);
		}

		if (name.empty()) {
			_tokenNames.push_back("<INVALID>");
		} else {
      _tokenNames.push_back(name);
    }
	}

  static const uint16_t serializedATNSegment0[] = {
    0x3, 0x608b, 0xa72a, 0x8133, 0xb9ed, 0x417c, 0x3be7, 0x7786, 0x5964, 
       0x3, 0xd3, 0xbc5, 0x4, 0x2, 0x9, 0x2, 0x4, 0x3, 0x9, 0x3, 0x4, 0x4, 
       0x9, 0x4, 0x4, 0x5, 0x9, 0x5, 0x4, 0x6, 0x9, 0x6, 0x4, 0x7, 0x9, 
       0x7, 0x4, 0x8, 0x9, 0x8, 0x4, 0x9, 0x9, 0x9, 0x4, 0xa, 0x9, 0xa, 
       0x4, 0xb, 0x9, 0xb, 0x4, 0xc, 0x9, 0xc, 0x4, 0xd, 0x9, 0xd, 0x4, 
       0xe, 0x9, 0xe, 0x4, 0xf, 0x9, 0xf, 0x4, 0x10, 0x9, 0x10, 0x4, 0x11, 
       0x9, 0x11, 0x4, 0x12, 0x9, 0x12, 0x4, 0x13, 0x9, 0x13, 0x4, 0x14, 
       0x9, 0x14, 0x4, 0x15, 0x9, 0x15, 0x4, 0x16, 0x9, 0x16, 0x4, 0x17, 
       0x9, 0x17, 0x4, 0x18, 0x9, 0x18, 0x4, 0x19, 0x9, 0x19, 0x4, 0x1a, 
       0x9, 0x1a, 0x4, 0x1b, 0x9, 0x1b, 0x4, 0x1c, 0x9, 0x1c, 0x4, 0x1d, 
       0x9, 0x1d, 0x4, 0x1e, 0x9, 0x1e, 0x4, 0x1f, 0x9, 0x1f, 0x4, 0x20, 
       0x9, 0x20, 0x4, 0x21, 0x9, 0x21, 0x4, 0x22, 0x9, 0x22, 0x4, 0x23, 
       0x9, 0x23, 0x4, 0x24, 0x9, 0x24, 0x4, 0x25, 0x9, 0x25, 0x4, 0x26, 
       0x9, 0x26, 0x4, 0x27, 0x9, 0x27, 0x4, 0x28, 0x9, 0x28, 0x4, 0x29, 
       0x9, 0x29, 0x4, 0x2a, 0x9, 0x2a, 0x4, 0x2b, 0x9, 0x2b, 0x4, 0x2c, 
       0x9, 0x2c, 0x4, 0x2d, 0x9, 0x2d, 0x4, 0x2e, 0x9, 0x2e, 0x4, 0x2f, 
       0x9, 0x2f, 0x4, 0x30, 0x9, 0x30, 0x4, 0x31, 0x9, 0x31, 0x4, 0x32, 
       0x9, 0x32, 0x4, 0x33, 0x9, 0x33, 0x4, 0x34, 0x9, 0x34, 0x4, 0x35, 
       0x9, 0x35, 0x4, 0x36, 0x9, 0x36, 0x4, 0x37, 0x9, 0x37, 0x4, 0x38, 
       0x9, 0x38, 0x4, 0x39, 0x9, 0x39, 0x4, 0x3a, 0x9, 0x3a, 0x4, 0x3b, 
       0x9, 0x3b, 0x4, 0x3c, 0x9, 0x3c, 0x4, 0x3d, 0x9, 0x3d, 0x4, 0x3e, 
       0x9, 0x3e, 0x4, 0x3f, 0x9, 0x3f, 0x4, 0x40, 0x9, 0x40, 0x4, 0x41, 
       0x9, 0x41, 0x4, 0x42, 0x9, 0x42, 0x4, 0x43, 0x9, 0x43, 0x4, 0x44, 
       0x9, 0x44, 0x4, 0x45, 0x9, 0x45, 0x4, 0x46, 0x9, 0x46, 0x4, 0x47, 
       0x9, 0x47, 0x4, 0x48, 0x9, 0x48, 0x4, 0x49, 0x9, 0x49, 0x4, 0x4a, 
       0x9, 0x4a, 0x4, 0x4b, 0x9, 0x4b, 0x4, 0x4c, 0x9, 0x4c, 0x4, 0x4d, 
       0x9, 0x4d, 0x4, 0x4e, 0x9, 0x4e, 0x4, 0x4f, 0x9, 0x4f, 0x4, 0x50, 
       0x9, 0x50, 0x4, 0x51, 0x9, 0x51, 0x4, 0x52, 0x9, 0x52, 0x4, 0x53, 
       0x9, 0x53, 0x4, 0x54, 0x9, 0x54, 0x4, 0x55, 0x9, 0x55, 0x4, 0x56, 
       0x9, 0x56, 0x4, 0x57, 0x9, 0x57, 0x4, 0x58, 0x9, 0x58, 0x4, 0x59, 
       0x9, 0x59, 0x4, 0x5a, 0x9, 0x5a, 0x4, 0x5b, 0x9, 0x5b, 0x4, 0x5c, 
       0x9, 0x5c, 0x4, 0x5d, 0x9, 0x5d, 0x4, 0x5e, 0x9, 0x5e, 0x4, 0x5f, 
       0x9, 0x5f, 0x4, 0x60, 0x9, 0x60, 0x4, 0x61, 0x9, 0x61, 0x4, 0x62, 
       0x9, 0x62, 0x4, 0x63, 0x9, 0x63, 0x4, 0x64, 0x9, 0x64, 0x4, 0x65, 
       0x9, 0x65, 0x4, 0x66, 0x9, 0x66, 0x4, 0x67, 0x9, 0x67, 0x4, 0x68, 
       0x9, 0x68, 0x4, 0x69, 0x9, 0x69, 0x4, 0x6a, 0x9, 0x6a, 0x4, 0x6b, 
       0x9, 0x6b, 0x4, 0x6c, 0x9, 0x6c, 0x4, 0x6d, 0x9, 0x6d, 0x4, 0x6e, 
       0x9, 0x6e, 0x4, 0x6f, 0x9, 0x6f, 0x4, 0x70, 0x9, 0x70, 0x4, 0x71, 
       0x9, 0x71, 0x4, 0x72, 0x9, 0x72, 0x4, 0x73, 0x9, 0x73, 0x4, 0x74, 
       0x9, 0x74, 0x4, 0x75, 0x9, 0x75, 0x4, 0x76, 0x9, 0x76, 0x4, 0x77, 
       0x9, 0x77, 0x4, 0x78, 0x9, 0x78, 0x4, 0x79, 0x9, 0x79, 0x4, 0x7a, 
       0x9, 0x7a, 0x4, 0x7b, 0x9, 0x7b, 0x4, 0x7c, 0x9, 0x7c, 0x4, 0x7d, 
       0x9, 0x7d, 0x4, 0x7e, 0x9, 0x7e, 0x4, 0x7f, 0x9, 0x7f, 0x4, 0x80, 
       0x9, 0x80, 0x4, 0x81, 0x9, 0x81, 0x4, 0x82, 0x9, 0x82, 0x4, 0x83, 
       0x9, 0x83, 0x4, 0x84, 0x9, 0x84, 0x4, 0x85, 0x9, 0x85, 0x4, 0x86, 
       0x9, 0x86, 0x4, 0x87, 0x9, 0x87, 0x4, 0x88, 0x9, 0x88, 0x4, 0x89, 
       0x9, 0x89, 0x4, 0x8a, 0x9, 0x8a, 0x4, 0x8b, 0x9, 0x8b, 0x4, 0x8c, 
       0x9, 0x8c, 0x4, 0x8d, 0x9, 0x8d, 0x4, 0x8e, 0x9, 0x8e, 0x4, 0x8f, 
       0x9, 0x8f, 0x4, 0x90, 0x9, 0x90, 0x4, 0x91, 0x9, 0x91, 0x4, 0x92, 
       0x9, 0x92, 0x4, 0x93, 0x9, 0x93, 0x4, 0x94, 0x9, 0x94, 0x4, 0x95, 
       0x9, 0x95, 0x4, 0x96, 0x9, 0x96, 0x4, 0x97, 0x9, 0x97, 0x4, 0x98, 
       0x9, 0x98, 0x4, 0x99, 0x9, 0x99, 0x4, 0x9a, 0x9, 0x9a, 0x4, 0x9b, 
       0x9, 0x9b, 0x4, 0x9c, 0x9, 0x9c, 0x4, 0x9d, 0x9, 0x9d, 0x4, 0x9e, 
       0x9, 0x9e, 0x4, 0x9f, 0x9, 0x9f, 0x4, 0xa0, 0x9, 0xa0, 0x4, 0xa1, 
       0x9, 0xa1, 0x4, 0xa2, 0x9, 0xa2, 0x4, 0xa3, 0x9, 0xa3, 0x4, 0xa4, 
       0x9, 0xa4, 0x4, 0xa5, 0x9, 0xa5, 0x4, 0xa6, 0x9, 0xa6, 0x4, 0xa7, 
       0x9, 0xa7, 0x4, 0xa8, 0x9, 0xa8, 0x4, 0xa9, 0x9, 0xa9, 0x4, 0xaa, 
       0x9, 0xaa, 0x4, 0xab, 0x9, 0xab, 0x4, 0xac, 0x9, 0xac, 0x4, 0xad, 
       0x9, 0xad, 0x4, 0xae, 0x9, 0xae, 0x4, 0xaf, 0x9, 0xaf, 0x4, 0xb0, 
       0x9, 0xb0, 0x4, 0xb1, 0x9, 0xb1, 0x4, 0xb2, 0x9, 0xb2, 0x4, 0xb3, 
       0x9, 0xb3, 0x4, 0xb4, 0x9, 0xb4, 0x4, 0xb5, 0x9, 0xb5, 0x4, 0xb6, 
       0x9, 0xb6, 0x4, 0xb7, 0x9, 0xb7, 0x4, 0xb8, 0x9, 0xb8, 0x4, 0xb9, 
       0x9, 0xb9, 0x4, 0xba, 0x9, 0xba, 0x4, 0xbb, 0x9, 0xbb, 0x4, 0xbc, 
       0x9, 0xbc, 0x4, 0xbd, 0x9, 0xbd, 0x4, 0xbe, 0x9, 0xbe, 0x4, 0xbf, 
       0x9, 0xbf, 0x4, 0xc0, 0x9, 0xc0, 0x4, 0xc1, 0x9, 0xc1, 0x4, 0xc2, 
       0x9, 0xc2, 0x4, 0xc3, 0x9, 0xc3, 0x4, 0xc4, 0x9, 0xc4, 0x4, 0xc5, 
       0x9, 0xc5, 0x4, 0xc6, 0x9, 0xc6, 0x4, 0xc7, 0x9, 0xc7, 0x4, 0xc8, 
       0x9, 0xc8, 0x4, 0xc9, 0x9, 0xc9, 0x4, 0xca, 0x9, 0xca, 0x4, 0xcb, 
       0x9, 0xcb, 0x4, 0xcc, 0x9, 0xcc, 0x4, 0xcd, 0x9, 0xcd, 0x4, 0xce, 
       0x9, 0xce, 0x4, 0xcf, 0x9, 0xcf, 0x4, 0xd0, 0x9, 0xd0, 0x4, 0xd1, 
       0x9, 0xd1, 0x4, 0xd2, 0x9, 0xd2, 0x4, 0xd3, 0x9, 0xd3, 0x4, 0xd4, 
       0x9, 0xd4, 0x4, 0xd5, 0x9, 0xd5, 0x4, 0xd6, 0x9, 0xd6, 0x4, 0xd7, 
       0x9, 0xd7, 0x4, 0xd8, 0x9, 0xd8, 0x4, 0xd9, 0x9, 0xd9, 0x4, 0xda, 
       0x9, 0xda, 0x4, 0xdb, 0x9, 0xdb, 0x4, 0xdc, 0x9, 0xdc, 0x4, 0xdd, 
       0x9, 0xdd, 0x4, 0xde, 0x9, 0xde, 0x4, 0xdf, 0x9, 0xdf, 0x4, 0xe0, 
       0x9, 0xe0, 0x4, 0xe1, 0x9, 0xe1, 0x4, 0xe2, 0x9, 0xe2, 0x4, 0xe3, 
       0x9, 0xe3, 0x4, 0xe4, 0x9, 0xe4, 0x4, 0xe5, 0x9, 0xe5, 0x4, 0xe6, 
       0x9, 0xe6, 0x4, 0xe7, 0x9, 0xe7, 0x4, 0xe8, 0x9, 0xe8, 0x4, 0xe9, 
       0x9, 0xe9, 0x4, 0xea, 0x9, 0xea, 0x4, 0xeb, 0x9, 0xeb, 0x4, 0xec, 
       0x9, 0xec, 0x4, 0xed, 0x9, 0xed, 0x4, 0xee, 0x9, 0xee, 0x4, 0xef, 
       0x9, 0xef, 0x4, 0xf0, 0x9, 0xf0, 0x4, 0xf1, 0x9, 0xf1, 0x4, 0xf2, 
       0x9, 0xf2, 0x4, 0xf3, 0x9, 0xf3, 0x4, 0xf4, 0x9, 0xf4, 0x4, 0xf5, 
       0x9, 0xf5, 0x4, 0xf6, 0x9, 0xf6, 0x4, 0xf7, 0x9, 0xf7, 0x4, 0xf8, 
       0x9, 0xf8, 0x4, 0xf9, 0x9, 0xf9, 0x4, 0xfa, 0x9, 0xfa, 0x4, 0xfb, 
       0x9, 0xfb, 0x4, 0xfc, 0x9, 0xfc, 0x4, 0xfd, 0x9, 0xfd, 0x4, 0xfe, 
       0x9, 0xfe, 0x4, 0xff, 0x9, 0xff, 0x4, 0x100, 0x9, 0x100, 0x4, 0x101, 
       0x9, 0x101, 0x4, 0x102, 0x9, 0x102, 0x4, 0x103, 0x9, 0x103, 0x4, 
       0x104, 0x9, 0x104, 0x4, 0x105, 0x9, 0x105, 0x4, 0x106, 0x9, 0x106, 
       0x4, 0x107, 0x9, 0x107, 0x4, 0x108, 0x9, 0x108, 0x4, 0x109, 0x9, 
       0x109, 0x4, 0x10a, 0x9, 0x10a, 0x4, 0x10b, 0x9, 0x10b, 0x4, 0x10c, 
       0x9, 0x10c, 0x4, 0x10d, 0x9, 0x10d, 0x4, 0x10e, 0x9, 0x10e, 0x4, 
       0x10f, 0x9, 0x10f, 0x4, 0x110, 0x9, 0x110, 0x4, 0x111, 0x9, 0x111, 
       0x4, 0x112, 0x9, 0x112, 0x4, 0x113, 0x9, 0x113, 0x4, 0x114, 0x9, 
       0x114, 0x4, 0x115, 0x9, 0x115, 0x4, 0x116, 0x9, 0x116, 0x4, 0x117, 
       0x9, 0x117, 0x4, 0x118, 0x9, 0x118, 0x4, 0x119, 0x9, 0x119, 0x4, 
       0x11a, 0x9, 0x11a, 0x4, 0x11b, 0x9, 0x11b, 0x3, 0x2, 0x5, 0x2, 0x238, 
       0xa, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x2, 0x3, 0x3, 0x3, 0x3, 0x3, 
       0x4, 0x6, 0x4, 0x240, 0xa, 0x4, 0xd, 0x4, 0xe, 0x4, 0x241, 0x3, 0x4, 
       0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 0x4, 0x3, 
       0x4, 0x3, 0x4, 0x5, 0x4, 0x24d, 0xa, 0x4, 0x3, 0x5, 0x3, 0x5, 0x5, 
       0x5, 0x251, 0xa, 0x5, 0x3, 0x6, 0x3, 0x6, 0x3, 0x6, 0x3, 0x7, 0x3, 
       0x7, 0x3, 0x7, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 
       0x3, 0x8, 0x3, 0x8, 0x3, 0x8, 0x5, 0x8, 0x261, 0xa, 0x8, 0x5, 0x8, 
       0x263, 0xa, 0x8, 0x3, 0x9, 0x3, 0x9, 0x5, 0x9, 0x267, 0xa, 0x9, 0x3, 
       0x9, 0x3, 0x9, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x5, 0xa, 
       0x26f, 0xa, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 0x3, 0xa, 
       0x5, 0xa, 0x276, 0xa, 0xa, 0x3, 0xa, 0x5, 0xa, 0x279, 0xa, 0xa, 0x3, 
       0xa, 0x3, 0xa, 0x7, 0xa, 0x27d, 0xa, 0xa, 0xc, 0xa, 0xe, 0xa, 0x280, 
       0xb, 0xa, 0x3, 0xb, 0x3, 0xb, 0x5, 0xb, 0x284, 0xa, 0xb, 0x3, 0xb, 
       0x3, 0xb, 0x3, 0xc, 0x3, 0xc, 0x5, 0xc, 0x28a, 0xa, 0xc, 0x3, 0xc, 
       0x3, 0xc, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x3, 0xd, 0x5, 0xd, 0x292, 
       0xa, 0xd, 0x5, 0xd, 0x294, 0xa, 0xd, 0x3, 0xe, 0x3, 0xe, 0x3, 0xf, 
       0x3, 0xf, 0x3, 0xf, 0x7, 0xf, 0x29b, 0xa, 0xf, 0xc, 0xf, 0xe, 0xf, 
       0x29e, 0xb, 0xf, 0x3, 0xf, 0x5, 0xf, 0x2a1, 0xa, 0xf, 0x3, 0x10, 
       0x3, 0x10, 0x5, 0x10, 0x2a5, 0xa, 0x10, 0x3, 0x11, 0x5, 0x11, 0x2a8, 
       0xa, 0x11, 0x3, 0x11, 0x3, 0x11, 0x5, 0x11, 0x2ac, 0xa, 0x11, 0x3, 
       0x12, 0x5, 0x12, 0x2af, 0xa, 0x12, 0x3, 0x12, 0x3, 0x12, 0x3, 0x12, 
       0x3, 0x13, 0x3, 0x13, 0x5, 0x13, 0x2b6, 0xa, 0x13, 0x3, 0x13, 0x3, 
       0x13, 0x5, 0x13, 0x2ba, 0xa, 0x13, 0x3, 0x13, 0x5, 0x13, 0x2bd, 0xa, 
       0x13, 0x3, 0x13, 0x5, 0x13, 0x2c0, 0xa, 0x13, 0x3, 0x13, 0x5, 0x13, 
       0x2c3, 0xa, 0x13, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 
       0x14, 0x2c9, 0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 0x14, 
       0x2da, 0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 0x14, 0x2de, 0xa, 0x14, 
       0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 0x14, 0x2e4, 0xa, 
       0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x5, 
       0x14, 0x2eb, 0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 
       0x5, 0x14, 0x2f1, 0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 0x14, 0x3, 
       0x14, 0x5, 0x14, 0x2f7, 0xa, 0x14, 0x3, 0x14, 0x3, 0x14, 0x7, 0x14, 
       0x2fb, 0xa, 0x14, 0xc, 0x14, 0xe, 0x14, 0x2fe, 0xb, 0x14, 0x3, 0x15, 
       0x3, 0x15, 0x3, 0x16, 0x3, 0x16, 0x3, 0x17, 0x5, 0x17, 0x305, 0xa, 
       0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 0x30a, 0xa, 0x17, 
       0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 
       0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x3, 0x17, 0x5, 0x17, 
       0x317, 0xa, 0x17, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 
       0x18, 0x5, 0x18, 0x324, 0xa, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 
       0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 
       0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x3, 0x18, 0x5, 0x18, 0x333, 0xa, 
       0x18, 0x3, 0x19, 0x3, 0x19, 0x3, 0x1a, 0x5, 0x1a, 0x338, 0xa, 0x1a, 
       0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x33c, 0xa, 0x1a, 0x3, 0x1a, 0x3, 
       0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x3, 0x1a, 0x5, 0x1a, 0x343, 0xa, 0x1a, 
       0x3, 0x1a, 0x5, 0x1a, 0x346, 0xa, 0x1a, 0x3, 0x1b, 0x3, 0x1b, 0x3, 
       0x1b, 0x3, 0x1b, 0x3, 0x1c, 0x3, 0x1c, 0x5, 0x1c, 0x34e, 0xa, 0x1c, 
       0x3, 0x1d, 0x3, 0x1d, 0x5, 0x1d, 0x352, 0xa, 0x1d, 0x3, 0x1d, 0x5, 
       0x1d, 0x355, 0xa, 0x1d, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 
       0x3, 0x1e, 0x5, 0x1e, 0x35c, 0xa, 0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x3, 
       0x1e, 0x3, 0x1e, 0x3, 0x1e, 0x5, 0x1e, 0x363, 0xa, 0x1e, 0x7, 0x1e, 
       0x365, 0xa, 0x1e, 0xc, 0x1e, 0xe, 0x1e, 0x368, 0xb, 0x1e, 0x3, 0x1f, 
       0x3, 0x1f, 0x5, 0x1f, 0x36c, 0xa, 0x1f, 0x3, 0x1f, 0x3, 0x1f, 0x5, 
       0x1f, 0x370, 0xa, 0x1f, 0x3, 0x20, 0x5, 0x20, 0x373, 0xa, 0x20, 0x3, 
       0x20, 0x3, 0x20, 0x3, 0x20, 0x5, 0x20, 0x378, 0xa, 0x20, 0x3, 0x20, 
       0x3, 0x20, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 0x3, 0x21, 
       0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 0x3, 0x22, 
       0x5, 0x22, 0x387, 0xa, 0x22, 0x3, 0x23, 0x3, 0x23, 0x3, 0x23, 0x7, 
       0x23, 0x38c, 0xa, 0x23, 0xc, 0x23, 0xe, 0x23, 0x38f, 0xb, 0x23, 0x3, 
       0x24, 0x3, 0x24, 0x3, 0x24, 0x7, 0x24, 0x394, 0xa, 0x24, 0xc, 0x24, 
       0xe, 0x24, 0x397, 0xb, 0x24, 0x3, 0x25, 0x3, 0x25, 0x3, 0x25, 0x7, 
       0x25, 0x39c, 0xa, 0x25, 0xc, 0x25, 0xe, 0x25, 0x39f, 0xb, 0x25, 0x3, 
       0x26, 0x3, 0x26, 0x3, 0x26, 0x3, 0x26, 0x7, 0x26, 0x3a5, 0xa, 0x26, 
       0xc, 0x26, 0xe, 0x26, 0x3a8, 0xb, 0x26, 0x3, 0x27, 0x3, 0x27, 0x3, 
       0x27, 0x3, 0x27, 0x5, 0x27, 0x3ae, 0xa, 0x27, 0x3, 0x28, 0x3, 0x28, 
       0x3, 0x28, 0x7, 0x28, 0x3b3, 0xa, 0x28, 0xc, 0x28, 0xe, 0x28, 0x3b6, 
       0xb, 0x28, 0x3, 0x29, 0x3, 0x29, 0x3, 0x29, 0x7, 0x29, 0x3bb, 0xa, 
       0x29, 0xc, 0x29, 0xe, 0x29, 0x3be, 0xb, 0x29, 0x3, 0x2a, 0x3, 0x2a, 
       0x3, 0x2a, 0x7, 0x2a, 0x3c3, 0xa, 0x2a, 0xc, 0x2a, 0xe, 0x2a, 0x3c6, 
       0xb, 0x2a, 0x3, 0x2b, 0x3, 0x2b, 0x3, 0x2b, 0x7, 0x2b, 0x3cb, 0xa, 
       0x2b, 0xc, 0x2b, 0xe, 0x2b, 0x3ce, 0xb, 0x2b, 0x3, 0x2c, 0x3, 0x2c, 
       0x3, 0x2c, 0x7, 0x2c, 0x3d3, 0xa, 0x2c, 0xc, 0x2c, 0xe, 0x2c, 0x3d6, 
       0xb, 0x2c, 0x3, 0x2d, 0x3, 0x2d, 0x3, 0x2d, 0x7, 0x2d, 0x3db, 0xa, 
       0x2d, 0xc, 0x2d, 0xe, 0x2d, 0x3de, 0xb, 0x2d, 0x3, 0x2e, 0x3, 0x2e, 
       0x3, 0x2e, 0x7, 0x2e, 0x3e3, 0xa, 0x2e, 0xc, 0x2e, 0xe, 0x2e, 0x3e6, 
       0xb, 0x2e, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 0x3, 0x2f, 
       0x3, 0x2f, 0x5, 0x2f, 0x3ee, 0xa, 0x2f, 0x3, 0x30, 0x3, 0x30, 0x3, 
       0x30, 0x3, 0x30, 0x3, 0x30, 0x3, 0x30, 0x5, 0x30, 0x3f6, 0xa, 0x30, 
       0x3, 0x31, 0x3, 0x31, 0x3, 0x32, 0x3, 0x32, 0x3, 0x32, 0x7, 0x32, 
       0x3fd, 0xa, 0x32, 0xc, 0x32, 0xe, 0x32, 0x400, 0xb, 0x32, 0x3, 0x33, 
       0x3, 0x33, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 
       0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 0x34, 0x412, 0xa, 0x34, 0x3, 
       0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x3, 0x34, 0x5, 
       0x34, 0x41a, 0xa, 0x34, 0x5, 0x34, 0x41c, 0xa, 0x34, 0x3, 0x35, 0x5, 
       0x35, 0x41f, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 
       0x5, 0x35, 0x425, 0xa, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 0x35, 0x3, 
       0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 
       0x36, 0x3, 0x36, 0x3, 0x36, 0x7, 0x36, 0x433, 0xa, 0x36, 0xc, 0x36, 
       0xe, 0x36, 0x436, 0xb, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 0x36, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 
       0x37, 0x3, 0x37, 0x3, 0x37, 0x7, 0x37, 0x444, 0xa, 0x37, 0xc, 0x37, 
       0xe, 0x37, 0x447, 0xb, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 0x37, 0x3, 
       0x38, 0x3, 0x38, 0x3, 0x38, 0x5, 0x38, 0x44f, 0xa, 0x38, 0x3, 0x39, 
       0x3, 0x39, 0x3, 0x39, 0x5, 0x39, 0x454, 0xa, 0x39, 0x3, 0x3a, 0x3, 
       0x3a, 0x3, 0x3a, 0x6, 0x3a, 0x459, 0xa, 0x3a, 0xd, 0x3a, 0xe, 0x3a, 
       0x45a, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 
       0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x3, 
       0x3b, 0x3, 0x3b, 0x3, 0x3b, 0x5, 0x3b, 0x46b, 0xa, 0x3b, 0x3, 0x3c, 
       0x3, 0x3c, 0x3, 0x3c, 0x5, 0x3c, 0x470, 0xa, 0x3c, 0x3, 0x3d, 0x3, 
       0x3d, 0x3, 0x3d, 0x3, 0x3d, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 
       0x3e, 0x3, 0x3e, 0x3, 0x3e, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 
       0x3f, 0x3, 0x3f, 0x3, 0x3f, 0x3, 0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 
       0x40, 0x3, 0x40, 0x3, 0x40, 0x3, 0x41, 0x3, 0x41, 0x3, 0x41, 0x3, 
       0x41, 0x3, 0x41, 0x3, 0x41, 0x3, 0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 
       0x42, 0x3, 0x42, 0x3, 0x42, 0x3, 0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 
       0x43, 0x3, 0x43, 0x3, 0x43, 0x3, 0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 
       0x44, 0x3, 0x44, 0x3, 0x44, 0x3, 0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 
       0x45, 0x3, 0x45, 0x3, 0x45, 0x3, 0x46, 0x3, 0x46, 0x3, 0x46, 0x3, 
       0x47, 0x3, 0x47, 0x3, 0x47, 0x3, 0x48, 0x3, 0x48, 0x3, 0x48, 0x3, 
       0x49, 0x3, 0x49, 0x3, 0x49, 0x3, 0x4a, 0x3, 0x4a, 0x3, 0x4a, 0x3, 
       0x4b, 0x3, 0x4b, 0x3, 0x4b, 0x3, 0x4c, 0x3, 0x4c, 0x3, 0x4c, 0x3, 
       0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 0x4d, 0x3, 
       0x4d, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 0x4e, 0x3, 
       0x4e, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 0x4f, 0x3, 
       0x4f, 0x3, 0x50, 0x3, 0x50, 0x5, 0x50, 0x4d0, 0xa, 0x50, 0x3, 0x50, 
       0x3, 0x50, 0x3, 0x50, 0x5, 0x50, 0x4d5, 0xa, 0x50, 0x7, 0x50, 0x4d7, 
       0xa, 0x50, 0xc, 0x50, 0xe, 0x50, 0x4da, 0xb, 0x50, 0x3, 0x51, 0x3, 
       0x51, 0x3, 0x52, 0x3, 0x52, 0x3, 0x52, 0x5, 0x52, 0x4e1, 0xa, 0x52, 
       0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 
       0x4e8, 0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x53, 0x5, 0x53, 0x4ed, 
       0xa, 0x53, 0x3, 0x53, 0x3, 0x53, 0x3, 0x54, 0x3, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4f6, 0xa, 0x54, 0x3, 0x54, 0x3, 
       0x54, 0x3, 0x54, 0x3, 0x54, 0x5, 0x54, 0x4fc, 0xa, 0x54, 0x3, 0x54, 
       0x3, 0x54, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x5, 0x55, 0x503, 0xa, 
       0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 0x55, 0x3, 
       0x55, 0x3, 0x56, 0x3, 0x56, 0x5, 0x56, 0x50d, 0xa, 0x56, 0x3, 0x57, 
       0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 0x3, 0x57, 
       0x3, 0x57, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 
       0x3, 0x58, 0x5, 0x58, 0x51d, 0xa, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 
       0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 0x58, 0x3, 
       0x59, 0x3, 0x59, 0x5, 0x59, 0x529, 0xa, 0x59, 0x3, 0x5a, 0x3, 0x5a, 
       0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5a, 0x3, 0x5b, 0x3, 0x5b, 0x3, 0x5b, 
       0x7, 0x5b, 0x533, 0xa, 0x5b, 0xc, 0x5b, 0xe, 0x5b, 0x536, 0xb, 0x5b, 
       0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 
       0x5, 0x5c, 0x53e, 0xa, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 0x6, 
       0x5c, 0x543, 0xa, 0x5c, 0xd, 0x5c, 0xe, 0x5c, 0x544, 0x3, 0x5c, 0x3, 
       0x5c, 0x3, 0x5c, 0x5, 0x5c, 0x54a, 0xa, 0x5c, 0x3, 0x5c, 0x3, 0x5c, 
       0x3, 0x5d, 0x3, 0x5d, 0x5, 0x5d, 0x550, 0xa, 0x5d, 0x3, 0x5d, 0x3, 
       0x5d, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x3, 0x5e, 0x7, 
       0x5e, 0x559, 0xa, 0x5e, 0xc, 0x5e, 0xe, 0x5e, 0x55c, 0xb, 0x5e, 0x3, 
       0x5e, 0x3, 0x5e, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 
       0x5f, 0x3, 0x5f, 0x3, 0x5f, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x6, 
       0x60, 0x56a, 0xa, 0x60, 0xd, 0x60, 0xe, 0x60, 0x56b, 0x3, 0x60, 0x5, 
       0x60, 0x56f, 0xa, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x5, 0x60, 
       0x574, 0xa, 0x60, 0x3, 0x60, 0x3, 0x60, 0x3, 0x60, 0x5, 0x60, 0x579, 
       0xa, 0x60, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 
       0x57f, 0xa, 0x61, 0x3, 0x61, 0x3, 0x61, 0x3, 0x61, 0x5, 0x61, 0x584, 
       0xa, 0x61, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x5, 0x62, 0x589, 0xa, 
       0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x62, 0x3, 0x63, 0x5, 0x63, 0x58f, 
       0xa, 0x63, 0x3, 0x63, 0x3, 0x63, 0x3, 0x64, 0x3, 0x64, 0x5, 0x64, 
       0x595, 0xa, 0x64, 0x3, 0x64, 0x3, 0x64, 0x3, 0x65, 0x6, 0x65, 0x59a, 
       0xa, 0x65, 0xd, 0x65, 0xe, 0x65, 0x59b, 0x3, 0x66, 0x3, 0x66, 0x3, 
       0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x5, 0x66, 0x5a5, 
       0xa, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 0x3, 0x66, 
       0x3, 0x66, 0x5, 0x66, 0x5ad, 0xa, 0x66, 0x3, 0x67, 0x3, 0x67, 0x5, 
       0x67, 0x5b1, 0xa, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 0x3, 0x67, 
       0x3, 0x67, 0x5, 0x67, 0x5b8, 0xa, 0x67, 0x5, 0x67, 0x5ba, 0xa, 0x67, 
       0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 
       0x5, 0x68, 0x5ce, 0xa, 0x68, 0x3, 0x68, 0x3, 0x68, 0x5, 0x68, 0x5d2, 
       0xa, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x5, 0x68, 
       0x5d8, 0xa, 0x68, 0x3, 0x68, 0x3, 0x68, 0x3, 0x68, 0x5, 0x68, 0x5dd, 
       0xa, 0x68, 0x3, 0x69, 0x3, 0x69, 0x5, 0x69, 0x5e1, 0xa, 0x69, 0x3, 
       0x6a, 0x5, 0x6a, 0x5e4, 0xa, 0x6a, 0x3, 0x6a, 0x3, 0x6a, 0x3, 0x6a, 
       0x3, 0x6b, 0x3, 0x6b, 0x5, 0x6b, 0x5eb, 0xa, 0x6b, 0x3, 0x6c, 0x3, 
       0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x3, 0x6c, 0x5, 0x6c, 0x5f2, 0xa, 0x6c, 
       0x3, 0x6c, 0x3, 0x6c, 0x5, 0x6c, 0x5f6, 0xa, 0x6c, 0x3, 0x6c, 0x3, 
       0x6c, 0x3, 0x6d, 0x3, 0x6d, 0x3, 0x6e, 0x6, 0x6e, 0x5fd, 0xa, 0x6e, 
       0xd, 0x6e, 0xe, 0x6e, 0x5fe, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 
       0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 
       0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x3, 0x6f, 0x5, 0x6f, 0x60f, 
       0xa, 0x6f, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 
       0x3, 0x70, 0x3, 0x70, 0x3, 0x70, 0x5, 0x70, 0x619, 0xa, 0x70, 0x3, 
       0x71, 0x3, 0x71, 0x3, 0x71, 0x5, 0x71, 0x61e, 0xa, 0x71, 0x3, 0x71, 
       0x3, 0x71, 0x3, 0x71, 0x3, 0x71, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 
       0x626, 0xa, 0x72, 0x5, 0x72, 0x628, 0xa, 0x72, 0x3, 0x72, 0x3, 0x72, 
       0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x3, 0x72, 0x5, 0x72, 0x630, 0xa, 
       0x72, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 
       0x73, 0x3, 0x73, 0x3, 0x73, 0x3, 0x74, 0x3, 0x74, 0x3, 0x75, 0x3, 
       0x75, 0x3, 0x75, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 0x76, 0x3, 
       0x76, 0x3, 0x76, 0x3, 0x76, 0x5, 0x76, 0x646, 0xa, 0x76, 0x3, 0x77, 
       0x6, 0x77, 0x649, 0xa, 0x77, 0xd, 0x77, 0xe, 0x77, 0x64a, 0x3, 0x77, 
       0x5, 0x77, 0x64e, 0xa, 0x77, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 
       0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 0x78, 0x3, 
       0x78, 0x5, 0x78, 0x65a, 0xa, 0x78, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 
       0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x79, 0x3, 0x7a, 0x3, 0x7a, 
       0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 0x3, 0x7a, 
       0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 0x3, 0x7b, 
       0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7c, 0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7d, 
       0x3, 0x7d, 0x3, 0x7d, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 0x3, 0x7e, 
       0x3, 0x7e, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 0x3, 0x7f, 
       0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x80, 0x3, 0x81, 
       0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x81, 0x3, 0x82, 
       0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x82, 0x3, 0x83, 
       0x3, 0x83, 0x3, 0x84, 0x3, 0x84, 0x3, 0x85, 0x3, 0x85, 0x3, 0x86, 
       0x3, 0x86, 0x3, 0x86, 0x3, 0x86, 0x5, 0x86, 0x69e, 0xa, 0x86, 0x3, 
       0x87, 0x3, 0x87, 0x3, 0x87, 0x3, 0x87, 0x5, 0x87, 0x6a4, 0xa, 0x87, 
       0x3, 0x88, 0x6, 0x88, 0x6a7, 0xa, 0x88, 0xd, 0x88, 0xe, 0x88, 0x6a8, 
       0x3, 0x88, 0x5, 0x88, 0x6ac, 0xa, 0x88, 0x3, 0x89, 0x6, 0x89, 0x6af, 
       0xa, 0x89, 0xd, 0x89, 0xe, 0x89, 0x6b0, 0x3, 0x89, 0x5, 0x89, 0x6b4, 
       0xa, 0x89, 0x3, 0x8a, 0x3, 0x8a, 0x3, 0x8b, 0x3, 0x8b, 0x3, 0x8c, 
       0x5, 0x8c, 0x6bb, 0xa, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x6c4, 0xa, 0x8c, 
       0x3, 0x8c, 0x6, 0x8c, 0x6c7, 0xa, 0x8c, 0xd, 0x8c, 0xe, 0x8c, 0x6c8, 
       0x3, 0x8c, 0x5, 0x8c, 0x6cc, 0xa, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 
       0x8c, 0x6d0, 0xa, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x6d4, 0xa, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x6d8, 0xa, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x6dd, 0xa, 0x8c, 0x3, 0x8c, 0x7, 
       0x8c, 0x6e0, 0xa, 0x8c, 0xc, 0x8c, 0xe, 0x8c, 0x6e3, 0xb, 0x8c, 0x3, 
       0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x6e8, 0xa, 0x8c, 0x3, 0x8c, 
       0x3, 0x8c, 0x3, 0x8c, 0x3, 0x8c, 0x5, 0x8c, 0x6ee, 0xa, 0x8c, 0x3, 
       0x8d, 0x3, 0x8d, 0x3, 0x8d, 0x5, 0x8d, 0x6f3, 0xa, 0x8d, 0x3, 0x8e, 
       0x3, 0x8e, 0x3, 0x8e, 0x3, 0x8e, 0x5, 0x8e, 0x6f9, 0xa, 0x8e, 0x3, 
       0x8e, 0x3, 0x8e, 0x3, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0x6ff, 0xa, 0x8f, 
       0x3, 0x8f, 0x5, 0x8f, 0x702, 0xa, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x3, 
       0x8f, 0x3, 0x8f, 0x5, 0x8f, 0x708, 0xa, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 
       0x5, 0x8f, 0x70c, 0xa, 0x8f, 0x3, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0x710, 
       0xa, 0x8f, 0x3, 0x8f, 0x5, 0x8f, 0x713, 0xa, 0x8f, 0x3, 0x90, 0x3, 
       0x90, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 0x91, 0x5, 0x91, 0x71b, 
       0xa, 0x91, 0x5, 0x91, 0x71d, 0xa, 0x91, 0x3, 0x91, 0x3, 0x91, 0x3, 
       0x92, 0x3, 0x92, 0x5, 0x92, 0x723, 0xa, 0x92, 0x3, 0x92, 0x5, 0x92, 
       0x726, 0xa, 0x92, 0x3, 0x92, 0x5, 0x92, 0x729, 0xa, 0x92, 0x3, 0x92, 
       0x5, 0x92, 0x72c, 0xa, 0x92, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 0x730, 
       0xa, 0x93, 0x3, 0x93, 0x3, 0x93, 0x5, 0x93, 0x734, 0xa, 0x93, 0x3, 
       0x93, 0x3, 0x93, 0x3, 0x94, 0x3, 0x94, 0x5, 0x94, 0x73a, 0xa, 0x94, 
       0x3, 0x95, 0x3, 0x95, 0x3, 0x95, 0x3, 0x96, 0x3, 0x96, 0x3, 0x96, 
       0x7, 0x96, 0x742, 0xa, 0x96, 0xc, 0x96, 0xe, 0x96, 0x745, 0xb, 0x96, 
       0x3, 0x97, 0x3, 0x97, 0x3, 0x97, 0x5, 0x97, 0x74a, 0xa, 0x97, 0x3, 
       0x98, 0x3, 0x98, 0x3, 0x99, 0x3, 0x99, 0x5, 0x99, 0x750, 0xa, 0x99, 
       0x3, 0x9a, 0x3, 0x9a, 0x3, 0x9b, 0x5, 0x9b, 0x755, 0xa, 0x9b, 0x3, 
       0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x5, 0x9b, 0x75a, 0xa, 0x9b, 0x3, 0x9b, 
       0x3, 0x9b, 0x5, 0x9b, 0x75e, 0xa, 0x9b, 0x3, 0x9b, 0x3, 0x9b, 0x3, 
       0x9c, 0x3, 0x9c, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 0x9d, 0x3, 
       0x9d, 0x3, 0x9d, 0x3, 0x9e, 0x5, 0x9e, 0x76b, 0xa, 0x9e, 0x3, 0x9e, 
       0x3, 0x9e, 0x3, 0x9f, 0x3, 0x9f, 0x5, 0x9f, 0x771, 0xa, 0x9f, 0x3, 
       0x9f, 0x3, 0x9f, 0x5, 0x9f, 0x775, 0xa, 0x9f, 0x3, 0x9f, 0x3, 0x9f, 
       0x3, 0x9f, 0x3, 0xa0, 0x5, 0xa0, 0x77b, 0xa, 0xa0, 0x3, 0xa0, 0x3, 
       0xa0, 0x3, 0xa0, 0x5, 0xa0, 0x780, 0xa, 0xa0, 0x3, 0xa0, 0x3, 0xa0, 
       0x3, 0xa0, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 0x3, 0xa1, 
       0x3, 0xa1, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 
       0x78f, 0xa, 0xa2, 0x3, 0xa2, 0x3, 0xa2, 0x5, 0xa2, 0x793, 0xa, 0xa2, 
       0x3, 0xa3, 0x6, 0xa3, 0x796, 0xa, 0xa3, 0xd, 0xa3, 0xe, 0xa3, 0x797, 
       0x3, 0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x5, 0xa4, 0x79d, 0xa, 0xa4, 0x3, 
       0xa4, 0x3, 0xa4, 0x3, 0xa4, 0x5, 0xa4, 0x7a2, 0xa, 0xa4, 0x3, 0xa5, 
       0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x5, 0xa5, 0x7a8, 0xa, 0xa5, 0x3, 
       0xa5, 0x5, 0xa5, 0x7ab, 0xa, 0xa5, 0x3, 0xa5, 0x3, 0xa5, 0x3, 0xa6, 
       0x3, 0xa6, 0x3, 0xa6, 0x7, 0xa6, 0x7b2, 0xa, 0xa6, 0xc, 0xa6, 0xe, 
       0xa6, 0x7b5, 0xb, 0xa6, 0x3, 0xa6, 0x5, 0xa6, 0x7b8, 0xa, 0xa6, 0x3, 
       0xa7, 0x3, 0xa7, 0x3, 0xa7, 0x5, 0xa7, 0x7bd, 0xa, 0xa7, 0x3, 0xa7, 
       0x3, 0xa7, 0x5, 0xa7, 0x7c1, 0xa, 0xa7, 0x3, 0xa8, 0x3, 0xa8, 0x3, 
       0xa9, 0x3, 0xa9, 0x5, 0xa9, 0x7c7, 0xa, 0xa9, 0x3, 0xa9, 0x3, 0xa9, 
       0x3, 0xaa, 0x6, 0xaa, 0x7cc, 0xa, 0xaa, 0xd, 0xaa, 0xe, 0xaa, 0x7cd, 
       0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 
       0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 0x3, 0xab, 
       0x3, 0xab, 0x6, 0xab, 0x7dd, 0xa, 0xab, 0xd, 0xab, 0xe, 0xab, 0x7de, 
       0x5, 0xab, 0x7e1, 0xa, 0xab, 0x3, 0xac, 0x3, 0xac, 0x3, 0xac, 0x7, 
       0xac, 0x7e6, 0xa, 0xac, 0xc, 0xac, 0xe, 0xac, 0x7e9, 0xb, 0xac, 0x3, 
       0xad, 0x3, 0xad, 0x5, 0xad, 0x7ed, 0xa, 0xad, 0x3, 0xae, 0x3, 0xae, 
       0x3, 0xae, 0x3, 0xae, 0x3, 0xae, 0x5, 0xae, 0x7f4, 0xa, 0xae, 0x3, 
       0xaf, 0x3, 0xaf, 0x5, 0xaf, 0x7f8, 0xa, 0xaf, 0x7, 0xaf, 0x7fa, 0xa, 
       0xaf, 0xc, 0xaf, 0xe, 0xaf, 0x7fd, 0xb, 0xaf, 0x3, 0xaf, 0x3, 0xaf, 
       0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0x804, 0xa, 0xb0, 0x3, 
       0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0x80a, 0xa, 0xb0, 
       0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0x810, 0xa, 
       0xb0, 0x3, 0xb0, 0x3, 0xb0, 0x5, 0xb0, 0x814, 0xa, 0xb0, 0x5, 0xb0, 
       0x816, 0xa, 0xb0, 0x7, 0xb0, 0x818, 0xa, 0xb0, 0xc, 0xb0, 0xe, 0xb0, 
       0x81b, 0xb, 0xb0, 0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0x81f, 0xa, 0xb1, 
       0x3, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0x823, 0xa, 0xb1, 0x3, 0xb1, 0x5, 
       0xb1, 0x826, 0xa, 0xb1, 0x3, 0xb1, 0x5, 0xb1, 0x829, 0xa, 0xb1, 0x3, 
       0xb1, 0x5, 0xb1, 0x82c, 0xa, 0xb1, 0x3, 0xb2, 0x3, 0xb2, 0x3, 0xb2, 
       0x5, 0xb2, 0x831, 0xa, 0xb2, 0x3, 0xb3, 0x3, 0xb3, 0x5, 0xb3, 0x835, 
       0xa, 0xb3, 0x3, 0xb3, 0x5, 0xb3, 0x838, 0xa, 0xb3, 0x3, 0xb3, 0x3, 
       0xb3, 0x5, 0xb3, 0x83c, 0xa, 0xb3, 0x3, 0xb3, 0x5, 0xb3, 0x83f, 0xa, 
       0xb3, 0x5, 0xb3, 0x841, 0xa, 0xb3, 0x3, 0xb4, 0x6, 0xb4, 0x844, 0xa, 
       0xb4, 0xd, 0xb4, 0xe, 0xb4, 0x845, 0x3, 0xb5, 0x3, 0xb5, 0x3, 0xb6, 
       0x3, 0xb6, 0x3, 0xb7, 0x5, 0xb7, 0x84d, 0xa, 0xb7, 0x3, 0xb7, 0x3, 
       0xb7, 0x3, 0xb7, 0x3, 0xb8, 0x3, 0xb8, 0x5, 0xb8, 0x854, 0xa, 0xb8, 
       0x3, 0xb9, 0x3, 0xb9, 0x5, 0xb9, 0x858, 0xa, 0xb9, 0x3, 0xb9, 0x3, 
       0xb9, 0x3, 0xb9, 0x3, 0xb9, 0x5, 0xb9, 0x85e, 0xa, 0xb9, 0x3, 0xba, 
       0x3, 0xba, 0x6, 0xba, 0x862, 0xa, 0xba, 0xd, 0xba, 0xe, 0xba, 0x863, 
       0x3, 0xba, 0x5, 0xba, 0x867, 0xa, 0xba, 0x5, 0xba, 0x869, 0xa, 0xba, 
       0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x5, 0xbb, 0x86f, 0xa, 
       0xbb, 0x3, 0xbb, 0x6, 0xbb, 0x872, 0xa, 0xbb, 0xd, 0xbb, 0xe, 0xbb, 
       0x873, 0x3, 0xbb, 0x5, 0xbb, 0x877, 0xa, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 
       0x3, 0xbb, 0x3, 0xbb, 0x5, 0xbb, 0x87d, 0xa, 0xbb, 0x3, 0xbb, 0x3, 
       0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x3, 0xbb, 0x5, 0xbb, 0x884, 0xa, 0xbb, 
       0x3, 0xbb, 0x6, 0xbb, 0x887, 0xa, 0xbb, 0xd, 0xbb, 0xe, 0xbb, 0x888, 
       0x3, 0xbb, 0x5, 0xbb, 0x88c, 0xa, 0xbb, 0x5, 0xbb, 0x88e, 0xa, 0xbb, 
       0x7, 0xbb, 0x890, 0xa, 0xbb, 0xc, 0xbb, 0xe, 0xbb, 0x893, 0xb, 0xbb, 
       0x3, 0xbc, 0x7, 0xbc, 0x896, 0xa, 0xbc, 0xc, 0xbc, 0xe, 0xbc, 0x899, 
       0xb, 0xbc, 0x3, 0xbc, 0x3, 0xbc, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 
       0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x5, 0xbd, 0x8a4, 0xa, 
       0xbd, 0x3, 0xbd, 0x3, 0xbd, 0x5, 0xbd, 0x8a8, 0xa, 0xbd, 0x5, 0xbd, 
       0x8aa, 0xa, 0xbd, 0x7, 0xbd, 0x8ac, 0xa, 0xbd, 0xc, 0xbd, 0xe, 0xbd, 
       0x8af, 0xb, 0xbd, 0x3, 0xbe, 0x3, 0xbe, 0x5, 0xbe, 0x8b3, 0xa, 0xbe, 
       0x3, 0xbe, 0x5, 0xbe, 0x8b6, 0xa, 0xbe, 0x3, 0xbf, 0x3, 0xbf, 0x3, 
       0xbf, 0x7, 0xbf, 0x8bb, 0xa, 0xbf, 0xc, 0xbf, 0xe, 0xbf, 0x8be, 0xb, 
       0xbf, 0x3, 0xc0, 0x5, 0xc0, 0x8c1, 0xa, 0xc0, 0x3, 0xc0, 0x3, 0xc0, 
       0x3, 0xc0, 0x5, 0xc0, 0x8c6, 0xa, 0xc0, 0x5, 0xc0, 0x8c8, 0xa, 0xc0, 
       0x3, 0xc0, 0x3, 0xc0, 0x5, 0xc0, 0x8cc, 0xa, 0xc0, 0x3, 0xc1, 0x3, 
       0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc1, 0x3, 0xc2, 0x3, 0xc2, 0x3, 
       0xc2, 0x3, 0xc2, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 
       0xc3, 0x5, 0xc3, 0x8dc, 0xa, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 0x3, 0xc3, 
       0x5, 0xc3, 0x8e1, 0xa, 0xc3, 0x5, 0xc3, 0x8e3, 0xa, 0xc3, 0x3, 0xc3, 
       0x3, 0xc3, 0x7, 0xc3, 0x8e7, 0xa, 0xc3, 0xc, 0xc3, 0xe, 0xc3, 0x8ea, 
       0xb, 0xc3, 0x3, 0xc4, 0x5, 0xc4, 0x8ed, 0xa, 0xc4, 0x3, 0xc4, 0x3, 
       0xc4, 0x3, 0xc4, 0x3, 0xc4, 0x5, 0xc4, 0x8f3, 0xa, 0xc4, 0x3, 0xc4, 
       0x3, 0xc4, 0x3, 0xc4, 0x3, 0xc5, 0x3, 0xc5, 0x3, 0xc5, 0x7, 0xc5, 
       0x8fb, 0xa, 0xc5, 0xc, 0xc5, 0xe, 0xc5, 0x8fe, 0xb, 0xc5, 0x3, 0xc6, 
       0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x5, 0xc6, 0x904, 0xa, 0xc6, 0x3, 
       0xc6, 0x5, 0xc6, 0x907, 0xa, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 0x3, 0xc6, 
       0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc7, 0x3, 0xc8, 
       0x3, 0xc8, 0x3, 0xc8, 0x3, 0xc8, 0x5, 0xc8, 0x915, 0xa, 0xc8, 0x3, 
       0xc8, 0x3, 0xc8, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 0xc9, 0x3, 
       0xc9, 0x3, 0xc9, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 
       0xca, 0x3, 0xca, 0x3, 0xca, 0x3, 0xcb, 0x3, 0xcb, 0x3, 0xcc, 0x3, 
       0xcc, 0x3, 0xcc, 0x3, 0xcc, 0x5, 0xcc, 0x92c, 0xa, 0xcc, 0x3, 0xcd, 
       0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xcd, 0x3, 0xce, 0x3, 0xce, 
       0x3, 0xce, 0x3, 0xce, 0x3, 0xce, 0x3, 0xcf, 0x3, 0xcf, 0x3, 0xcf, 
       0x3, 0xcf, 0x3, 0xcf, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x5, 0xd0, 
       0x940, 0xa, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd0, 0x3, 0xd1, 0x3, 
       0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x3, 0xd1, 0x7, 0xd1, 0x94b, 
       0xa, 0xd1, 0xc, 0xd1, 0xe, 0xd1, 0x94e, 0xb, 0xd1, 0x5, 0xd1, 0x950, 
       0xa, 0xd1, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd2, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x3, 0xd3, 0x5, 0xd3, 0x95f, 0xa, 0xd3, 0x3, 0xd3, 0x3, 
       0xd3, 0x5, 0xd3, 0x963, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 
       0x3, 0xd3, 0x5, 0xd3, 0x969, 0xa, 0xd3, 0x3, 0xd3, 0x3, 0xd3, 0x5, 
       0xd3, 0x96d, 0xa, 0xd3, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 0x3, 0xd4, 
       0x3, 0xd5, 0x3, 0xd5, 0x3, 0xd5, 0x5, 0xd5, 0x976, 0xa, 0xd5, 0x3, 
       0xd5, 0x3, 0xd5, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 0xd6, 0x3, 
       0xd6, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd7, 0x3, 0xd8, 0x3, 
       0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x5, 0xd8, 0x988, 0xa, 0xd8, 
       0x3, 0xd8, 0x3, 0xd8, 0x3, 0xd8, 0x5, 0xd8, 0x98d, 0xa, 0xd8, 0x3, 
       0xd8, 0x7, 0xd8, 0x990, 0xa, 0xd8, 0xc, 0xd8, 0xe, 0xd8, 0x993, 0xb, 
       0xd8, 0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x5, 0xd9, 0x998, 0xa, 0xd9, 
       0x3, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x5, 0xd9, 0x99d, 0xa, 0xd9, 0x3, 
       0xd9, 0x5, 0xd9, 0x9a0, 0xa, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 0x5, 0xd9, 
       0x9a4, 0xa, 0xd9, 0x5, 0xd9, 0x9a6, 0xa, 0xd9, 0x3, 0xd9, 0x3, 0xd9, 
       0x3, 0xda, 0x3, 0xda, 0x3, 0xda, 0x5, 0xda, 0x9ad, 0xa, 0xda, 0x3, 
       0xda, 0x3, 0xda, 0x3, 0xdb, 0x5, 0xdb, 0x9b2, 0xa, 0xdb, 0x3, 0xdb, 
       0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x3, 0xdb, 0x5, 0xdb, 0x9b9, 0xa, 
       0xdb, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x3, 0xdc, 0x5, 
       0xdc, 0x9c0, 0xa, 0xdc, 0x3, 0xdd, 0x3, 0xdd, 0x3, 0xdd, 0x5, 0xdd, 
       0x9c5, 0xa, 0xdd, 0x3, 0xde, 0x3, 0xde, 0x5, 0xde, 0x9c9, 0xa, 0xde, 
       0x3, 0xdf, 0x3, 0xdf, 0x5, 0xdf, 0x9cd, 0xa, 0xdf, 0x3, 0xdf, 0x3, 
       0xdf, 0x3, 0xdf, 0x5, 0xdf, 0x9d2, 0xa, 0xdf, 0x7, 0xdf, 0x9d4, 0xa, 
       0xdf, 0xc, 0xdf, 0xe, 0xdf, 0x9d7, 0xb, 0xdf, 0x3, 0xe0, 0x3, 0xe0, 
       0x3, 0xe0, 0x5, 0xe0, 0x9dc, 0xa, 0xe0, 0x5, 0xe0, 0x9de, 0xa, 0xe0, 
       0x3, 0xe0, 0x3, 0xe0, 0x3, 0xe1, 0x3, 0xe1, 0x5, 0xe1, 0x9e4, 0xa, 
       0xe1, 0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe2, 0x5, 0xe2, 0x9e9, 0xa, 0xe2, 
       0x3, 0xe2, 0x3, 0xe2, 0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0x9ef, 0xa, 
       0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0x9f3, 0xa, 0xe3, 0x5, 0xe3, 
       0x9f5, 0xa, 0xe3, 0x3, 0xe3, 0x5, 0xe3, 0x9f8, 0xa, 0xe3, 0x3, 0xe3, 
       0x3, 0xe3, 0x5, 0xe3, 0x9fc, 0xa, 0xe3, 0x3, 0xe3, 0x3, 0xe3, 0x5, 
       0xe3, 0xa00, 0xa, 0xe3, 0x5, 0xe3, 0xa02, 0xa, 0xe3, 0x5, 0xe3, 0xa04, 
       0xa, 0xe3, 0x3, 0xe4, 0x5, 0xe4, 0xa07, 0xa, 0xe4, 0x3, 0xe4, 0x3, 
       0xe4, 0x3, 0xe5, 0x3, 0xe5, 0x3, 0xe6, 0x3, 0xe6, 0x3, 0xe7, 0x3, 
       0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x3, 0xe7, 0x6, 0xe7, 0xa14, 0xa, 0xe7, 
       0xd, 0xe7, 0xe, 0xe7, 0xa15, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0xa20, 
       0xa, 0xe8, 0x3, 0xe8, 0x5, 0xe8, 0xa23, 0xa, 0xe8, 0x3, 0xe8, 0x3, 
       0xe8, 0x3, 0xe8, 0x3, 0xe9, 0x5, 0xe9, 0xa29, 0xa, 0xe9, 0x3, 0xe9, 
       0x5, 0xe9, 0xa2c, 0xa, 0xe9, 0x3, 0xe9, 0x5, 0xe9, 0xa2f, 0xa, 0xe9, 
       0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 0x3, 0xe9, 
       0x3, 0xe9, 0x5, 0xe9, 0xa38, 0xa, 0xe9, 0x3, 0xea, 0x3, 0xea, 0x3, 
       0xea, 0x7, 0xea, 0xa3d, 0xa, 0xea, 0xc, 0xea, 0xe, 0xea, 0xa40, 0xb, 
       0xea, 0x3, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x5, 0xeb, 0xa45, 0xa, 0xeb, 
       0x3, 0xeb, 0x3, 0xeb, 0x5, 0xeb, 0xa49, 0xa, 0xeb, 0x5, 0xeb, 0xa4b, 
       0xa, 0xeb, 0x3, 0xeb, 0x5, 0xeb, 0xa4e, 0xa, 0xeb, 0x3, 0xeb, 0x5, 
       0xeb, 0xa51, 0xa, 0xeb, 0x3, 0xeb, 0x3, 0xeb, 0x5, 0xeb, 0xa55, 0xa, 
       0xeb, 0x3, 0xec, 0x6, 0xec, 0xa58, 0xa, 0xec, 0xd, 0xec, 0xe, 0xec, 
       0xa59, 0x3, 0xed, 0x3, 0xed, 0x3, 0xee, 0x3, 0xee, 0x3, 0xee, 0x3, 
       0xee, 0x3, 0xef, 0x3, 0xef, 0x3, 0xef, 0x3, 0xf0, 0x3, 0xf0, 0x5, 
       0xf0, 0xa67, 0xa, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x3, 0xf0, 0x5, 0xf0, 
       0xa6c, 0xa, 0xf0, 0x7, 0xf0, 0xa6e, 0xa, 0xf0, 0xc, 0xf0, 0xe, 0xf0, 
       0xa71, 0xb, 0xf0, 0x3, 0xf1, 0x5, 0xf1, 0xa74, 0xa, 0xf1, 0x3, 0xf1, 
       0x3, 0xf1, 0x3, 0xf1, 0x5, 0xf1, 0xa79, 0xa, 0xf1, 0x3, 0xf1, 0x3, 
       0xf1, 0x3, 0xf1, 0x5, 0xf1, 0xa7e, 0xa, 0xf1, 0x3, 0xf1, 0x3, 0xf1, 
       0x5, 0xf1, 0xa82, 0xa, 0xf1, 0x3, 0xf2, 0x5, 0xf2, 0xa85, 0xa, 0xf2, 
       0x3, 0xf2, 0x3, 0xf2, 0x5, 0xf2, 0xa89, 0xa, 0xf2, 0x3, 0xf3, 0x3, 
       0xf3, 0x3, 0xf4, 0x3, 0xf4, 0x3, 0xf5, 0x3, 0xf5, 0x3, 0xf5, 0x3, 
       0xf6, 0x3, 0xf6, 0x5, 0xf6, 0xa94, 0xa, 0xf6, 0x3, 0xf7, 0x3, 0xf7, 
       0x5, 0xf7, 0xa98, 0xa, 0xf7, 0x3, 0xf8, 0x3, 0xf8, 0x3, 0xf8, 0x3, 
       0xf9, 0x3, 0xf9, 0x5, 0xf9, 0xa9f, 0xa, 0xf9, 0x3, 0xf9, 0x3, 0xf9, 
       0x3, 0xf9, 0x5, 0xf9, 0xaa4, 0xa, 0xf9, 0x7, 0xf9, 0xaa6, 0xa, 0xf9, 
       0xc, 0xf9, 0xe, 0xf9, 0xaa9, 0xb, 0xf9, 0x3, 0xfa, 0x3, 0xfa, 0x3, 
       0xfa, 0x5, 0xfa, 0xaae, 0xa, 0xfa, 0x3, 0xfa, 0x3, 0xfa, 0x5, 0xfa, 
       0xab2, 0xa, 0xfa, 0x3, 0xfb, 0x3, 0xfb, 0x5, 0xfb, 0xab6, 0xa, 0xfb, 
       0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfc, 0x3, 0xfd, 0x3, 0xfd, 0x3, 0xfd, 
       0x3, 0xfd, 0x5, 0xfd, 0xabf, 0xa, 0xfd, 0x3, 0xfe, 0x3, 0xfe, 0x3, 
       0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xfe, 0x3, 0xff, 0x3, 0xff, 0x3, 
       0xff, 0x7, 0xff, 0xaca, 0xa, 0xff, 0xc, 0xff, 0xe, 0xff, 0xacd, 0xb, 
       0xff, 0x3, 0x100, 0x3, 0x100, 0x5, 0x100, 0xad1, 0xa, 0x100, 0x3, 
       0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x3, 0x101, 0x5, 0x101, 
       0xad8, 0xa, 0x101, 0x3, 0x101, 0x3, 0x101, 0x5, 0x101, 0xadc, 0xa, 
       0x101, 0x3, 0x101, 0x5, 0x101, 0xadf, 0xa, 0x101, 0x3, 0x101, 0x5, 
       0x101, 0xae2, 0xa, 0x101, 0x3, 0x101, 0x5, 0x101, 0xae5, 0xa, 0x101, 
       0x3, 0x101, 0x3, 0x101, 0x5, 0x101, 0xae9, 0xa, 0x101, 0x3, 0x102, 
       0x3, 0x102, 0x3, 0x102, 0x5, 0x102, 0xaee, 0xa, 0x102, 0x3, 0x102, 
       0x3, 0x102, 0x3, 0x102, 0x3, 0x103, 0x3, 0x103, 0x3, 0x103, 0x5, 
       0x103, 0xaf6, 0xa, 0x103, 0x3, 0x103, 0x3, 0x103, 0x5, 0x103, 0xafa, 
       0xa, 0x103, 0x3, 0x103, 0x3, 0x103, 0x5, 0x103, 0xafe, 0xa, 0x103, 
       0x3, 0x104, 0x3, 0x104, 0x3, 0x105, 0x3, 0x105, 0x5, 0x105, 0xb04, 
       0xa, 0x105, 0x3, 0x105, 0x3, 0x105, 0x3, 0x105, 0x5, 0x105, 0xb09, 
       0xa, 0x105, 0x7, 0x105, 0xb0b, 0xa, 0x105, 0xc, 0x105, 0xe, 0x105, 
       0xb0e, 0xb, 0x105, 0x3, 0x106, 0x3, 0x106, 0x3, 0x106, 0x5, 0x106, 
       0xb13, 0xa, 0x106, 0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 0x3, 0x107, 
       0x5, 0x107, 0xb19, 0xa, 0x107, 0x3, 0x107, 0x5, 0x107, 0xb1c, 0xa, 
       0x107, 0x3, 0x108, 0x5, 0x108, 0xb1f, 0xa, 0x108, 0x3, 0x108, 0x3, 
       0x108, 0x3, 0x108, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 0x3, 0x109, 
       0x3, 0x109, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 0x10a, 0x3, 
       0x10b, 0x3, 0x10b, 0x5, 0x10b, 0xb2f, 0xa, 0x10b, 0x3, 0x10b, 0x3, 
       0x10b, 0x3, 0x10b, 0x3, 0x10c, 0x6, 0x10c, 0xb35, 0xa, 0x10c, 0xd, 
       0x10c, 0xe, 0x10c, 0xb36, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 
       0x10d, 0x3, 0x10d, 0x3, 0x10d, 0x3, 0x10e, 0x5, 0x10e, 0xb40, 0xa, 
       0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x3, 0x10e, 0x5, 0x10e, 0xb45, 0xa, 
       0x10e, 0x3, 0x10e, 0x5, 0x10e, 0xb48, 0xa, 0x10e, 0x3, 0x10f, 0x3, 
       0x10f, 0x5, 0x10f, 0xb4c, 0xa, 0x10f, 0x3, 0x110, 0x3, 0x110, 0x5, 
       0x110, 0xb50, 0xa, 0x110, 0x3, 0x111, 0x3, 0x111, 0x3, 0x111, 0x5, 
       0x111, 0xb55, 0xa, 0x111, 0x3, 0x111, 0x3, 0x111, 0x3, 0x112, 0x3, 
       0x112, 0x5, 0x112, 0xb5b, 0xa, 0x112, 0x3, 0x112, 0x3, 0x112, 0x3, 
       0x112, 0x5, 0x112, 0xb60, 0xa, 0x112, 0x7, 0x112, 0xb62, 0xa, 0x112, 
       0xc, 0x112, 0xe, 0x112, 0xb65, 0xb, 0x112, 0x3, 0x113, 0x3, 0x113, 
       0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x3, 0x113, 0x5, 0x113, 0xb6d, 
       0xa, 0x113, 0x3, 0x114, 0x3, 0x114, 0x3, 0x114, 0x3, 0x115, 0x3, 
       0x115, 0x3, 0x115, 0x3, 0x115, 0x5, 0x115, 0xb76, 0xa, 0x115, 0x3, 
       0x116, 0x3, 0x116, 0x3, 0x116, 0x3, 0x117, 0x3, 0x117, 0x3, 0x117, 
       0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 0x118, 0x3, 
       0x118, 0x5, 0x118, 0xb84, 0xa, 0x118, 0x3, 0x119, 0x3, 0x119, 0x3, 
       0x119, 0x3, 0x119, 0x3, 0x119, 0x3, 0x119, 0x5, 0x119, 0xb8c, 0xa, 
       0x119, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x5, 0x11a, 0xb91, 0xa, 
       0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x5, 0x11a, 0xb96, 0xa, 
       0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 
       0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 
       0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 
       0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 
       0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 
       0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 
       0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 
       0x3, 0x11a, 0x3, 0x11a, 0x3, 0x11a, 0x5, 0x11a, 0xbc1, 0xa, 0x11a, 
       0x3, 0x11b, 0x3, 0x11b, 0x3, 0x11b, 0x3, 0x64a, 0x8, 0x12, 0x26, 
       0x3a, 0x15e, 0x174, 0x178, 0x11c, 0x2, 0x4, 0x6, 0x8, 0xa, 0xc, 0xe, 
       0x10, 0x12, 0x14, 0x16, 0x18, 0x1a, 0x1c, 0x1e, 0x20, 0x22, 0x24, 
       0x26, 0x28, 0x2a, 0x2c, 0x2e, 0x30, 0x32, 0x34, 0x36, 0x38, 0x3a, 
       0x3c, 0x3e, 0x40, 0x42, 0x44, 0x46, 0x48, 0x4a, 0x4c, 0x4e, 0x50, 
       0x52, 0x54, 0x56, 0x58, 0x5a, 0x5c, 0x5e, 0x60, 0x62, 0x64, 0x66, 
       0x68, 0x6a, 0x6c, 0x6e, 0x70, 0x72, 0x74, 0x76, 0x78, 0x7a, 0x7c, 
       0x7e, 0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c, 0x8e, 0x90, 0x92, 
       0x94, 0x96, 0x98, 0x9a, 0x9c, 0x9e, 0xa0, 0xa2, 0xa4, 0xa6, 0xa8, 
       0xaa, 0xac, 0xae, 0xb0, 0xb2, 0xb4, 0xb6, 0xb8, 0xba, 0xbc, 0xbe, 
       0xc0, 0xc2, 0xc4, 0xc6, 0xc8, 0xca, 0xcc, 0xce, 0xd0, 0xd2, 0xd4, 
       0xd6, 0xd8, 0xda, 0xdc, 0xde, 0xe0, 0xe2, 0xe4, 0xe6, 0xe8, 0xea, 
       0xec, 0xee, 0xf0, 0xf2, 0xf4, 0xf6, 0xf8, 0xfa, 0xfc, 0xfe, 0x100, 
       0x102, 0x104, 0x106, 0x108, 0x10a, 0x10c, 0x10e, 0x110, 0x112, 0x114, 
       0x116, 0x118, 0x11a, 0x11c, 0x11e, 0x120, 0x122, 0x124, 0x126, 0x128, 
       0x12a, 0x12c, 0x12e, 0x130, 0x132, 0x134, 0x136, 0x138, 0x13a, 0x13c, 
       0x13e, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14a, 0x14c, 0x14e, 0x150, 
       0x152, 0x154, 0x156, 0x158, 0x15a, 0x15c, 0x15e, 0x160, 0x162, 0x164, 
       0x166, 0x168, 0x16a, 0x16c, 0x16e, 0x170, 0x172, 0x174, 0x176, 0x178, 
       0x17a, 0x17c, 0x17e, 0x180, 0x182, 0x184, 0x186, 0x188, 0x18a, 0x18c, 
       0x18e, 0x190, 0x192, 0x194, 0x196, 0x198, 0x19a, 0x19c, 0x19e, 0x1a0, 
       0x1a2, 0x1a4, 0x1a6, 0x1a8, 0x1aa, 0x1ac, 0x1ae, 0x1b0, 0x1b2, 0x1b4, 
       0x1b6, 0x1b8, 0x1ba, 0x1bc, 0x1be, 0x1c0, 0x1c2, 0x1c4, 0x1c6, 0x1c8, 
       0x1ca, 0x1cc, 0x1ce, 0x1d0, 0x1d2, 0x1d4, 0x1d6, 0x1d8, 0x1da, 0x1dc, 
       0x1de, 0x1e0, 0x1e2, 0x1e4, 0x1e6, 0x1e8, 0x1ea, 0x1ec, 0x1ee, 0x1f0, 
       0x1f2, 0x1f4, 0x1f6, 0x1f8, 0x1fa, 0x1fc, 0x1fe, 0x200, 0x202, 0x204, 
       0x206, 0x208, 0x20a, 0x20c, 0x20e, 0x210, 0x212, 0x214, 0x216, 0x218, 
       0x21a, 0x21c, 0x21e, 0x220, 0x222, 0x224, 0x226, 0x228, 0x22a, 0x22c, 
       0x22e, 0x230, 0x232, 0x234, 0x2, 0x21, 0x11, 0x2, 0x15, 0x15, 0x21, 
       0x22, 0x2c, 0x2c, 0x31, 0x31, 0x3c, 0x3d, 0x41, 0x41, 0x43, 0x43, 
       0x46, 0x46, 0x48, 0x49, 0x51, 0x51, 0x53, 0x53, 0x70, 0x70, 0x72, 
       0x72, 0x8e, 0x8e, 0xc7, 0xc7, 0x6, 0x2, 0x20, 0x20, 0x57, 0x5f, 0x61, 
       0x61, 0x66, 0x66, 0x3, 0x2, 0x83, 0x84, 0x4, 0x2, 0xa4, 0xa4, 0xa8, 
       0xa8, 0x6, 0x2, 0x25, 0x25, 0x2f, 0x2f, 0x6f, 0x6f, 0x7c, 0x7c, 0x4, 
       0x2, 0xbf, 0xbf, 0xc4, 0xc4, 0x3, 0x2, 0xbb, 0xbc, 0x4, 0x2, 0x75, 
       0x75, 0xbb, 0xbc, 0x4, 0x2, 0x9e, 0xa0, 0xa4, 0xa7, 0x4, 0x2, 0xbe, 
       0xbe, 0xc5, 0xc5, 0x3, 0x2, 0xa0, 0xa2, 0x3, 0x2, 0x9e, 0x9f, 0x4, 
       0x2, 0xa9, 0xaa, 0xb7, 0xb8, 0x3, 0x2, 0xb5, 0xb6, 0x4, 0x2, 0xa8, 
       0xa8, 0xab, 0xb4, 0x4, 0x2, 0xbd, 0xbd, 0xbf, 0xbf, 0x4, 0x2, 0x43, 
       0x43, 0x51, 0x51, 0x7, 0x2, 0x35, 0x35, 0x4b, 0x4b, 0x6e, 0x6e, 0x7a, 
       0x7a, 0x81, 0x81, 0x5, 0x2, 0x33, 0x33, 0x44, 0x44, 0x8f, 0x8f, 0x4, 
       0x2, 0x47, 0x47, 0x73, 0x73, 0x4, 0x2, 0x74, 0x74, 0x8c, 0x8c, 0x4, 
       0x2, 0x1f, 0x1f, 0x7d, 0x7d, 0x3, 0x2, 0x97, 0x9c, 0x4, 0x2, 0xa4, 
       0xa4, 0xb9, 0xb9, 0x4, 0x2, 0x23, 0x23, 0x91, 0x91, 0x4, 0x2, 0x3c, 
       0x3c, 0x46, 0x46, 0x5, 0x2, 0x9e, 0xa0, 0xa3, 0xa5, 0xb9, 0xba, 0x3, 
       0x2, 0x2a, 0x2b, 0x4, 0x2, 0x37, 0x37, 0x52, 0x52, 0x3, 0x2, 0x69, 
       0x6b, 0x3, 0x2, 0x3, 0x9, 0x2, 0xcc1, 0x2, 0x237, 0x3, 0x2, 0x2, 
       0x2, 0x4, 0x23c, 0x3, 0x2, 0x2, 0x2, 0x6, 0x24c, 0x3, 0x2, 0x2, 0x2, 
       0x8, 0x250, 0x3, 0x2, 0x2, 0x2, 0xa, 0x252, 0x3, 0x2, 0x2, 0x2, 0xc, 
       0x255, 0x3, 0x2, 0x2, 0x2, 0xe, 0x262, 0x3, 0x2, 0x2, 0x2, 0x10, 
       0x264, 0x3, 0x2, 0x2, 0x2, 0x12, 0x26a, 0x3, 0x2, 0x2, 0x2, 0x14, 
       0x281, 0x3, 0x2, 0x2, 0x2, 0x16, 0x287, 0x3, 0x2, 0x2, 0x2, 0x18, 
       0x293, 0x3, 0x2, 0x2, 0x2, 0x1a, 0x295, 0x3, 0x2, 0x2, 0x2, 0x1c, 
       0x297, 0x3, 0x2, 0x2, 0x2, 0x1e, 0x2a4, 0x3, 0x2, 0x2, 0x2, 0x20, 
       0x2ab, 0x3, 0x2, 0x2, 0x2, 0x22, 0x2ae, 0x3, 0x2, 0x2, 0x2, 0x24, 
       0x2b3, 0x3, 0x2, 0x2, 0x2, 0x26, 0x2dd, 0x3, 0x2, 0x2, 0x2, 0x28, 
       0x2ff, 0x3, 0x2, 0x2, 0x2, 0x2a, 0x301, 0x3, 0x2, 0x2, 0x2, 0x2c, 
       0x316, 0x3, 0x2, 0x2, 0x2, 0x2e, 0x332, 0x3, 0x2, 0x2, 0x2, 0x30, 
       0x334, 0x3, 0x2, 0x2, 0x2, 0x32, 0x337, 0x3, 0x2, 0x2, 0x2, 0x34, 
       0x347, 0x3, 0x2, 0x2, 0x2, 0x36, 0x34b, 0x3, 0x2, 0x2, 0x2, 0x38, 
       0x354, 0x3, 0x2, 0x2, 0x2, 0x3a, 0x356, 0x3, 0x2, 0x2, 0x2, 0x3c, 
       0x36f, 0x3, 0x2, 0x2, 0x2, 0x3e, 0x372, 0x3, 0x2, 0x2, 0x2, 0x40, 
       0x37b, 0x3, 0x2, 0x2, 0x2, 0x42, 0x386, 0x3, 0x2, 0x2, 0x2, 0x44, 
       0x388, 0x3, 0x2, 0x2, 0x2, 0x46, 0x390, 0x3, 0x2, 0x2, 0x2, 0x48, 
       0x398, 0x3, 0x2, 0x2, 0x2, 0x4a, 0x3a0, 0x3, 0x2, 0x2, 0x2, 0x4c, 
       0x3ad, 0x3, 0x2, 0x2, 0x2, 0x4e, 0x3af, 0x3, 0x2, 0x2, 0x2, 0x50, 
       0x3b7, 0x3, 0x2, 0x2, 0x2, 0x52, 0x3bf, 0x3, 0x2, 0x2, 0x2, 0x54, 
       0x3c7, 0x3, 0x2, 0x2, 0x2, 0x56, 0x3cf, 0x3, 0x2, 0x2, 0x2, 0x58, 
       0x3d7, 0x3, 0x2, 0x2, 0x2, 0x5a, 0x3df, 0x3, 0x2, 0x2, 0x2, 0x5c, 
       0x3e7, 0x3, 0x2, 0x2, 0x2, 0x5e, 0x3f5, 0x3, 0x2, 0x2, 0x2, 0x60, 
       0x3f7, 0x3, 0x2, 0x2, 0x2, 0x62, 0x3f9, 0x3, 0x2, 0x2, 0x2, 0x64, 
       0x401, 0x3, 0x2, 0x2, 0x2, 0x66, 0x41b, 0x3, 0x2, 0x2, 0x2, 0x68, 
       0x41e, 0x3, 0x2, 0x2, 0x2, 0x6a, 0x429, 0x3, 0x2, 0x2, 0x2, 0x6c, 
       0x43a, 0x3, 0x2, 0x2, 0x2, 0x6e, 0x44e, 0x3, 0x2, 0x2, 0x2, 0x70, 
       0x453, 0x3, 0x2, 0x2, 0x2, 0x72, 0x455, 0x3, 0x2, 0x2, 0x2, 0x74, 
       0x45c, 0x3, 0x2, 0x2, 0x2, 0x76, 0x46c, 0x3, 0x2, 0x2, 0x2, 0x78, 
       0x471, 0x3, 0x2, 0x2, 0x2, 0x7a, 0x475, 0x3, 0x2, 0x2, 0x2, 0x7c, 
       0x47b, 0x3, 0x2, 0x2, 0x2, 0x7e, 0x481, 0x3, 0x2, 0x2, 0x2, 0x80, 
       0x487, 0x3, 0x2, 0x2, 0x2, 0x82, 0x48d, 0x3, 0x2, 0x2, 0x2, 0x84, 
       0x493, 0x3, 0x2, 0x2, 0x2, 0x86, 0x499, 0x3, 0x2, 0x2, 0x2, 0x88, 
       0x49f, 0x3, 0x2, 0x2, 0x2, 0x8a, 0x4a5, 0x3, 0x2, 0x2, 0x2, 0x8c, 
       0x4a8, 0x3, 0x2, 0x2, 0x2, 0x8e, 0x4ab, 0x3, 0x2, 0x2, 0x2, 0x90, 
       0x4ae, 0x3, 0x2, 0x2, 0x2, 0x92, 0x4b1, 0x3, 0x2, 0x2, 0x2, 0x94, 
       0x4b4, 0x3, 0x2, 0x2, 0x2, 0x96, 0x4b7, 0x3, 0x2, 0x2, 0x2, 0x98, 
       0x4ba, 0x3, 0x2, 0x2, 0x2, 0x9a, 0x4c1, 0x3, 0x2, 0x2, 0x2, 0x9c, 
       0x4c7, 0x3, 0x2, 0x2, 0x2, 0x9e, 0x4cd, 0x3, 0x2, 0x2, 0x2, 0xa0, 
       0x4db, 0x3, 0x2, 0x2, 0x2, 0xa2, 0x4e0, 0x3, 0x2, 0x2, 0x2, 0xa4, 
       0x4e2, 0x3, 0x2, 0x2, 0x2, 0xa6, 0x4f0, 0x3, 0x2, 0x2, 0x2, 0xa8, 
       0x4ff, 0x3, 0x2, 0x2, 0x2, 0xaa, 0x50c, 0x3, 0x2, 0x2, 0x2, 0xac, 
       0x50e, 0x3, 0x2, 0x2, 0x2, 0xae, 0x516, 0x3, 0x2, 0x2, 0x2, 0xb0, 
       0x528, 0x3, 0x2, 0x2, 0x2, 0xb2, 0x52a, 0x3, 0x2, 0x2, 0x2, 0xb4, 
       0x52f, 0x3, 0x2, 0x2, 0x2, 0xb6, 0x537, 0x3, 0x2, 0x2, 0x2, 0xb8, 
       0x54f, 0x3, 0x2, 0x2, 0x2, 0xba, 0x553, 0x3, 0x2, 0x2, 0x2, 0xbc, 
       0x55f, 0x3, 0x2, 0x2, 0x2, 0xbe, 0x566, 0x3, 0x2, 0x2, 0x2, 0xc0, 
       0x57a, 0x3, 0x2, 0x2, 0x2, 0xc2, 0x585, 0x3, 0x2, 0x2, 0x2, 0xc4, 
       0x58e, 0x3, 0x2, 0x2, 0x2, 0xc6, 0x592, 0x3, 0x2, 0x2, 0x2, 0xc8, 
       0x599, 0x3, 0x2, 0x2, 0x2, 0xca, 0x5ac, 0x3, 0x2, 0x2, 0x2, 0xcc, 
       0x5b9, 0x3, 0x2, 0x2, 0x2, 0xce, 0x5dc, 0x3, 0x2, 0x2, 0x2, 0xd0, 
       0x5e0, 0x3, 0x2, 0x2, 0x2, 0xd2, 0x5e3, 0x3, 0x2, 0x2, 0x2, 0xd4, 
       0x5ea, 0x3, 0x2, 0x2, 0x2, 0xd6, 0x5f5, 0x3, 0x2, 0x2, 0x2, 0xd8, 
       0x5f9, 0x3, 0x2, 0x2, 0x2, 0xda, 0x5fc, 0x3, 0x2, 0x2, 0x2, 0xdc, 
       0x60e, 0x3, 0x2, 0x2, 0x2, 0xde, 0x618, 0x3, 0x2, 0x2, 0x2, 0xe0, 
       0x61a, 0x3, 0x2, 0x2, 0x2, 0xe2, 0x62f, 0x3, 0x2, 0x2, 0x2, 0xe4, 
       0x631, 0x3, 0x2, 0x2, 0x2, 0xe6, 0x639, 0x3, 0x2, 0x2, 0x2, 0xe8, 
       0x63b, 0x3, 0x2, 0x2, 0x2, 0xea, 0x645, 0x3, 0x2, 0x2, 0x2, 0xec, 
       0x648, 0x3, 0x2, 0x2, 0x2, 0xee, 0x659, 0x3, 0x2, 0x2, 0x2, 0xf0, 
       0x65b, 0x3, 0x2, 0x2, 0x2, 0xf2, 0x662, 0x3, 0x2, 0x2, 0x2, 0xf4, 
       0x66a, 0x3, 0x2, 0x2, 0x2, 0xf6, 0x670, 0x3, 0x2, 0x2, 0x2, 0xf8, 
       0x673, 0x3, 0x2, 0x2, 0x2, 0xfa, 0x678, 0x3, 0x2, 0x2, 0x2, 0xfc, 
       0x67d, 0x3, 0x2, 0x2, 0x2, 0xfe, 0x682, 0x3, 0x2, 0x2, 0x2, 0x100, 
       0x687, 0x3, 0x2, 0x2, 0x2, 0x102, 0x68d, 0x3, 0x2, 0x2, 0x2, 0x104, 
       0x693, 0x3, 0x2, 0x2, 0x2, 0x106, 0x695, 0x3, 0x2, 0x2, 0x2, 0x108, 
       0x697, 0x3, 0x2, 0x2, 0x2, 0x10a, 0x69d, 0x3, 0x2, 0x2, 0x2, 0x10c, 
       0x6a3, 0x3, 0x2, 0x2, 0x2, 0x10e, 0x6a6, 0x3, 0x2, 0x2, 0x2, 0x110, 
       0x6ae, 0x3, 0x2, 0x2, 0x2, 0x112, 0x6b5, 0x3, 0x2, 0x2, 0x2, 0x114, 
       0x6b7, 0x3, 0x2, 0x2, 0x2, 0x116, 0x6ed, 0x3, 0x2, 0x2, 0x2, 0x118, 
       0x6f2, 0x3, 0x2, 0x2, 0x2, 0x11a, 0x6f4, 0x3, 0x2, 0x2, 0x2, 0x11c, 
       0x712, 0x3, 0x2, 0x2, 0x2, 0x11e, 0x714, 0x3, 0x2, 0x2, 0x2, 0x120, 
       0x716, 0x3, 0x2, 0x2, 0x2, 0x122, 0x720, 0x3, 0x2, 0x2, 0x2, 0x124, 
       0x72d, 0x3, 0x2, 0x2, 0x2, 0x126, 0x737, 0x3, 0x2, 0x2, 0x2, 0x128, 
       0x73b, 0x3, 0x2, 0x2, 0x2, 0x12a, 0x73e, 0x3, 0x2, 0x2, 0x2, 0x12c, 
       0x746, 0x3, 0x2, 0x2, 0x2, 0x12e, 0x74b, 0x3, 0x2, 0x2, 0x2, 0x130, 
       0x74f, 0x3, 0x2, 0x2, 0x2, 0x132, 0x751, 0x3, 0x2, 0x2, 0x2, 0x134, 
       0x754, 0x3, 0x2, 0x2, 0x2, 0x136, 0x761, 0x3, 0x2, 0x2, 0x2, 0x138, 
       0x763, 0x3, 0x2, 0x2, 0x2, 0x13a, 0x76a, 0x3, 0x2, 0x2, 0x2, 0x13c, 
       0x76e, 0x3, 0x2, 0x2, 0x2, 0x13e, 0x77a, 0x3, 0x2, 0x2, 0x2, 0x140, 
       0x784, 0x3, 0x2, 0x2, 0x2, 0x142, 0x78a, 0x3, 0x2, 0x2, 0x2, 0x144, 
       0x795, 0x3, 0x2, 0x2, 0x2, 0x146, 0x7a1, 0x3, 0x2, 0x2, 0x2, 0x148, 
       0x7a3, 0x3, 0x2, 0x2, 0x2, 0x14a, 0x7ae, 0x3, 0x2, 0x2, 0x2, 0x14c, 
       0x7bc, 0x3, 0x2, 0x2, 0x2, 0x14e, 0x7c2, 0x3, 0x2, 0x2, 0x2, 0x150, 
       0x7c4, 0x3, 0x2, 0x2, 0x2, 0x152, 0x7cb, 0x3, 0x2, 0x2, 0x2, 0x154, 
       0x7e0, 0x3, 0x2, 0x2, 0x2, 0x156, 0x7e2, 0x3, 0x2, 0x2, 0x2, 0x158, 
       0x7ea, 0x3, 0x2, 0x2, 0x2, 0x15a, 0x7f3, 0x3, 0x2, 0x2, 0x2, 0x15c, 
       0x7fb, 0x3, 0x2, 0x2, 0x2, 0x15e, 0x809, 0x3, 0x2, 0x2, 0x2, 0x160, 
       0x81c, 0x3, 0x2, 0x2, 0x2, 0x162, 0x82d, 0x3, 0x2, 0x2, 0x2, 0x164, 
       0x840, 0x3, 0x2, 0x2, 0x2, 0x166, 0x843, 0x3, 0x2, 0x2, 0x2, 0x168, 
       0x847, 0x3, 0x2, 0x2, 0x2, 0x16a, 0x849, 0x3, 0x2, 0x2, 0x2, 0x16c, 
       0x84c, 0x3, 0x2, 0x2, 0x2, 0x16e, 0x851, 0x3, 0x2, 0x2, 0x2, 0x170, 
       0x85d, 0x3, 0x2, 0x2, 0x2, 0x172, 0x868, 0x3, 0x2, 0x2, 0x2, 0x174, 
       0x87c, 0x3, 0x2, 0x2, 0x2, 0x176, 0x897, 0x3, 0x2, 0x2, 0x2, 0x178, 
       0x89c, 0x3, 0x2, 0x2, 0x2, 0x17a, 0x8b0, 0x3, 0x2, 0x2, 0x2, 0x17c, 
       0x8b7, 0x3, 0x2, 0x2, 0x2, 0x17e, 0x8c0, 0x3, 0x2, 0x2, 0x2, 0x180, 
       0x8cd, 0x3, 0x2, 0x2, 0x2, 0x182, 0x8d2, 0x3, 0x2, 0x2, 0x2, 0x184, 
       0x8d6, 0x3, 0x2, 0x2, 0x2, 0x186, 0x8ec, 0x3, 0x2, 0x2, 0x2, 0x188, 
       0x8f7, 0x3, 0x2, 0x2, 0x2, 0x18a, 0x903, 0x3, 0x2, 0x2, 0x2, 0x18c, 
       0x90b, 0x3, 0x2, 0x2, 0x2, 0x18e, 0x910, 0x3, 0x2, 0x2, 0x2, 0x190, 
       0x918, 0x3, 0x2, 0x2, 0x2, 0x192, 0x91e, 0x3, 0x2, 0x2, 0x2, 0x194, 
       0x925, 0x3, 0x2, 0x2, 0x2, 0x196, 0x92b, 0x3, 0x2, 0x2, 0x2, 0x198, 
       0x92d, 0x3, 0x2, 0x2, 0x2, 0x19a, 0x932, 0x3, 0x2, 0x2, 0x2, 0x19c, 
       0x937, 0x3, 0x2, 0x2, 0x2, 0x19e, 0x93c, 0x3, 0x2, 0x2, 0x2, 0x1a0, 
       0x94f, 0x3, 0x2, 0x2, 0x2, 0x1a2, 0x951, 0x3, 0x2, 0x2, 0x2, 0x1a4, 
       0x96c, 0x3, 0x2, 0x2, 0x2, 0x1a6, 0x96e, 0x3, 0x2, 0x2, 0x2, 0x1a8, 
       0x972, 0x3, 0x2, 0x2, 0x2, 0x1aa, 0x979, 0x3, 0x2, 0x2, 0x2, 0x1ac, 
       0x97e, 0x3, 0x2, 0x2, 0x2, 0x1ae, 0x982, 0x3, 0x2, 0x2, 0x2, 0x1b0, 
       0x9a5, 0x3, 0x2, 0x2, 0x2, 0x1b2, 0x9a9, 0x3, 0x2, 0x2, 0x2, 0x1b4, 
       0x9b8, 0x3, 0x2, 0x2, 0x2, 0x1b6, 0x9bf, 0x3, 0x2, 0x2, 0x2, 0x1b8, 
       0x9c4, 0x3, 0x2, 0x2, 0x2, 0x1ba, 0x9c8, 0x3, 0x2, 0x2, 0x2, 0x1bc, 
       0x9ca, 0x3, 0x2, 0x2, 0x2, 0x1be, 0x9d8, 0x3, 0x2, 0x2, 0x2, 0x1c0, 
       0x9e3, 0x3, 0x2, 0x2, 0x2, 0x1c2, 0x9e5, 0x3, 0x2, 0x2, 0x2, 0x1c4, 
       0xa03, 0x3, 0x2, 0x2, 0x2, 0x1c6, 0xa06, 0x3, 0x2, 0x2, 0x2, 0x1c8, 
       0xa0a, 0x3, 0x2, 0x2, 0x2, 0x1ca, 0xa0c, 0x3, 0x2, 0x2, 0x2, 0x1cc, 
       0xa13, 0x3, 0x2, 0x2, 0x2, 0x1ce, 0xa1f, 0x3, 0x2, 0x2, 0x2, 0x1d0, 
       0xa37, 0x3, 0x2, 0x2, 0x2, 0x1d2, 0xa39, 0x3, 0x2, 0x2, 0x2, 0x1d4, 
       0xa54, 0x3, 0x2, 0x2, 0x2, 0x1d6, 0xa57, 0x3, 0x2, 0x2, 0x2, 0x1d8, 
       0xa5b, 0x3, 0x2, 0x2, 0x2, 0x1da, 0xa5d, 0x3, 0x2, 0x2, 0x2, 0x1dc, 
       0xa61, 0x3, 0x2, 0x2, 0x2, 0x1de, 0xa64, 0x3, 0x2, 0x2, 0x2, 0x1e0, 
       0xa73, 0x3, 0x2, 0x2, 0x2, 0x1e2, 0xa88, 0x3, 0x2, 0x2, 0x2, 0x1e4, 
       0xa8a, 0x3, 0x2, 0x2, 0x2, 0x1e6, 0xa8c, 0x3, 0x2, 0x2, 0x2, 0x1e8, 
       0xa8e, 0x3, 0x2, 0x2, 0x2, 0x1ea, 0xa91, 0x3, 0x2, 0x2, 0x2, 0x1ec, 
       0xa95, 0x3, 0x2, 0x2, 0x2, 0x1ee, 0xa99, 0x3, 0x2, 0x2, 0x2, 0x1f0, 
       0xa9c, 0x3, 0x2, 0x2, 0x2, 0x1f2, 0xaaa, 0x3, 0x2, 0x2, 0x2, 0x1f4, 
       0xab5, 0x3, 0x2, 0x2, 0x2, 0x1f6, 0xab7, 0x3, 0x2, 0x2, 0x2, 0x1f8, 
       0xaba, 0x3, 0x2, 0x2, 0x2, 0x1fa, 0xac0, 0x3, 0x2, 0x2, 0x2, 0x1fc, 
       0xac6, 0x3, 0x2, 0x2, 0x2, 0x1fe, 0xad0, 0x3, 0x2, 0x2, 0x2, 0x200, 
       0xadb, 0x3, 0x2, 0x2, 0x2, 0x202, 0xaea, 0x3, 0x2, 0x2, 0x2, 0x204, 
       0xafd, 0x3, 0x2, 0x2, 0x2, 0x206, 0xaff, 0x3, 0x2, 0x2, 0x2, 0x208, 
       0xb01, 0x3, 0x2, 0x2, 0x2, 0x20a, 0xb12, 0x3, 0x2, 0x2, 0x2, 0x20c, 
       0xb14, 0x3, 0x2, 0x2, 0x2, 0x20e, 0xb1e, 0x3, 0x2, 0x2, 0x2, 0x210, 
       0xb23, 0x3, 0x2, 0x2, 0x2, 0x212, 0xb28, 0x3, 0x2, 0x2, 0x2, 0x214, 
       0xb2c, 0x3, 0x2, 0x2, 0x2, 0x216, 0xb34, 0x3, 0x2, 0x2, 0x2, 0x218, 
       0xb38, 0x3, 0x2, 0x2, 0x2, 0x21a, 0xb47, 0x3, 0x2, 0x2, 0x2, 0x21c, 
       0xb49, 0x3, 0x2, 0x2, 0x2, 0x21e, 0xb4f, 0x3, 0x2, 0x2, 0x2, 0x220, 
       0xb51, 0x3, 0x2, 0x2, 0x2, 0x222, 0xb58, 0x3, 0x2, 0x2, 0x2, 0x224, 
       0xb6c, 0x3, 0x2, 0x2, 0x2, 0x226, 0xb6e, 0x3, 0x2, 0x2, 0x2, 0x228, 
       0xb75, 0x3, 0x2, 0x2, 0x2, 0x22a, 0xb77, 0x3, 0x2, 0x2, 0x2, 0x22c, 
       0xb7a, 0x3, 0x2, 0x2, 0x2, 0x22e, 0xb7d, 0x3, 0x2, 0x2, 0x2, 0x230, 
       0xb85, 0x3, 0x2, 0x2, 0x2, 0x232, 0xbc0, 0x3, 0x2, 0x2, 0x2, 0x234, 
       0xbc2, 0x3, 0x2, 0x2, 0x2, 0x236, 0x238, 0x5, 0xda, 0x6e, 0x2, 0x237, 
       0x236, 0x3, 0x2, 0x2, 0x2, 0x237, 0x238, 0x3, 0x2, 0x2, 0x2, 0x238, 
       0x239, 0x3, 0x2, 0x2, 0x2, 0x239, 0x23a, 0x7, 0x2, 0x2, 0x3, 0x23a, 
       0x23b, 0x8, 0x2, 0x1, 0x2, 0x23b, 0x3, 0x3, 0x2, 0x2, 0x2, 0x23c, 
       0x23d, 0x9, 0x2, 0x2, 0x2, 0x23d, 0x5, 0x3, 0x2, 0x2, 0x2, 0x23e, 
       0x240, 0x5, 0x234, 0x11b, 0x2, 0x23f, 0x23e, 0x3, 0x2, 0x2, 0x2, 
       0x240, 0x241, 0x3, 0x2, 0x2, 0x2, 0x241, 0x23f, 0x3, 0x2, 0x2, 0x2, 
       0x241, 0x242, 0x3, 0x2, 0x2, 0x2, 0x242, 0x24d, 0x3, 0x2, 0x2, 0x2, 
       0x243, 0x24d, 0x7, 0x80, 0x2, 0x2, 0x244, 0x245, 0x7, 0x97, 0x2, 
       0x2, 0x245, 0x246, 0x5, 0x62, 0x32, 0x2, 0x246, 0x247, 0x7, 0x98, 
       0x2, 0x2, 0x247, 0x24d, 0x3, 0x2, 0x2, 0x2, 0x248, 0x24d, 0x5, 0xa, 
       0x6, 0x2, 0x249, 0x24d, 0x5, 0xc, 0x7, 0x2, 0x24a, 0x24d, 0x5, 0x8, 
       0x5, 0x2, 0x24b, 0x24d, 0x5, 0x14, 0xb, 0x2, 0x24c, 0x23f, 0x3, 0x2, 
       0x2, 0x2, 0x24c, 0x243, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x244, 0x3, 0x2, 
       0x2, 0x2, 0x24c, 0x248, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x249, 0x3, 0x2, 
       0x2, 0x2, 0x24c, 0x24a, 0x3, 0x2, 0x2, 0x2, 0x24c, 0x24b, 0x3, 0x2, 
       0x2, 0x2, 0x24d, 0x7, 0x3, 0x2, 0x2, 0x2, 0x24e, 0x251, 0x5, 0x10, 
       0x9, 0x2, 0x24f, 0x251, 0x5, 0xe, 0x8, 0x2, 0x250, 0x24e, 0x3, 0x2, 
       0x2, 0x2, 0x250, 0x24f, 0x3, 0x2, 0x2, 0x2, 0x251, 0x9, 0x3, 0x2, 
       0x2, 0x2, 0x252, 0x253, 0x6, 0x6, 0x2, 0x2, 0x253, 0x254, 0x9, 0x3, 
       0x2, 0x2, 0x254, 0xb, 0x3, 0x2, 0x2, 0x2, 0x255, 0x256, 0x6, 0x7, 
       0x3, 0x2, 0x256, 0x257, 0x9, 0x4, 0x2, 0x2, 0x257, 0xd, 0x3, 0x2, 
       0x2, 0x2, 0x258, 0x263, 0x5, 0x204, 0x103, 0x2, 0x259, 0x263, 0x5, 
       0x4, 0x3, 0x2, 0x25a, 0x263, 0x5, 0x1f6, 0xfc, 0x2, 0x25b, 0x263, 
       0x5, 0x1e8, 0xf5, 0x2, 0x25c, 0x263, 0x5, 0x1f8, 0xfd, 0x2, 0x25d, 
       0x260, 0x7, 0xa6, 0x2, 0x2, 0x25e, 0x261, 0x5, 0x1c0, 0xe1, 0x2, 
       0x25f, 0x261, 0x5, 0x11a, 0x8e, 0x2, 0x260, 0x25e, 0x3, 0x2, 0x2, 
       0x2, 0x260, 0x25f, 0x3, 0x2, 0x2, 0x2, 0x261, 0x263, 0x3, 0x2, 0x2, 
       0x2, 0x262, 0x258, 0x3, 0x2, 0x2, 0x2, 0x262, 0x259, 0x3, 0x2, 0x2, 
       0x2, 0x262, 0x25a, 0x3, 0x2, 0x2, 0x2, 0x262, 0x25b, 0x3, 0x2, 0x2, 
       0x2, 0x262, 0x25c, 0x3, 0x2, 0x2, 0x2, 0x262, 0x25d, 0x3, 0x2, 0x2, 
       0x2, 0x263, 0xf, 0x3, 0x2, 0x2, 0x2, 0x264, 0x266, 0x5, 0x12, 0xa, 
       0x2, 0x265, 0x267, 0x7, 0x7f, 0x2, 0x2, 0x266, 0x265, 0x3, 0x2, 0x2, 
       0x2, 0x266, 0x267, 0x3, 0x2, 0x2, 0x2, 0x267, 0x268, 0x3, 0x2, 0x2, 
       0x2, 0x268, 0x269, 0x5, 0xe, 0x8, 0x2, 0x269, 0x11, 0x3, 0x2, 0x2, 
       0x2, 0x26a, 0x26e, 0x8, 0xa, 0x1, 0x2, 0x26b, 0x26f, 0x5, 0x118, 
       0x8d, 0x2, 0x26c, 0x26f, 0x5, 0x130, 0x99, 0x2, 0x26d, 0x26f, 0x5, 
       0x11a, 0x8e, 0x2, 0x26e, 0x26b, 0x3, 0x2, 0x2, 0x2, 0x26e, 0x26c, 
       0x3, 0x2, 0x2, 0x2, 0x26e, 0x26d, 0x3, 0x2, 0x2, 0x2, 0x26e, 0x26f, 
       0x3, 0x2, 0x2, 0x2, 0x26f, 0x270, 0x3, 0x2, 0x2, 0x2, 0x270, 0x271, 
       0x7, 0xc2, 0x2, 0x2, 0x271, 0x27e, 0x3, 0x2, 0x2, 0x2, 0x272, 0x278, 
       0xc, 0x3, 0x2, 0x2, 0x273, 0x279, 0x5, 0x4, 0x3, 0x2, 0x274, 0x276, 
       0x7, 0x7f, 0x2, 0x2, 0x275, 0x274, 0x3, 0x2, 0x2, 0x2, 0x275, 0x276, 
       0x3, 0x2, 0x2, 0x2, 0x276, 0x277, 0x3, 0x2, 0x2, 0x2, 0x277, 0x279, 
       0x5, 0x202, 0x102, 0x2, 0x278, 0x273, 0x3, 0x2, 0x2, 0x2, 0x278, 
       0x275, 0x3, 0x2, 0x2, 0x2, 0x279, 0x27a, 0x3, 0x2, 0x2, 0x2, 0x27a, 
       0x27b, 0x7, 0xc2, 0x2, 0x2, 0x27b, 0x27d, 0x3, 0x2, 0x2, 0x2, 0x27c, 
       0x272, 0x3, 0x2, 0x2, 0x2, 0x27d, 0x280, 0x3, 0x2, 0x2, 0x2, 0x27e, 
       0x27c, 0x3, 0x2, 0x2, 0x2, 0x27e, 0x27f, 0x3, 0x2, 0x2, 0x2, 0x27f, 
       0x13, 0x3, 0x2, 0x2, 0x2, 0x280, 0x27e, 0x3, 0x2, 0x2, 0x2, 0x281, 
       0x283, 0x5, 0x16, 0xc, 0x2, 0x282, 0x284, 0x5, 0x24, 0x13, 0x2, 0x283, 
       0x282, 0x3, 0x2, 0x2, 0x2, 0x283, 0x284, 0x3, 0x2, 0x2, 0x2, 0x284, 
       0x285, 0x3, 0x2, 0x2, 0x2, 0x285, 0x286, 0x5, 0xc6, 0x64, 0x2, 0x286, 
       0x15, 0x3, 0x2, 0x2, 0x2, 0x287, 0x289, 0x7, 0x99, 0x2, 0x2, 0x288, 
       0x28a, 0x5, 0x18, 0xd, 0x2, 0x289, 0x288, 0x3, 0x2, 0x2, 0x2, 0x289, 
       0x28a, 0x3, 0x2, 0x2, 0x2, 0x28a, 0x28b, 0x3, 0x2, 0x2, 0x2, 0x28b, 
       0x28c, 0x7, 0x9a, 0x2, 0x2, 0x28c, 0x17, 0x3, 0x2, 0x2, 0x2, 0x28d, 
       0x294, 0x5, 0x1c, 0xf, 0x2, 0x28e, 0x291, 0x5, 0x1a, 0xe, 0x2, 0x28f, 
       0x290, 0x7, 0xbd, 0x2, 0x2, 0x290, 0x292, 0x5, 0x1c, 0xf, 0x2, 0x291, 
       0x28f, 0x3, 0x2, 0x2, 0x2, 0x291, 0x292, 0x3, 0x2, 0x2, 0x2, 0x292, 
       0x294, 0x3, 0x2, 0x2, 0x2, 0x293, 0x28d, 0x3, 0x2, 0x2, 0x2, 0x293, 
       0x28e, 0x3, 0x2, 0x2, 0x2, 0x294, 0x19, 0x3, 0x2, 0x2, 0x2, 0x295, 
       0x296, 0x9, 0x5, 0x2, 0x2, 0x296, 0x1b, 0x3, 0x2, 0x2, 0x2, 0x297, 
       0x29c, 0x5, 0x1e, 0x10, 0x2, 0x298, 0x299, 0x7, 0xbd, 0x2, 0x2, 0x299, 
       0x29b, 0x5, 0x1e, 0x10, 0x2, 0x29a, 0x298, 0x3, 0x2, 0x2, 0x2, 0x29b, 
       0x29e, 0x3, 0x2, 0x2, 0x2, 0x29c, 0x29a, 0x3, 0x2, 0x2, 0x2, 0x29c, 
       0x29d, 0x3, 0x2, 0x2, 0x2, 0x29d, 0x2a0, 0x3, 0x2, 0x2, 0x2, 0x29e, 
       0x29c, 0x3, 0x2, 0x2, 0x2, 0x29f, 0x2a1, 0x7, 0xc6, 0x2, 0x2, 0x2a0, 
       0x29f, 0x3, 0x2, 0x2, 0x2, 0x2a0, 0x2a1, 0x3, 0x2, 0x2, 0x2, 0x2a1, 
       0x1d, 0x3, 0x2, 0x2, 0x2, 0x2a2, 0x2a5, 0x5, 0x20, 0x11, 0x2, 0x2a3, 
       0x2a5, 0x5, 0x22, 0x12, 0x2, 0x2a4, 0x2a2, 0x3, 0x2, 0x2, 0x2, 0x2a4, 
       0x2a3, 0x3, 0x2, 0x2, 0x2, 0x2a5, 0x1f, 0x3, 0x2, 0x2, 0x2, 0x2a6, 
       0x2a8, 0x7, 0xa4, 0x2, 0x2, 0x2a7, 0x2a6, 0x3, 0x2, 0x2, 0x2, 0x2a7, 
       0x2a8, 0x3, 0x2, 0x2, 0x2, 0x2a8, 0x2a9, 0x3, 0x2, 0x2, 0x2, 0x2a9, 
       0x2ac, 0x5, 0x4, 0x3, 0x2, 0x2aa, 0x2ac, 0x7, 0x80, 0x2, 0x2, 0x2ab, 
       0x2a7, 0x3, 0x2, 0x2, 0x2, 0x2ab, 0x2aa, 0x3, 0x2, 0x2, 0x2, 0x2ac, 
       0x21, 0x3, 0x2, 0x2, 0x2, 0x2ad, 0x2af, 0x7, 0xa4, 0x2, 0x2, 0x2ae, 
       0x2ad, 0x3, 0x2, 0x2, 0x2, 0x2ae, 0x2af, 0x3, 0x2, 0x2, 0x2, 0x2af, 
       0x2b0, 0x3, 0x2, 0x2, 0x2, 0x2b0, 0x2b1, 0x5, 0x4, 0x3, 0x2, 0x2b1, 
       0x2b2, 0x5, 0x1b6, 0xdc, 0x2, 0x2b2, 0x23, 0x3, 0x2, 0x2, 0x2, 0x2b3, 
       0x2b5, 0x7, 0x97, 0x2, 0x2, 0x2b4, 0x2b6, 0x5, 0x17a, 0xbe, 0x2, 
       0x2b5, 0x2b4, 0x3, 0x2, 0x2, 0x2, 0x2b5, 0x2b6, 0x3, 0x2, 0x2, 0x2, 
       0x2b6, 0x2b7, 0x3, 0x2, 0x2, 0x2, 0x2b7, 0x2b9, 0x7, 0x98, 0x2, 0x2, 
       0x2b8, 0x2ba, 0x7, 0x4b, 0x2, 0x2, 0x2b9, 0x2b8, 0x3, 0x2, 0x2, 0x2, 
       0x2b9, 0x2ba, 0x3, 0x2, 0x2, 0x2, 0x2ba, 0x2bc, 0x3, 0x2, 0x2, 0x2, 
       0x2bb, 0x2bd, 0x5, 0x21e, 0x110, 0x2, 0x2bc, 0x2bb, 0x3, 0x2, 0x2, 
       0x2, 0x2bc, 0x2bd, 0x3, 0x2, 0x2, 0x2, 0x2bd, 0x2bf, 0x3, 0x2, 0x2, 
       0x2, 0x2be, 0x2c0, 0x5, 0x144, 0xa3, 0x2, 0x2bf, 0x2be, 0x3, 0x2, 
       0x2, 0x2, 0x2bf, 0x2c0, 0x3, 0x2, 0x2, 0x2, 0x2c0, 0x2c2, 0x3, 0x2, 
       0x2, 0x2, 0x2c1, 0x2c3, 0x5, 0x162, 0xb2, 0x2, 0x2c2, 0x2c1, 0x3, 
       0x2, 0x2, 0x2, 0x2c2, 0x2c3, 0x3, 0x2, 0x2, 0x2, 0x2c3, 0x25, 0x3, 
       0x2, 0x2, 0x2, 0x2c4, 0x2c5, 0x8, 0x14, 0x1, 0x2, 0x2c5, 0x2de, 0x5, 
       0x6, 0x4, 0x2, 0x2c6, 0x2c9, 0x5, 0x116, 0x8c, 0x2, 0x2c7, 0x2c9, 
       0x5, 0x20c, 0x107, 0x2, 0x2c8, 0x2c6, 0x3, 0x2, 0x2, 0x2, 0x2c8, 
       0x2c7, 0x3, 0x2, 0x2, 0x2, 0x2c9, 0x2ca, 0x3, 0x2, 0x2, 0x2, 0x2ca, 
       0x2cb, 0x5, 0x1be, 0xe0, 0x2, 0x2cb, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2cc, 
       0x2de, 0x5, 0x16e, 0xb8, 0x2, 0x2cd, 0x2ce, 0x9, 0x6, 0x2, 0x2, 0x2ce, 
       0x2cf, 0x7, 0xa9, 0x2, 0x2, 0x2cf, 0x2d0, 0x5, 0x16e, 0xb8, 0x2, 
       0x2d0, 0x2d1, 0x7, 0xaa, 0x2, 0x2, 0x2d1, 0x2d2, 0x7, 0x97, 0x2, 
       0x2, 0x2d2, 0x2d3, 0x5, 0x62, 0x32, 0x2, 0x2d3, 0x2d4, 0x7, 0x98, 
       0x2, 0x2, 0x2d4, 0x2de, 0x3, 0x2, 0x2, 0x2, 0x2d5, 0x2d6, 0x5, 0x28, 
       0x15, 0x2, 0x2d6, 0x2d9, 0x7, 0x97, 0x2, 0x2, 0x2d7, 0x2da, 0x5, 
       0x62, 0x32, 0x2, 0x2d8, 0x2da, 0x5, 0x16e, 0xb8, 0x2, 0x2d9, 0x2d7, 
       0x3, 0x2, 0x2, 0x2, 0x2d9, 0x2d8, 0x3, 0x2, 0x2, 0x2, 0x2da, 0x2db, 
       0x3, 0x2, 0x2, 0x2, 0x2db, 0x2dc, 0x7, 0x98, 0x2, 0x2, 0x2dc, 0x2de, 
       0x3, 0x2, 0x2, 0x2, 0x2dd, 0x2c4, 0x3, 0x2, 0x2, 0x2, 0x2dd, 0x2c8, 
       0x3, 0x2, 0x2, 0x2, 0x2dd, 0x2cc, 0x3, 0x2, 0x2, 0x2, 0x2dd, 0x2cd, 
       0x3, 0x2, 0x2, 0x2, 0x2dd, 0x2d5, 0x3, 0x2, 0x2, 0x2, 0x2de, 0x2fc, 
       0x3, 0x2, 0x2, 0x2, 0x2df, 0x2e0, 0xc, 0xa, 0x2, 0x2, 0x2e0, 0x2e3, 
       0x7, 0x99, 0x2, 0x2, 0x2e1, 0x2e4, 0x5, 0x62, 0x32, 0x2, 0x2e2, 0x2e4, 
       0x5, 0x1be, 0xe0, 0x2, 0x2e3, 0x2e1, 0x3, 0x2, 0x2, 0x2, 0x2e3, 0x2e2, 
       0x3, 0x2, 0x2, 0x2, 0x2e4, 0x2e5, 0x3, 0x2, 0x2, 0x2, 0x2e5, 0x2e6, 
       0x7, 0x9a, 0x2, 0x2, 0x2e6, 0x2fb, 0x3, 0x2, 0x2, 0x2, 0x2e7, 0x2e8, 
       0xc, 0x9, 0x2, 0x2, 0x2e8, 0x2ea, 0x7, 0x97, 0x2, 0x2, 0x2e9, 0x2eb, 
       0x5, 0x2a, 0x16, 0x2, 0x2ea, 0x2e9, 0x3, 0x2, 0x2, 0x2, 0x2ea, 0x2eb, 
       0x3, 0x2, 0x2, 0x2, 0x2eb, 0x2ec, 0x3, 0x2, 0x2, 0x2, 0x2ec, 0x2fb, 
       0x7, 0x98, 0x2, 0x2, 0x2ed, 0x2ee, 0xc, 0x6, 0x2, 0x2, 0x2ee, 0x2f6, 
       0x9, 0x7, 0x2, 0x2, 0x2ef, 0x2f1, 0x7, 0x7f, 0x2, 0x2, 0x2f0, 0x2ef, 
       0x3, 0x2, 0x2, 0x2, 0x2f0, 0x2f1, 0x3, 0x2, 0x2, 0x2, 0x2f1, 0x2f2, 
       0x3, 0x2, 0x2, 0x2, 0x2f2, 0x2f3, 0x5, 0x8, 0x5, 0x2, 0x2f3, 0x2f4, 
       0x8, 0x14, 0x1, 0x2, 0x2f4, 0x2f7, 0x3, 0x2, 0x2, 0x2, 0x2f5, 0x2f7, 
       0x5, 0x2c, 0x17, 0x2, 0x2f6, 0x2f0, 0x3, 0x2, 0x2, 0x2, 0x2f6, 0x2f5, 
       0x3, 0x2, 0x2, 0x2, 0x2f7, 0x2fb, 0x3, 0x2, 0x2, 0x2, 0x2f8, 0x2f9, 
       0xc, 0x5, 0x2, 0x2, 0x2f9, 0x2fb, 0x9, 0x8, 0x2, 0x2, 0x2fa, 0x2df, 
       0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2e7, 0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2ed, 
       0x3, 0x2, 0x2, 0x2, 0x2fa, 0x2f8, 0x3, 0x2, 0x2, 0x2, 0x2fb, 0x2fe, 
       0x3, 0x2, 0x2, 0x2, 0x2fc, 0x2fa, 0x3, 0x2, 0x2, 0x2, 0x2fc, 0x2fd, 
       0x3, 0x2, 0x2, 0x2, 0x2fd, 0x27, 0x3, 0x2, 0x2, 0x2, 0x2fe, 0x2fc, 
       0x3, 0x2, 0x2, 0x2, 0x2ff, 0x300, 0x7, 0x89, 0x2, 0x2, 0x300, 0x29, 
       0x3, 0x2, 0x2, 0x2, 0x301, 0x302, 0x5, 0x1bc, 0xdf, 0x2, 0x302, 0x2b, 
       0x3, 0x2, 0x2, 0x2, 0x303, 0x305, 0x5, 0x12, 0xa, 0x2, 0x304, 0x303, 
       0x3, 0x2, 0x2, 0x2, 0x304, 0x305, 0x3, 0x2, 0x2, 0x2, 0x305, 0x309, 
       0x3, 0x2, 0x2, 0x2, 0x306, 0x307, 0x5, 0x118, 0x8d, 0x2, 0x307, 0x308, 
       0x7, 0xc2, 0x2, 0x2, 0x308, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x309, 0x306, 
       0x3, 0x2, 0x2, 0x2, 0x309, 0x30a, 0x3, 0x2, 0x2, 0x2, 0x30a, 0x30b, 
       0x3, 0x2, 0x2, 0x2, 0x30b, 0x30c, 0x7, 0xa6, 0x2, 0x2, 0x30c, 0x317, 
       0x5, 0x118, 0x8d, 0x2, 0x30d, 0x30e, 0x5, 0x12, 0xa, 0x2, 0x30e, 
       0x30f, 0x7, 0x7f, 0x2, 0x2, 0x30f, 0x310, 0x5, 0x202, 0x102, 0x2, 
       0x310, 0x311, 0x7, 0xc2, 0x2, 0x2, 0x311, 0x312, 0x7, 0xa6, 0x2, 
       0x2, 0x312, 0x313, 0x5, 0x118, 0x8d, 0x2, 0x313, 0x317, 0x3, 0x2, 
       0x2, 0x2, 0x314, 0x315, 0x7, 0xa6, 0x2, 0x2, 0x315, 0x317, 0x5, 0x11a, 
       0x8e, 0x2, 0x316, 0x304, 0x3, 0x2, 0x2, 0x2, 0x316, 0x30d, 0x3, 0x2, 
       0x2, 0x2, 0x316, 0x314, 0x3, 0x2, 0x2, 0x2, 0x317, 0x2d, 0x3, 0x2, 
       0x2, 0x2, 0x318, 0x333, 0x5, 0x26, 0x14, 0x2, 0x319, 0x323, 0x7, 
       0x75, 0x2, 0x2, 0x31a, 0x31b, 0x7, 0x97, 0x2, 0x2, 0x31b, 0x31c, 
       0x5, 0x16e, 0xb8, 0x2, 0x31c, 0x31d, 0x7, 0x98, 0x2, 0x2, 0x31d, 
       0x324, 0x3, 0x2, 0x2, 0x2, 0x31e, 0x31f, 0x7, 0xc6, 0x2, 0x2, 0x31f, 
       0x320, 0x7, 0x97, 0x2, 0x2, 0x320, 0x321, 0x5, 0x4, 0x3, 0x2, 0x321, 
       0x322, 0x7, 0x98, 0x2, 0x2, 0x322, 0x324, 0x3, 0x2, 0x2, 0x2, 0x323, 
       0x31a, 0x3, 0x2, 0x2, 0x2, 0x323, 0x31e, 0x3, 0x2, 0x2, 0x2, 0x324, 
       0x333, 0x3, 0x2, 0x2, 0x2, 0x325, 0x326, 0x9, 0x9, 0x2, 0x2, 0x326, 
       0x333, 0x5, 0x2e, 0x18, 0x2, 0x327, 0x328, 0x5, 0x30, 0x19, 0x2, 
       0x328, 0x329, 0x5, 0x42, 0x22, 0x2, 0x329, 0x333, 0x3, 0x2, 0x2, 
       0x2, 0x32a, 0x32b, 0x7, 0x12, 0x2, 0x2, 0x32b, 0x32c, 0x7, 0x97, 
       0x2, 0x2, 0x32c, 0x32d, 0x5, 0x16e, 0xb8, 0x2, 0x32d, 0x32e, 0x7, 
       0x98, 0x2, 0x2, 0x32e, 0x333, 0x3, 0x2, 0x2, 0x2, 0x32f, 0x333, 0x5, 
       0x40, 0x21, 0x2, 0x330, 0x333, 0x5, 0x32, 0x1a, 0x2, 0x331, 0x333, 
       0x5, 0x3e, 0x20, 0x2, 0x332, 0x318, 0x3, 0x2, 0x2, 0x2, 0x332, 0x319, 
       0x3, 0x2, 0x2, 0x2, 0x332, 0x325, 0x3, 0x2, 0x2, 0x2, 0x332, 0x327, 
       0x3, 0x2, 0x2, 0x2, 0x332, 0x32a, 0x3, 0x2, 0x2, 0x2, 0x332, 0x32f, 
       0x3, 0x2, 0x2, 0x2, 0x332, 0x330, 0x3, 0x2, 0x2, 0x2, 0x332, 0x331, 
       0x3, 0x2, 0x2, 0x2, 0x333, 0x2f, 0x3, 0x2, 0x2, 0x2, 0x334, 0x335, 
       0x9, 0xa, 0x2, 0x2, 0x335, 0x31, 0x3, 0x2, 0x2, 0x2, 0x336, 0x338, 
       0x7, 0xc2, 0x2, 0x2, 0x337, 0x336, 0x3, 0x2, 0x2, 0x2, 0x337, 0x338, 
       0x3, 0x2, 0x2, 0x2, 0x338, 0x339, 0x3, 0x2, 0x2, 0x2, 0x339, 0x33b, 
       0x7, 0x4d, 0x2, 0x2, 0x33a, 0x33c, 0x5, 0x34, 0x1b, 0x2, 0x33b, 0x33a, 
       0x3, 0x2, 0x2, 0x2, 0x33b, 0x33c, 0x3, 0x2, 0x2, 0x2, 0x33c, 0x342, 
       0x3, 0x2, 0x2, 0x2, 0x33d, 0x343, 0x5, 0x36, 0x1c, 0x2, 0x33e, 0x33f, 
       0x7, 0x97, 0x2, 0x2, 0x33f, 0x340, 0x5, 0x16e, 0xb8, 0x2, 0x340, 
       0x341, 0x7, 0x98, 0x2, 0x2, 0x341, 0x343, 0x3, 0x2, 0x2, 0x2, 0x342, 
       0x33d, 0x3, 0x2, 0x2, 0x2, 0x342, 0x33e, 0x3, 0x2, 0x2, 0x2, 0x343, 
       0x345, 0x3, 0x2, 0x2, 0x2, 0x344, 0x346, 0x5, 0x3c, 0x1f, 0x2, 0x345, 
       0x344, 0x3, 0x2, 0x2, 0x2, 0x345, 0x346, 0x3, 0x2, 0x2, 0x2, 0x346, 
       0x33, 0x3, 0x2, 0x2, 0x2, 0x347, 0x348, 0x7, 0x97, 0x2, 0x2, 0x348, 
       0x349, 0x5, 0x2a, 0x16, 0x2, 0x349, 0x34a, 0x7, 0x98, 0x2, 0x2, 0x34a, 
       0x35, 0x3, 0x2, 0x2, 0x2, 0x34b, 0x34d, 0x5, 0x10e, 0x88, 0x2, 0x34c, 
       0x34e, 0x5, 0x38, 0x1d, 0x2, 0x34d, 0x34c, 0x3, 0x2, 0x2, 0x2, 0x34d, 
       0x34e, 0x3, 0x2, 0x2, 0x2, 0x34e, 0x37, 0x3, 0x2, 0x2, 0x2, 0x34f, 
       0x351, 0x5, 0x164, 0xb3, 0x2, 0x350, 0x352, 0x5, 0x38, 0x1d, 0x2, 
       0x351, 0x350, 0x3, 0x2, 0x2, 0x2, 0x351, 0x352, 0x3, 0x2, 0x2, 0x2, 
       0x352, 0x355, 0x3, 0x2, 0x2, 0x2, 0x353, 0x355, 0x5, 0x3a, 0x1e, 
       0x2, 0x354, 0x34f, 0x3, 0x2, 0x2, 0x2, 0x354, 0x353, 0x3, 0x2, 0x2, 
       0x2, 0x355, 0x39, 0x3, 0x2, 0x2, 0x2, 0x356, 0x357, 0x8, 0x1e, 0x1, 
       0x2, 0x357, 0x358, 0x7, 0x99, 0x2, 0x2, 0x358, 0x359, 0x5, 0x62, 
       0x32, 0x2, 0x359, 0x35b, 0x7, 0x9a, 0x2, 0x2, 0x35a, 0x35c, 0x5, 
       0x144, 0xa3, 0x2, 0x35b, 0x35a, 0x3, 0x2, 0x2, 0x2, 0x35b, 0x35c, 
       0x3, 0x2, 0x2, 0x2, 0x35c, 0x366, 0x3, 0x2, 0x2, 0x2, 0x35d, 0x35e, 
       0xc, 0x3, 0x2, 0x2, 0x35e, 0x35f, 0x7, 0x99, 0x2, 0x2, 0x35f, 0x360, 
       0x5, 0x64, 0x33, 0x2, 0x360, 0x362, 0x7, 0x9a, 0x2, 0x2, 0x361, 0x363, 
       0x5, 0x144, 0xa3, 0x2, 0x362, 0x361, 0x3, 0x2, 0x2, 0x2, 0x362, 0x363, 
       0x3, 0x2, 0x2, 0x2, 0x363, 0x365, 0x3, 0x2, 0x2, 0x2, 0x364, 0x35d, 
       0x3, 0x2, 0x2, 0x2, 0x365, 0x368, 0x3, 0x2, 0x2, 0x2, 0x366, 0x364, 
       0x3, 0x2, 0x2, 0x2, 0x366, 0x367, 0x3, 0x2, 0x2, 0x2, 0x367, 0x3b, 
       0x3, 0x2, 0x2, 0x2, 0x368, 0x366, 0x3, 0x2, 0x2, 0x2, 0x369, 0x36b, 
       0x7, 0x97, 0x2, 0x2, 0x36a, 0x36c, 0x5, 0x2a, 0x16, 0x2, 0x36b, 0x36a, 
       0x3, 0x2, 0x2, 0x2, 0x36b, 0x36c, 0x3, 0x2, 0x2, 0x2, 0x36c, 0x36d, 
       0x3, 0x2, 0x2, 0x2, 0x36d, 0x370, 0x7, 0x98, 0x2, 0x2, 0x36e, 0x370, 
       0x5, 0x1be, 0xe0, 0x2, 0x36f, 0x369, 0x3, 0x2, 0x2, 0x2, 0x36f, 0x36e, 
       0x3, 0x2, 0x2, 0x2, 0x370, 0x3d, 0x3, 0x2, 0x2, 0x2, 0x371, 0x373, 
       0x7, 0xc2, 0x2, 0x2, 0x372, 0x371, 0x3, 0x2, 0x2, 0x2, 0x372, 0x373, 
       0x3, 0x2, 0x2, 0x2, 0x373, 0x374, 0x3, 0x2, 0x2, 0x2, 0x374, 0x377, 
       0x7, 0x2b, 0x2, 0x2, 0x375, 0x376, 0x7, 0x99, 0x2, 0x2, 0x376, 0x378, 
       0x7, 0x9a, 0x2, 0x2, 0x377, 0x375, 0x3, 0x2, 0x2, 0x2, 0x377, 0x378, 
       0x3, 0x2, 0x2, 0x2, 0x378, 0x379, 0x3, 0x2, 0x2, 0x2, 0x379, 0x37a, 
       0x5, 0x42, 0x22, 0x2, 0x37a, 0x3f, 0x3, 0x2, 0x2, 0x2, 0x37b, 0x37c, 
       0x7, 0x4e, 0x2, 0x2, 0x37c, 0x37d, 0x7, 0x97, 0x2, 0x2, 0x37d, 0x37e, 
       0x5, 0x62, 0x32, 0x2, 0x37e, 0x37f, 0x7, 0x98, 0x2, 0x2, 0x37f, 0x41, 
       0x3, 0x2, 0x2, 0x2, 0x380, 0x387, 0x5, 0x2e, 0x18, 0x2, 0x381, 0x382, 
       0x7, 0x97, 0x2, 0x2, 0x382, 0x383, 0x5, 0x16e, 0xb8, 0x2, 0x383, 
       0x384, 0x7, 0x98, 0x2, 0x2, 0x384, 0x385, 0x5, 0x42, 0x22, 0x2, 0x385, 
       0x387, 0x3, 0x2, 0x2, 0x2, 0x386, 0x380, 0x3, 0x2, 0x2, 0x2, 0x386, 
       0x381, 0x3, 0x2, 0x2, 0x2, 0x387, 0x43, 0x3, 0x2, 0x2, 0x2, 0x388, 
       0x38d, 0x5, 0x42, 0x22, 0x2, 0x389, 0x38a, 0x9, 0xb, 0x2, 0x2, 0x38a, 
       0x38c, 0x5, 0x42, 0x22, 0x2, 0x38b, 0x389, 0x3, 0x2, 0x2, 0x2, 0x38c, 
       0x38f, 0x3, 0x2, 0x2, 0x2, 0x38d, 0x38b, 0x3, 0x2, 0x2, 0x2, 0x38d, 
       0x38e, 0x3, 0x2, 0x2, 0x2, 0x38e, 0x45, 0x3, 0x2, 0x2, 0x2, 0x38f, 
       0x38d, 0x3, 0x2, 0x2, 0x2, 0x390, 0x395, 0x5, 0x44, 0x23, 0x2, 0x391, 
       0x392, 0x9, 0xc, 0x2, 0x2, 0x392, 0x394, 0x5, 0x44, 0x23, 0x2, 0x393, 
       0x391, 0x3, 0x2, 0x2, 0x2, 0x394, 0x397, 0x3, 0x2, 0x2, 0x2, 0x395, 
       0x393, 0x3, 0x2, 0x2, 0x2, 0x395, 0x396, 0x3, 0x2, 0x2, 0x2, 0x396, 
       0x47, 0x3, 0x2, 0x2, 0x2, 0x397, 0x395, 0x3, 0x2, 0x2, 0x2, 0x398, 
       0x39d, 0x5, 0x46, 0x24, 0x2, 0x399, 0x39a, 0x9, 0xd, 0x2, 0x2, 0x39a, 
       0x39c, 0x5, 0x46, 0x24, 0x2, 0x39b, 0x399, 0x3, 0x2, 0x2, 0x2, 0x39c, 
       0x39f, 0x3, 0x2, 0x2, 0x2, 0x39d, 0x39b, 0x3, 0x2, 0x2, 0x2, 0x39d, 
       0x39e, 0x3, 0x2, 0x2, 0x2, 0x39e, 0x49, 0x3, 0x2, 0x2, 0x2, 0x39f, 
       0x39d, 0x3, 0x2, 0x2, 0x2, 0x3a0, 0x3a6, 0x5, 0x48, 0x25, 0x2, 0x3a1, 
       0x3a2, 0x5, 0x4c, 0x27, 0x2, 0x3a2, 0x3a3, 0x5, 0x48, 0x25, 0x2, 
       0x3a3, 0x3a5, 0x3, 0x2, 0x2, 0x2, 0x3a4, 0x3a1, 0x3, 0x2, 0x2, 0x2, 
       0x3a5, 0x3a8, 0x3, 0x2, 0x2, 0x2, 0x3a6, 0x3a4, 0x3, 0x2, 0x2, 0x2, 
       0x3a6, 0x3a7, 0x3, 0x2, 0x2, 0x2, 0x3a7, 0x4b, 0x3, 0x2, 0x2, 0x2, 
       0x3a8, 0x3a6, 0x3, 0x2, 0x2, 0x2, 0x3a9, 0x3aa, 0x7, 0xaa, 0x2, 0x2, 
       0x3aa, 0x3ae, 0x7, 0xaa, 0x2, 0x2, 0x3ab, 0x3ac, 0x7, 0xa9, 0x2, 
       0x2, 0x3ac, 0x3ae, 0x7, 0xa9, 0x2, 0x2, 0x3ad, 0x3a9, 0x3, 0x2, 0x2, 
       0x2, 0x3ad, 0x3ab, 0x3, 0x2, 0x2, 0x2, 0x3ae, 0x4d, 0x3, 0x2, 0x2, 
       0x2, 0x3af, 0x3b4, 0x5, 0x4a, 0x26, 0x2, 0x3b0, 0x3b1, 0x9, 0xe, 
       0x2, 0x2, 0x3b1, 0x3b3, 0x5, 0x4a, 0x26, 0x2, 0x3b2, 0x3b0, 0x3, 
       0x2, 0x2, 0x2, 0x3b3, 0x3b6, 0x3, 0x2, 0x2, 0x2, 0x3b4, 0x3b2, 0x3, 
       0x2, 0x2, 0x2, 0x3b4, 0x3b5, 0x3, 0x2, 0x2, 0x2, 0x3b5, 0x4f, 0x3, 
       0x2, 0x2, 0x2, 0x3b6, 0x3b4, 0x3, 0x2, 0x2, 0x2, 0x3b7, 0x3bc, 0x5, 
       0x4e, 0x28, 0x2, 0x3b8, 0x3b9, 0x9, 0xf, 0x2, 0x2, 0x3b9, 0x3bb, 
       0x5, 0x4e, 0x28, 0x2, 0x3ba, 0x3b8, 0x3, 0x2, 0x2, 0x2, 0x3bb, 0x3be, 
       0x3, 0x2, 0x2, 0x2, 0x3bc, 0x3ba, 0x3, 0x2, 0x2, 0x2, 0x3bc, 0x3bd, 
       0x3, 0x2, 0x2, 0x2, 0x3bd, 0x51, 0x3, 0x2, 0x2, 0x2, 0x3be, 0x3bc, 
       0x3, 0x2, 0x2, 0x2, 0x3bf, 0x3c4, 0x5, 0x50, 0x29, 0x2, 0x3c0, 0x3c1, 
       0x7, 0xa4, 0x2, 0x2, 0x3c1, 0x3c3, 0x5, 0x50, 0x29, 0x2, 0x3c2, 0x3c0, 
       0x3, 0x2, 0x2, 0x2, 0x3c3, 0x3c6, 0x3, 0x2, 0x2, 0x2, 0x3c4, 0x3c2, 
       0x3, 0x2, 0x2, 0x2, 0x3c4, 0x3c5, 0x3, 0x2, 0x2, 0x2, 0x3c5, 0x53, 
       0x3, 0x2, 0x2, 0x2, 0x3c6, 0x3c4, 0x3, 0x2, 0x2, 0x2, 0x3c7, 0x3cc, 
       0x5, 0x52, 0x2a, 0x2, 0x3c8, 0x3c9, 0x7, 0xa3, 0x2, 0x2, 0x3c9, 0x3cb, 
       0x5, 0x52, 0x2a, 0x2, 0x3ca, 0x3c8, 0x3, 0x2, 0x2, 0x2, 0x3cb, 0x3ce, 
       0x3, 0x2, 0x2, 0x2, 0x3cc, 0x3ca, 0x3, 0x2, 0x2, 0x2, 0x3cc, 0x3cd, 
       0x3, 0x2, 0x2, 0x2, 0x3cd, 0x55, 0x3, 0x2, 0x2, 0x2, 0x3ce, 0x3cc, 
       0x3, 0x2, 0x2, 0x2, 0x3cf, 0x3d4, 0x5, 0x54, 0x2b, 0x2, 0x3d0, 0x3d1, 
       0x7, 0xa5, 0x2, 0x2, 0x3d1, 0x3d3, 0x5, 0x54, 0x2b, 0x2, 0x3d2, 0x3d0, 
       0x3, 0x2, 0x2, 0x2, 0x3d3, 0x3d6, 0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d2, 
       0x3, 0x2, 0x2, 0x2, 0x3d4, 0x3d5, 0x3, 0x2, 0x2, 0x2, 0x3d5, 0x57, 
       0x3, 0x2, 0x2, 0x2, 0x3d6, 0x3d4, 0x3, 0x2, 0x2, 0x2, 0x3d7, 0x3dc, 
       0x5, 0x56, 0x2c, 0x2, 0x3d8, 0x3d9, 0x7, 0xb9, 0x2, 0x2, 0x3d9, 0x3db, 
       0x5, 0x56, 0x2c, 0x2, 0x3da, 0x3d8, 0x3, 0x2, 0x2, 0x2, 0x3db, 0x3de, 
       0x3, 0x2, 0x2, 0x2, 0x3dc, 0x3da, 0x3, 0x2, 0x2, 0x2, 0x3dc, 0x3dd, 
       0x3, 0x2, 0x2, 0x2, 0x3dd, 0x59, 0x3, 0x2, 0x2, 0x2, 0x3de, 0x3dc, 
       0x3, 0x2, 0x2, 0x2, 0x3df, 0x3e4, 0x5, 0x58, 0x2d, 0x2, 0x3e0, 0x3e1, 
       0x7, 0xba, 0x2, 0x2, 0x3e1, 0x3e3, 0x5, 0x58, 0x2d, 0x2, 0x3e2, 0x3e0, 
       0x3, 0x2, 0x2, 0x2, 0x3e3, 0x3e6, 0x3, 0x2, 0x2, 0x2, 0x3e4, 0x3e2, 
       0x3, 0x2, 0x2, 0x2, 0x3e4, 0x3e5, 0x3, 0x2, 0x2, 0x2, 0x3e5, 0x5b, 
       0x3, 0x2, 0x2, 0x2, 0x3e6, 0x3e4, 0x3, 0x2, 0x2, 0x2, 0x3e7, 0x3ed, 
       0x5, 0x5a, 0x2e, 0x2, 0x3e8, 0x3e9, 0x7, 0xc0, 0x2, 0x2, 0x3e9, 0x3ea, 
       0x5, 0x62, 0x32, 0x2, 0x3ea, 0x3eb, 0x7, 0xc1, 0x2, 0x2, 0x3eb, 0x3ec, 
       0x5, 0x5e, 0x30, 0x2, 0x3ec, 0x3ee, 0x3, 0x2, 0x2, 0x2, 0x3ed, 0x3e8, 
       0x3, 0x2, 0x2, 0x2, 0x3ed, 0x3ee, 0x3, 0x2, 0x2, 0x2, 0x3ee, 0x5d, 
       0x3, 0x2, 0x2, 0x2, 0x3ef, 0x3f6, 0x5, 0x5c, 0x2f, 0x2, 0x3f0, 0x3f1, 
       0x5, 0x5a, 0x2e, 0x2, 0x3f1, 0x3f2, 0x5, 0x60, 0x31, 0x2, 0x3f2, 
       0x3f3, 0x5, 0x1ba, 0xde, 0x2, 0x3f3, 0x3f6, 0x3, 0x2, 0x2, 0x2, 0x3f4, 
       0x3f6, 0x5, 0x21c, 0x10f, 0x2, 0x3f5, 0x3ef, 0x3, 0x2, 0x2, 0x2, 
       0x3f5, 0x3f0, 0x3, 0x2, 0x2, 0x2, 0x3f5, 0x3f4, 0x3, 0x2, 0x2, 0x2, 
       0x3f6, 0x5f, 0x3, 0x2, 0x2, 0x2, 0x3f7, 0x3f8, 0x9, 0x10, 0x2, 0x2, 
       0x3f8, 0x61, 0x3, 0x2, 0x2, 0x2, 0x3f9, 0x3fe, 0x5, 0x5e, 0x30, 0x2, 
       0x3fa, 0x3fb, 0x7, 0xbd, 0x2, 0x2, 0x3fb, 0x3fd, 0x5, 0x5e, 0x30, 
       0x2, 0x3fc, 0x3fa, 0x3, 0x2, 0x2, 0x2, 0x3fd, 0x400, 0x3, 0x2, 0x2, 
       0x2, 0x3fe, 0x3fc, 0x3, 0x2, 0x2, 0x2, 0x3fe, 0x3ff, 0x3, 0x2, 0x2, 
       0x2, 0x3ff, 0x63, 0x3, 0x2, 0x2, 0x2, 0x400, 0x3fe, 0x3, 0x2, 0x2, 
       0x2, 0x401, 0x402, 0x5, 0x5c, 0x2f, 0x2, 0x402, 0x65, 0x3, 0x2, 0x2, 
       0x2, 0x403, 0x41c, 0x5, 0x68, 0x35, 0x2, 0x404, 0x41c, 0x5, 0xaa, 
       0x56, 0x2, 0x405, 0x41c, 0x5, 0xb6, 0x5c, 0x2, 0x406, 0x41c, 0x5, 
       0x6a, 0x36, 0x2, 0x407, 0x41c, 0x5, 0x6c, 0x37, 0x2, 0x408, 0x41c, 
       0x5, 0x88, 0x45, 0x2, 0x409, 0x41c, 0x5, 0x74, 0x3b, 0x2, 0x40a, 
       0x41c, 0x5, 0x76, 0x3c, 0x2, 0x40b, 0x41c, 0x5, 0xa2, 0x52, 0x2, 
       0x40c, 0x41c, 0x5, 0x78, 0x3d, 0x2, 0x40d, 0x41c, 0x5, 0x7a, 0x3e, 
       0x2, 0x40e, 0x41c, 0x5, 0xc2, 0x62, 0x2, 0x40f, 0x41c, 0x5, 0xd8, 
       0x6d, 0x2, 0x410, 0x412, 0x5, 0x144, 0xa3, 0x2, 0x411, 0x410, 0x3, 
       0x2, 0x2, 0x2, 0x411, 0x412, 0x3, 0x2, 0x2, 0x2, 0x412, 0x419, 0x3, 
       0x2, 0x2, 0x2, 0x413, 0x41a, 0x5, 0xc4, 0x63, 0x2, 0x414, 0x41a, 
       0x5, 0xc6, 0x64, 0x2, 0x415, 0x41a, 0x5, 0xca, 0x66, 0x2, 0x416, 
       0x41a, 0x5, 0xce, 0x68, 0x2, 0x417, 0x41a, 0x5, 0xd6, 0x6c, 0x2, 
       0x418, 0x41a, 0x5, 0x212, 0x10a, 0x2, 0x419, 0x413, 0x3, 0x2, 0x2, 
       0x2, 0x419, 0x414, 0x3, 0x2, 0x2, 0x2, 0x419, 0x415, 0x3, 0x2, 0x2, 
       0x2, 0x419, 0x416, 0x3, 0x2, 0x2, 0x2, 0x419, 0x417, 0x3, 0x2, 0x2, 
       0x2, 0x419, 0x418, 0x3, 0x2, 0x2, 0x2, 0x41a, 0x41c, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x403, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x404, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x405, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x406, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x407, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x408, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x409, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x40a, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x40b, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x40c, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x40d, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x40e, 0x3, 0x2, 0x2, 
       0x2, 0x41b, 0x40f, 0x3, 0x2, 0x2, 0x2, 0x41b, 0x411, 0x3, 0x2, 0x2, 
       0x2, 0x41c, 0x67, 0x3, 0x2, 0x2, 0x2, 0x41d, 0x41f, 0x5, 0x144, 0xa3, 
       0x2, 0x41e, 0x41d, 0x3, 0x2, 0x2, 0x2, 0x41e, 0x41f, 0x3, 0x2, 0x2, 
       0x2, 0x41f, 0x424, 0x3, 0x2, 0x2, 0x2, 0x420, 0x425, 0x5, 0x4, 0x3, 
       0x2, 0x421, 0x422, 0x7, 0x18, 0x2, 0x2, 0x422, 0x425, 0x5, 0x64, 
       0x33, 0x2, 0x423, 0x425, 0x7, 0x2a, 0x2, 0x2, 0x424, 0x420, 0x3, 
       0x2, 0x2, 0x2, 0x424, 0x421, 0x3, 0x2, 0x2, 0x2, 0x424, 0x423, 0x3, 
       0x2, 0x2, 0x2, 0x425, 0x426, 0x3, 0x2, 0x2, 0x2, 0x426, 0x427, 0x7, 
       0xc1, 0x2, 0x2, 0x427, 0x428, 0x5, 0x66, 0x34, 0x2, 0x428, 0x69, 
       0x3, 0x2, 0x2, 0x2, 0x429, 0x42a, 0x7, 0xa0, 0x2, 0x2, 0x42a, 0x42b, 
       0x7, 0xc7, 0x2, 0x2, 0x42b, 0x42c, 0x7, 0xa9, 0x2, 0x2, 0x42c, 0x42d, 
       0x7, 0xa9, 0x2, 0x2, 0x42d, 0x42e, 0x7, 0x99, 0x2, 0x2, 0x42e, 0x42f, 
       0x8, 0x36, 0x1, 0x2, 0x42f, 0x434, 0x5, 0x6e, 0x38, 0x2, 0x430, 0x431, 
       0x7, 0xbd, 0x2, 0x2, 0x431, 0x433, 0x5, 0x6e, 0x38, 0x2, 0x432, 0x430, 
       0x3, 0x2, 0x2, 0x2, 0x433, 0x436, 0x3, 0x2, 0x2, 0x2, 0x434, 0x432, 
       0x3, 0x2, 0x2, 0x2, 0x434, 0x435, 0x3, 0x2, 0x2, 0x2, 0x435, 0x437, 
       0x3, 0x2, 0x2, 0x2, 0x436, 0x434, 0x3, 0x2, 0x2, 0x2, 0x437, 0x438, 
       0x7, 0x9a, 0x2, 0x2, 0x438, 0x439, 0x7, 0xc3, 0x2, 0x2, 0x439, 0x6b, 
       0x3, 0x2, 0x2, 0x2, 0x43a, 0x43b, 0x7, 0xa0, 0x2, 0x2, 0x43b, 0x43c, 
       0x7, 0xc7, 0x2, 0x2, 0x43c, 0x43d, 0x7, 0xaa, 0x2, 0x2, 0x43d, 0x43e, 
       0x7, 0xaa, 0x2, 0x2, 0x43e, 0x43f, 0x7, 0x99, 0x2, 0x2, 0x43f, 0x440, 
       0x8, 0x37, 0x1, 0x2, 0x440, 0x445, 0x5, 0x70, 0x39, 0x2, 0x441, 0x442, 
       0x7, 0xbd, 0x2, 0x2, 0x442, 0x444, 0x5, 0x70, 0x39, 0x2, 0x443, 0x441, 
       0x3, 0x2, 0x2, 0x2, 0x444, 0x447, 0x3, 0x2, 0x2, 0x2, 0x445, 0x443, 
       0x3, 0x2, 0x2, 0x2, 0x445, 0x446, 0x3, 0x2, 0x2, 0x2, 0x446, 0x448, 
       0x3, 0x2, 0x2, 0x2, 0x447, 0x445, 0x3, 0x2, 0x2, 0x2, 0x448, 0x449, 
       0x7, 0x9a, 0x2, 0x2, 0x449, 0x44a, 0x7, 0xc3, 0x2, 0x2, 0x44a, 0x6d, 
       0x3, 0x2, 0x2, 0x2, 0x44b, 0x44f, 0x7, 0x9d, 0x2, 0x2, 0x44c, 0x44f, 
       0x5, 0x72, 0x3a, 0x2, 0x44d, 0x44f, 0x5, 0x62, 0x32, 0x2, 0x44e, 
       0x44b, 0x3, 0x2, 0x2, 0x2, 0x44e, 0x44c, 0x3, 0x2, 0x2, 0x2, 0x44e, 
       0x44d, 0x3, 0x2, 0x2, 0x2, 0x44f, 0x6f, 0x3, 0x2, 0x2, 0x2, 0x450, 
       0x454, 0x7, 0x9d, 0x2, 0x2, 0x451, 0x454, 0x5, 0x72, 0x3a, 0x2, 0x452, 
       0x454, 0x7, 0xc7, 0x2, 0x2, 0x453, 0x450, 0x3, 0x2, 0x2, 0x2, 0x453, 
       0x451, 0x3, 0x2, 0x2, 0x2, 0x453, 0x452, 0x3, 0x2, 0x2, 0x2, 0x454, 
       0x71, 0x3, 0x2, 0x2, 0x2, 0x455, 0x458, 0x7, 0xc7, 0x2, 0x2, 0x456, 
       0x457, 0x7, 0x99, 0x2, 0x2, 0x457, 0x459, 0x7, 0x9a, 0x2, 0x2, 0x458, 
       0x456, 0x3, 0x2, 0x2, 0x2, 0x459, 0x45a, 0x3, 0x2, 0x2, 0x2, 0x45a, 
       0x458, 0x3, 0x2, 0x2, 0x2, 0x45a, 0x45b, 0x3, 0x2, 0x2, 0x2, 0x45b, 
       0x73, 0x3, 0x2, 0x2, 0x2, 0x45c, 0x46a, 0x6, 0x3b, 0xa, 0x2, 0x45d, 
       0x46b, 0x5, 0x7c, 0x3f, 0x2, 0x45e, 0x46b, 0x5, 0x80, 0x41, 0x2, 
       0x45f, 0x46b, 0x5, 0x8a, 0x46, 0x2, 0x460, 0x46b, 0x5, 0x8c, 0x47, 
       0x2, 0x461, 0x46b, 0x5, 0x7e, 0x40, 0x2, 0x462, 0x46b, 0x5, 0x82, 
       0x42, 0x2, 0x463, 0x46b, 0x5, 0x84, 0x43, 0x2, 0x464, 0x46b, 0x5, 
       0x86, 0x44, 0x2, 0x465, 0x46b, 0x5, 0x8e, 0x48, 0x2, 0x466, 0x46b, 
       0x5, 0x90, 0x49, 0x2, 0x467, 0x46b, 0x5, 0x92, 0x4a, 0x2, 0x468, 
       0x46b, 0x5, 0x98, 0x4d, 0x2, 0x469, 0x46b, 0x5, 0x94, 0x4b, 0x2, 
       0x46a, 0x45d, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x45e, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x45f, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x460, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x461, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x462, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x463, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x464, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x465, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x466, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x467, 0x3, 0x2, 0x2, 0x2, 0x46a, 0x468, 0x3, 0x2, 0x2, 0x2, 
       0x46a, 0x469, 0x3, 0x2, 0x2, 0x2, 0x46b, 0x75, 0x3, 0x2, 0x2, 0x2, 
       0x46c, 0x46f, 0x6, 0x3c, 0xb, 0x2, 0x46d, 0x470, 0x5, 0x9a, 0x4e, 
       0x2, 0x46e, 0x470, 0x5, 0x9c, 0x4f, 0x2, 0x46f, 0x46d, 0x3, 0x2, 
       0x2, 0x2, 0x46f, 0x46e, 0x3, 0x2, 0x2, 0x2, 0x470, 0x77, 0x3, 0x2, 
       0x2, 0x2, 0x471, 0x472, 0x6, 0x3d, 0xc, 0x2, 0x472, 0x473, 0x7, 0x54, 
       0x2, 0x2, 0x473, 0x474, 0x5, 0xc6, 0x64, 0x2, 0x474, 0x79, 0x3, 0x2, 
       0x2, 0x2, 0x475, 0x476, 0x7, 0x85, 0x2, 0x2, 0x476, 0x477, 0x7, 0x97, 
       0x2, 0x2, 0x477, 0x478, 0x5, 0x6, 0x4, 0x2, 0x478, 0x479, 0x7, 0x98, 
       0x2, 0x2, 0x479, 0x47a, 0x5, 0xc6, 0x64, 0x2, 0x47a, 0x7b, 0x3, 0x2, 
       0x2, 0x2, 0x47b, 0x47c, 0x7, 0x57, 0x2, 0x2, 0x47c, 0x47d, 0x7, 0x97, 
       0x2, 0x2, 0x47d, 0x47e, 0x5, 0x9e, 0x50, 0x2, 0x47e, 0x47f, 0x7, 
       0x98, 0x2, 0x2, 0x47f, 0x480, 0x7, 0xc3, 0x2, 0x2, 0x480, 0x7d, 0x3, 
       0x2, 0x2, 0x2, 0x481, 0x482, 0x7, 0x58, 0x2, 0x2, 0x482, 0x483, 0x7, 
       0x97, 0x2, 0x2, 0x483, 0x484, 0x5, 0x62, 0x32, 0x2, 0x484, 0x485, 
       0x7, 0x98, 0x2, 0x2, 0x485, 0x486, 0x7, 0xc3, 0x2, 0x2, 0x486, 0x7f, 
       0x3, 0x2, 0x2, 0x2, 0x487, 0x488, 0x7, 0x61, 0x2, 0x2, 0x488, 0x489, 
       0x7, 0x97, 0x2, 0x2, 0x489, 0x48a, 0x5, 0x9e, 0x50, 0x2, 0x48a, 0x48b, 
       0x7, 0x98, 0x2, 0x2, 0x48b, 0x48c, 0x7, 0xc3, 0x2, 0x2, 0x48c, 0x81, 
       0x3, 0x2, 0x2, 0x2, 0x48d, 0x48e, 0x7, 0x59, 0x2, 0x2, 0x48e, 0x48f, 
       0x7, 0x97, 0x2, 0x2, 0x48f, 0x490, 0x5, 0x62, 0x32, 0x2, 0x490, 0x491, 
       0x7, 0x98, 0x2, 0x2, 0x491, 0x492, 0x7, 0xc3, 0x2, 0x2, 0x492, 0x83, 
       0x3, 0x2, 0x2, 0x2, 0x493, 0x494, 0x7, 0x64, 0x2, 0x2, 0x494, 0x495, 
       0x7, 0x97, 0x2, 0x2, 0x495, 0x496, 0x5, 0x4, 0x3, 0x2, 0x496, 0x497, 
       0x7, 0x98, 0x2, 0x2, 0x497, 0x498, 0x7, 0xc3, 0x2, 0x2, 0x498, 0x85, 
       0x3, 0x2, 0x2, 0x2, 0x499, 0x49a, 0x7, 0x65, 0x2, 0x2, 0x49a, 0x49b, 
       0x7, 0x97, 0x2, 0x2, 0x49b, 0x49c, 0x5, 0x4, 0x3, 0x2, 0x49c, 0x49d, 
       0x7, 0x98, 0x2, 0x2, 0x49d, 0x49e, 0x7, 0xc3, 0x2, 0x2, 0x49e, 0x87, 
       0x3, 0x2, 0x2, 0x2, 0x49f, 0x4a0, 0x7, 0x56, 0x2, 0x2, 0x4a0, 0x4a1, 
       0x7, 0x97, 0x2, 0x2, 0x4a1, 0x4a2, 0x5, 0x4, 0x3, 0x2, 0x4a2, 0x4a3, 
       0x7, 0x98, 0x2, 0x2, 0x4a3, 0x4a4, 0x5, 0xc6, 0x64, 0x2, 0x4a4, 0x89, 
       0x3, 0x2, 0x2, 0x2, 0x4a5, 0x4a6, 0x7, 0x66, 0x2, 0x2, 0x4a6, 0x4a7, 
       0x7, 0xc3, 0x2, 0x2, 0x4a7, 0x8b, 0x3, 0x2, 0x2, 0x2, 0x4a8, 0x4a9, 
       0x7, 0x20, 0x2, 0x2, 0x4a9, 0x4aa, 0x7, 0xc3, 0x2, 0x2, 0x4aa, 0x8d, 
       0x3, 0x2, 0x2, 0x2, 0x4ab, 0x4ac, 0x7, 0x5b, 0x2, 0x2, 0x4ac, 0x4ad, 
       0x7, 0xc3, 0x2, 0x2, 0x4ad, 0x8f, 0x3, 0x2, 0x2, 0x2, 0x4ae, 0x4af, 
       0x7, 0x5c, 0x2, 0x2, 0x4af, 0x4b0, 0x7, 0xc3, 0x2, 0x2, 0x4b0, 0x91, 
       0x3, 0x2, 0x2, 0x2, 0x4b1, 0x4b2, 0x7, 0x5d, 0x2, 0x2, 0x4b2, 0x4b3, 
       0x7, 0xc3, 0x2, 0x2, 0x4b3, 0x93, 0x3, 0x2, 0x2, 0x2, 0x4b4, 0x4b5, 
       0x7, 0x5a, 0x2, 0x2, 0x4b5, 0x4b6, 0x7, 0xc3, 0x2, 0x2, 0x4b6, 0x95, 
       0x3, 0x2, 0x2, 0x2, 0x4b7, 0x4b8, 0x7, 0x5e, 0x2, 0x2, 0x4b8, 0x4b9, 
       0x7, 0xc3, 0x2, 0x2, 0x4b9, 0x97, 0x3, 0x2, 0x2, 0x2, 0x4ba, 0x4bb, 
       0x7, 0x5f, 0x2, 0x2, 0x4bb, 0x4bc, 0x8, 0x4d, 0x1, 0x2, 0x4bc, 0x4bd, 
       0x7, 0x97, 0x2, 0x2, 0x4bd, 0x4be, 0x5, 0x5e, 0x30, 0x2, 0x4be, 0x4bf, 
       0x7, 0x98, 0x2, 0x2, 0x4bf, 0x4c0, 0x7, 0xc3, 0x2, 0x2, 0x4c0, 0x99, 
       0x3, 0x2, 0x2, 0x2, 0x4c1, 0x4c2, 0x7, 0x83, 0x2, 0x2, 0x4c2, 0x4c3, 
       0x7, 0x97, 0x2, 0x2, 0x4c3, 0x4c4, 0x5, 0x9e, 0x50, 0x2, 0x4c4, 0x4c5, 
       0x7, 0x98, 0x2, 0x2, 0x4c5, 0x4c6, 0x7, 0xc3, 0x2, 0x2, 0x4c6, 0x9b, 
       0x3, 0x2, 0x2, 0x2, 0x4c7, 0x4c8, 0x7, 0x84, 0x2, 0x2, 0x4c8, 0x4c9, 
       0x7, 0x97, 0x2, 0x2, 0x4c9, 0x4ca, 0x5, 0x9e, 0x50, 0x2, 0x4ca, 0x4cb, 
       0x7, 0x98, 0x2, 0x2, 0x4cb, 0x4cc, 0x7, 0xc3, 0x2, 0x2, 0x4cc, 0x9d, 
       0x3, 0x2, 0x2, 0x2, 0x4cd, 0x4cf, 0x5, 0x5e, 0x30, 0x2, 0x4ce, 0x4d0, 
       0x5, 0xa0, 0x51, 0x2, 0x4cf, 0x4ce, 0x3, 0x2, 0x2, 0x2, 0x4cf, 0x4d0, 
       0x3, 0x2, 0x2, 0x2, 0x4d0, 0x4d8, 0x3, 0x2, 0x2, 0x2, 0x4d1, 0x4d2, 
       0x7, 0xbd, 0x2, 0x2, 0x4d2, 0x4d4, 0x5, 0x5e, 0x30, 0x2, 0x4d3, 0x4d5, 
       0x5, 0xa0, 0x51, 0x2, 0x4d4, 0x4d3, 0x3, 0x2, 0x2, 0x2, 0x4d4, 0x4d5, 
       0x3, 0x2, 0x2, 0x2, 0x4d5, 0x4d7, 0x3, 0x2, 0x2, 0x2, 0x4d6, 0x4d1, 
       0x3, 0x2, 0x2, 0x2, 0x4d7, 0x4da, 0x3, 0x2, 0x2, 0x2, 0x4d8, 0x4d6, 
       0x3, 0x2, 0x2, 0x2, 0x4d8, 0x4d9, 0x3, 0x2, 0x2, 0x2, 0x4d9, 0x9f, 
       0x3, 0x2, 0x2, 0x2, 0x4da, 0x4d8, 0x3, 0x2, 0x2, 0x2, 0x4db, 0x4dc, 
       0x7, 0xa7, 0x2, 0x2, 0x4dc, 0xa1, 0x3, 0x2, 0x2, 0x2, 0x4dd, 0x4e1, 
       0x5, 0xa4, 0x53, 0x2, 0x4de, 0x4e1, 0x5, 0xa6, 0x54, 0x2, 0x4df, 
       0x4e1, 0x5, 0xa8, 0x55, 0x2, 0x4e0, 0x4dd, 0x3, 0x2, 0x2, 0x2, 0x4e0, 
       0x4de, 0x3, 0x2, 0x2, 0x2, 0x4e0, 0x4df, 0x3, 0x2, 0x2, 0x2, 0x4e1, 
       0xa3, 0x3, 0x2, 0x2, 0x2, 0x4e2, 0x4e3, 0x7, 0x26, 0x2, 0x2, 0x4e3, 
       0x4e4, 0x5, 0x4, 0x3, 0x2, 0x4e4, 0x4e5, 0x8, 0x53, 0x1, 0x2, 0x4e5, 
       0x4e7, 0x7, 0x97, 0x2, 0x2, 0x4e6, 0x4e8, 0x5, 0x62, 0x32, 0x2, 0x4e7, 
       0x4e6, 0x3, 0x2, 0x2, 0x2, 0x4e7, 0x4e8, 0x3, 0x2, 0x2, 0x2, 0x4e8, 
       0x4e9, 0x3, 0x2, 0x2, 0x2, 0x4e9, 0x4ec, 0x7, 0x98, 0x2, 0x2, 0x4ea, 
       0x4eb, 0x7, 0xa1, 0x2, 0x2, 0x4eb, 0x4ed, 0x5, 0x6, 0x4, 0x2, 0x4ec, 
       0x4ea, 0x3, 0x2, 0x2, 0x2, 0x4ec, 0x4ed, 0x3, 0x2, 0x2, 0x2, 0x4ed, 
       0x4ee, 0x3, 0x2, 0x2, 0x2, 0x4ee, 0x4ef, 0x7, 0xc3, 0x2, 0x2, 0x4ef, 
       0xa5, 0x3, 0x2, 0x2, 0x2, 0x4f0, 0x4f1, 0x5, 0x4, 0x3, 0x2, 0x4f1, 
       0x4f2, 0x7, 0x97, 0x2, 0x2, 0x4f2, 0x4f3, 0x7, 0x99, 0x2, 0x2, 0x4f3, 
       0x4f5, 0x8, 0x54, 0x1, 0x2, 0x4f4, 0x4f6, 0x5, 0x62, 0x32, 0x2, 0x4f5, 
       0x4f4, 0x3, 0x2, 0x2, 0x2, 0x4f5, 0x4f6, 0x3, 0x2, 0x2, 0x2, 0x4f6, 
       0x4f7, 0x3, 0x2, 0x2, 0x2, 0x4f7, 0x4f8, 0x7, 0x9a, 0x2, 0x2, 0x4f8, 
       0x4fb, 0x7, 0x98, 0x2, 0x2, 0x4f9, 0x4fa, 0x7, 0xa1, 0x2, 0x2, 0x4fa, 
       0x4fc, 0x5, 0x6, 0x4, 0x2, 0x4fb, 0x4f9, 0x3, 0x2, 0x2, 0x2, 0x4fb, 
       0x4fc, 0x3, 0x2, 0x2, 0x2, 0x4fc, 0x4fd, 0x3, 0x2, 0x2, 0x2, 0x4fd, 
       0x4fe, 0x7, 0xc3, 0x2, 0x2, 0x4fe, 0xa7, 0x3, 0x2, 0x2, 0x2, 0x4ff, 
       0x500, 0x5, 0x4, 0x3, 0x2, 0x500, 0x502, 0x7, 0x97, 0x2, 0x2, 0x501, 
       0x503, 0x5, 0x62, 0x32, 0x2, 0x502, 0x501, 0x3, 0x2, 0x2, 0x2, 0x502, 
       0x503, 0x3, 0x2, 0x2, 0x2, 0x503, 0x504, 0x3, 0x2, 0x2, 0x2, 0x504, 
       0x505, 0x7, 0x98, 0x2, 0x2, 0x505, 0x506, 0x8, 0x55, 0x1, 0x2, 0x506, 
       0x507, 0x7, 0xa1, 0x2, 0x2, 0x507, 0x508, 0x5, 0x6, 0x4, 0x2, 0x508, 
       0x509, 0x7, 0xc3, 0x2, 0x2, 0x509, 0xa9, 0x3, 0x2, 0x2, 0x2, 0x50a, 
       0x50d, 0x5, 0xac, 0x57, 0x2, 0x50b, 0x50d, 0x5, 0xae, 0x58, 0x2, 
       0x50c, 0x50a, 0x3, 0x2, 0x2, 0x2, 0x50c, 0x50b, 0x3, 0x2, 0x2, 0x2, 
       0x50d, 0xab, 0x3, 0x2, 0x2, 0x2, 0x50e, 0x50f, 0x7, 0x55, 0x2, 0x2, 
       0x50f, 0x510, 0x7, 0x97, 0x2, 0x2, 0x510, 0x511, 0x5, 0x6, 0x4, 0x2, 
       0x511, 0x512, 0x7, 0xbd, 0x2, 0x2, 0x512, 0x513, 0x5, 0xb0, 0x59, 
       0x2, 0x513, 0x514, 0x7, 0x98, 0x2, 0x2, 0x514, 0x515, 0x7, 0xc3, 
       0x2, 0x2, 0x515, 0xad, 0x3, 0x2, 0x2, 0x2, 0x516, 0x51c, 0x8, 0x58, 
       0x1, 0x2, 0x517, 0x518, 0x7, 0x21, 0x2, 0x2, 0x518, 0x519, 0x7, 0x97, 
       0x2, 0x2, 0x519, 0x51a, 0x5, 0x5e, 0x30, 0x2, 0x51a, 0x51b, 0x7, 
       0x98, 0x2, 0x2, 0x51b, 0x51d, 0x3, 0x2, 0x2, 0x2, 0x51c, 0x517, 0x3, 
       0x2, 0x2, 0x2, 0x51c, 0x51d, 0x3, 0x2, 0x2, 0x2, 0x51d, 0x51e, 0x3, 
       0x2, 0x2, 0x2, 0x51e, 0x51f, 0x7, 0x62, 0x2, 0x2, 0x51f, 0x520, 0x7, 
       0x97, 0x2, 0x2, 0x520, 0x521, 0x5, 0x6, 0x4, 0x2, 0x521, 0x522, 0x7, 
       0xbd, 0x2, 0x2, 0x522, 0x523, 0x5, 0xb0, 0x59, 0x2, 0x523, 0x524, 
       0x7, 0x98, 0x2, 0x2, 0x524, 0x525, 0x7, 0xc3, 0x2, 0x2, 0x525, 0xaf, 
       0x3, 0x2, 0x2, 0x2, 0x526, 0x529, 0x5, 0xb2, 0x5a, 0x2, 0x527, 0x529, 
       0x5, 0xb4, 0x5b, 0x2, 0x528, 0x526, 0x3, 0x2, 0x2, 0x2, 0x528, 0x527, 
       0x3, 0x2, 0x2, 0x2, 0x529, 0xb1, 0x3, 0x2, 0x2, 0x2, 0x52a, 0x52b, 
       0x5, 0x6, 0x4, 0x2, 0x52b, 0x52c, 0x6, 0x5a, 0xd, 0x3, 0x52c, 0x52d, 
       0x7, 0xbd, 0x2, 0x2, 0x52d, 0x52e, 0x5, 0xc0, 0x61, 0x2, 0x52e, 0xb3, 
       0x3, 0x2, 0x2, 0x2, 0x52f, 0x534, 0x5, 0xc0, 0x61, 0x2, 0x530, 0x531, 
       0x9, 0x11, 0x2, 0x2, 0x531, 0x533, 0x5, 0xc0, 0x61, 0x2, 0x532, 0x530, 
       0x3, 0x2, 0x2, 0x2, 0x533, 0x536, 0x3, 0x2, 0x2, 0x2, 0x534, 0x532, 
       0x3, 0x2, 0x2, 0x2, 0x534, 0x535, 0x3, 0x2, 0x2, 0x2, 0x535, 0xb5, 
       0x3, 0x2, 0x2, 0x2, 0x536, 0x534, 0x3, 0x2, 0x2, 0x2, 0x537, 0x53d, 
       0x8, 0x5c, 0x1, 0x2, 0x538, 0x539, 0x7, 0x21, 0x2, 0x2, 0x539, 0x53a, 
       0x7, 0x97, 0x2, 0x2, 0x53a, 0x53b, 0x5, 0x5e, 0x30, 0x2, 0x53b, 0x53c, 
       0x7, 0x98, 0x2, 0x2, 0x53c, 0x53e, 0x3, 0x2, 0x2, 0x2, 0x53d, 0x538, 
       0x3, 0x2, 0x2, 0x2, 0x53d, 0x53e, 0x3, 0x2, 0x2, 0x2, 0x53e, 0x53f, 
       0x3, 0x2, 0x2, 0x2, 0x53f, 0x540, 0x7, 0x67, 0x2, 0x2, 0x540, 0x542, 
       0x7, 0x9b, 0x2, 0x2, 0x541, 0x543, 0x5, 0xb8, 0x5d, 0x2, 0x542, 0x541, 
       0x3, 0x2, 0x2, 0x2, 0x543, 0x544, 0x3, 0x2, 0x2, 0x2, 0x544, 0x542, 
       0x3, 0x2, 0x2, 0x2, 0x544, 0x545, 0x3, 0x2, 0x2, 0x2, 0x545, 0x546, 
       0x3, 0x2, 0x2, 0x2, 0x546, 0x549, 0x7, 0x9c, 0x2, 0x2, 0x547, 0x548, 
       0x7, 0xa1, 0x2, 0x2, 0x548, 0x54a, 0x5, 0x6, 0x4, 0x2, 0x549, 0x547, 
       0x3, 0x2, 0x2, 0x2, 0x549, 0x54a, 0x3, 0x2, 0x2, 0x2, 0x54a, 0x54b, 
       0x3, 0x2, 0x2, 0x2, 0x54b, 0x54c, 0x7, 0xc3, 0x2, 0x2, 0x54c, 0xb7, 
       0x3, 0x2, 0x2, 0x2, 0x54d, 0x550, 0x5, 0xba, 0x5e, 0x2, 0x54e, 0x550, 
       0x5, 0xbc, 0x5f, 0x2, 0x54f, 0x54d, 0x3, 0x2, 0x2, 0x2, 0x54f, 0x54e, 
       0x3, 0x2, 0x2, 0x2, 0x550, 0x551, 0x3, 0x2, 0x2, 0x2, 0x551, 0x552, 
       0x7, 0xc3, 0x2, 0x2, 0x552, 0xb9, 0x3, 0x2, 0x2, 0x2, 0x553, 0x554, 
       0x7, 0x62, 0x2, 0x2, 0x554, 0x555, 0x7, 0x97, 0x2, 0x2, 0x555, 0x55a, 
       0x5, 0xbe, 0x60, 0x2, 0x556, 0x557, 0x9, 0x11, 0x2, 0x2, 0x557, 0x559, 
       0x5, 0xbe, 0x60, 0x2, 0x558, 0x556, 0x3, 0x2, 0x2, 0x2, 0x559, 0x55c, 
       0x3, 0x2, 0x2, 0x2, 0x55a, 0x558, 0x3, 0x2, 0x2, 0x2, 0x55a, 0x55b, 
       0x3, 0x2, 0x2, 0x2, 0x55b, 0x55d, 0x3, 0x2, 0x2, 0x2, 0x55c, 0x55a, 
       0x3, 0x2, 0x2, 0x2, 0x55d, 0x55e, 0x7, 0x98, 0x2, 0x2, 0x55e, 0xbb, 
       0x3, 0x2, 0x2, 0x2, 0x55f, 0x560, 0x7, 0x63, 0x2, 0x2, 0x560, 0x561, 
       0x7, 0x97, 0x2, 0x2, 0x561, 0x562, 0x5, 0xbe, 0x60, 0x2, 0x562, 0x563, 
       0x9, 0x11, 0x2, 0x2, 0x563, 0x564, 0x5, 0xbe, 0x60, 0x2, 0x564, 0x565, 
       0x7, 0x98, 0x2, 0x2, 0x565, 0xbd, 0x3, 0x2, 0x2, 0x2, 0x566, 0x56e, 
       0x7, 0xc7, 0x2, 0x2, 0x567, 0x569, 0x7, 0x99, 0x2, 0x2, 0x568, 0x56a, 
       0x7, 0x3, 0x2, 0x2, 0x569, 0x568, 0x3, 0x2, 0x2, 0x2, 0x56a, 0x56b, 
       0x3, 0x2, 0x2, 0x2, 0x56b, 0x569, 0x3, 0x2, 0x2, 0x2, 0x56b, 0x56c, 
       0x3, 0x2, 0x2, 0x2, 0x56c, 0x56d, 0x3, 0x2, 0x2, 0x2, 0x56d, 0x56f, 
       0x7, 0x9a, 0x2, 0x2, 0x56e, 0x567, 0x3, 0x2, 0x2, 0x2, 0x56e, 0x56f, 
       0x3, 0x2, 0x2, 0x2, 0x56f, 0x570, 0x3, 0x2, 0x2, 0x2, 0x570, 0x571, 
       0x8, 0x60, 0x1, 0x2, 0x571, 0x573, 0x7, 0x97, 0x2, 0x2, 0x572, 0x574, 
       0x5, 0x62, 0x32, 0x2, 0x573, 0x572, 0x3, 0x2, 0x2, 0x2, 0x573, 0x574, 
       0x3, 0x2, 0x2, 0x2, 0x574, 0x575, 0x3, 0x2, 0x2, 0x2, 0x575, 0x578, 
       0x7, 0x98, 0x2, 0x2, 0x576, 0x577, 0x7, 0xa1, 0x2, 0x2, 0x577, 0x579, 
       0x5, 0x6, 0x4, 0x2, 0x578, 0x576, 0x3, 0x2, 0x2, 0x2, 0x578, 0x579, 
       0x3, 0x2, 0x2, 0x2, 0x579, 0xbf, 0x3, 0x2, 0x2, 0x2, 0x57a, 0x57b, 
       0x7, 0xc7, 0x2, 0x2, 0x57b, 0x57c, 0x8, 0x61, 0x1, 0x2, 0x57c, 0x57e, 
       0x7, 0x97, 0x2, 0x2, 0x57d, 0x57f, 0x5, 0x62, 0x32, 0x2, 0x57e, 0x57d, 
       0x3, 0x2, 0x2, 0x2, 0x57e, 0x57f, 0x3, 0x2, 0x2, 0x2, 0x57f, 0x580, 
       0x3, 0x2, 0x2, 0x2, 0x580, 0x583, 0x7, 0x98, 0x2, 0x2, 0x581, 0x582, 
       0x7, 0xa1, 0x2, 0x2, 0x582, 0x584, 0x5, 0x6, 0x4, 0x2, 0x583, 0x581, 
       0x3, 0x2, 0x2, 0x2, 0x583, 0x584, 0x3, 0x2, 0x2, 0x2, 0x584, 0xc1, 
       0x3, 0x2, 0x2, 0x2, 0x585, 0x586, 0x5, 0x10, 0x9, 0x2, 0x586, 0x588, 
       0x7, 0x97, 0x2, 0x2, 0x587, 0x589, 0x5, 0x62, 0x32, 0x2, 0x588, 0x587, 
       0x3, 0x2, 0x2, 0x2, 0x588, 0x589, 0x3, 0x2, 0x2, 0x2, 0x589, 0x58a, 
       0x3, 0x2, 0x2, 0x2, 0x58a, 0x58b, 0x7, 0x98, 0x2, 0x2, 0x58b, 0x58c, 
       0x7, 0xc3, 0x2, 0x2, 0x58c, 0xc3, 0x3, 0x2, 0x2, 0x2, 0x58d, 0x58f, 
       0x5, 0x62, 0x32, 0x2, 0x58e, 0x58d, 0x3, 0x2, 0x2, 0x2, 0x58e, 0x58f, 
       0x3, 0x2, 0x2, 0x2, 0x58f, 0x590, 0x3, 0x2, 0x2, 0x2, 0x590, 0x591, 
       0x7, 0xc3, 0x2, 0x2, 0x591, 0xc5, 0x3, 0x2, 0x2, 0x2, 0x592, 0x594, 
       0x7, 0x9b, 0x2, 0x2, 0x593, 0x595, 0x5, 0xc8, 0x65, 0x2, 0x594, 0x593, 
       0x3, 0x2, 0x2, 0x2, 0x594, 0x595, 0x3, 0x2, 0x2, 0x2, 0x595, 0x596, 
       0x3, 0x2, 0x2, 0x2, 0x596, 0x597, 0x7, 0x9c, 0x2, 0x2, 0x597, 0xc7, 
       0x3, 0x2, 0x2, 0x2, 0x598, 0x59a, 0x5, 0x66, 0x34, 0x2, 0x599, 0x598, 
       0x3, 0x2, 0x2, 0x2, 0x59a, 0x59b, 0x3, 0x2, 0x2, 0x2, 0x59b, 0x599, 
       0x3, 0x2, 0x2, 0x2, 0x59b, 0x59c, 0x3, 0x2, 0x2, 0x2, 0x59c, 0xc9, 
       0x3, 0x2, 0x2, 0x2, 0x59d, 0x59e, 0x7, 0x42, 0x2, 0x2, 0x59e, 0x59f, 
       0x7, 0x97, 0x2, 0x2, 0x59f, 0x5a0, 0x5, 0xcc, 0x67, 0x2, 0x5a0, 0x5a1, 
       0x7, 0x98, 0x2, 0x2, 0x5a1, 0x5a4, 0x5, 0x66, 0x34, 0x2, 0x5a2, 0x5a3, 
       0x7, 0x30, 0x2, 0x2, 0x5a3, 0x5a5, 0x5, 0x66, 0x34, 0x2, 0x5a4, 0x5a2, 
       0x3, 0x2, 0x2, 0x2, 0x5a4, 0x5a5, 0x3, 0x2, 0x2, 0x2, 0x5a5, 0x5ad, 
       0x3, 0x2, 0x2, 0x2, 0x5a6, 0x5a7, 0x7, 0x7e, 0x2, 0x2, 0x5a7, 0x5a8, 
       0x7, 0x97, 0x2, 0x2, 0x5a8, 0x5a9, 0x5, 0xcc, 0x67, 0x2, 0x5a9, 0x5aa, 
       0x7, 0x98, 0x2, 0x2, 0x5aa, 0x5ab, 0x5, 0x66, 0x34, 0x2, 0x5ab, 0x5ad, 
       0x3, 0x2, 0x2, 0x2, 0x5ac, 0x59d, 0x3, 0x2, 0x2, 0x2, 0x5ac, 0x5a6, 
       0x3, 0x2, 0x2, 0x2, 0x5ad, 0xcb, 0x3, 0x2, 0x2, 0x2, 0x5ae, 0x5ba, 
       0x5, 0x62, 0x32, 0x2, 0x5af, 0x5b1, 0x5, 0x144, 0xa3, 0x2, 0x5b0, 
       0x5af, 0x3, 0x2, 0x2, 0x2, 0x5b0, 0x5b1, 0x3, 0x2, 0x2, 0x2, 0x5b1, 
       0x5b2, 0x3, 0x2, 0x2, 0x2, 0x5b2, 0x5b3, 0x5, 0xec, 0x77, 0x2, 0x5b3, 
       0x5b7, 0x5, 0x15a, 0xae, 0x2, 0x5b4, 0x5b5, 0x7, 0xa8, 0x2, 0x2, 
       0x5b5, 0x5b8, 0x5, 0x1ba, 0xde, 0x2, 0x5b6, 0x5b8, 0x5, 0x1be, 0xe0, 
       0x2, 0x5b7, 0x5b4, 0x3, 0x2, 0x2, 0x2, 0x5b7, 0x5b6, 0x3, 0x2, 0x2, 
       0x2, 0x5b8, 0x5ba, 0x3, 0x2, 0x2, 0x2, 0x5b9, 0x5ae, 0x3, 0x2, 0x2, 
       0x2, 0x5b9, 0x5b0, 0x3, 0x2, 0x2, 0x2, 0x5ba, 0xcd, 0x3, 0x2, 0x2, 
       0x2, 0x5bb, 0x5bc, 0x7, 0x93, 0x2, 0x2, 0x5bc, 0x5bd, 0x7, 0x97, 
       0x2, 0x2, 0x5bd, 0x5be, 0x5, 0xcc, 0x67, 0x2, 0x5be, 0x5bf, 0x7, 
       0x98, 0x2, 0x2, 0x5bf, 0x5c0, 0x5, 0x66, 0x34, 0x2, 0x5c0, 0x5dd, 
       0x3, 0x2, 0x2, 0x2, 0x5c1, 0x5c2, 0x7, 0x2d, 0x2, 0x2, 0x5c2, 0x5c3, 
       0x5, 0x66, 0x34, 0x2, 0x5c3, 0x5c4, 0x7, 0x93, 0x2, 0x2, 0x5c4, 0x5c5, 
       0x7, 0x97, 0x2, 0x2, 0x5c5, 0x5c6, 0x5, 0x62, 0x32, 0x2, 0x5c6, 0x5c7, 
       0x7, 0x98, 0x2, 0x2, 0x5c7, 0x5c8, 0x7, 0xc3, 0x2, 0x2, 0x5c8, 0x5dd, 
       0x3, 0x2, 0x2, 0x2, 0x5c9, 0x5ca, 0x7, 0x39, 0x2, 0x2, 0x5ca, 0x5d7, 
       0x7, 0x97, 0x2, 0x2, 0x5cb, 0x5cd, 0x5, 0xd0, 0x69, 0x2, 0x5cc, 0x5ce, 
       0x5, 0xcc, 0x67, 0x2, 0x5cd, 0x5cc, 0x3, 0x2, 0x2, 0x2, 0x5cd, 0x5ce, 
       0x3, 0x2, 0x2, 0x2, 0x5ce, 0x5cf, 0x3, 0x2, 0x2, 0x2, 0x5cf, 0x5d1, 
       0x7, 0xc3, 0x2, 0x2, 0x5d0, 0x5d2, 0x5, 0x62, 0x32, 0x2, 0x5d1, 0x5d0, 
       0x3, 0x2, 0x2, 0x2, 0x5d1, 0x5d2, 0x3, 0x2, 0x2, 0x2, 0x5d2, 0x5d8, 
       0x3, 0x2, 0x2, 0x2, 0x5d3, 0x5d4, 0x5, 0xd2, 0x6a, 0x2, 0x5d4, 0x5d5, 
       0x7, 0xc1, 0x2, 0x2, 0x5d5, 0x5d6, 0x5, 0xd4, 0x6b, 0x2, 0x5d6, 0x5d8, 
       0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5cb, 0x3, 0x2, 0x2, 0x2, 0x5d7, 0x5d3, 
       0x3, 0x2, 0x2, 0x2, 0x5d8, 0x5d9, 0x3, 0x2, 0x2, 0x2, 0x5d9, 0x5da, 
       0x7, 0x98, 0x2, 0x2, 0x5da, 0x5db, 0x5, 0x66, 0x34, 0x2, 0x5db, 0x5dd, 
       0x3, 0x2, 0x2, 0x2, 0x5dc, 0x5bb, 0x3, 0x2, 0x2, 0x2, 0x5dc, 0x5c1, 
       0x3, 0x2, 0x2, 0x2, 0x5dc, 0x5c9, 0x3, 0x2, 0x2, 0x2, 0x5dd, 0xcf, 
       0x3, 0x2, 0x2, 0x2, 0x5de, 0x5e1, 0x5, 0xc4, 0x63, 0x2, 0x5df, 0x5e1, 
       0x5, 0xe2, 0x72, 0x2, 0x5e0, 0x5de, 0x3, 0x2, 0x2, 0x2, 0x5e0, 0x5df, 
       0x3, 0x2, 0x2, 0x2, 0x5e1, 0xd1, 0x3, 0x2, 0x2, 0x2, 0x5e2, 0x5e4, 
       0x5, 0x144, 0xa3, 0x2, 0x5e3, 0x5e2, 0x3, 0x2, 0x2, 0x2, 0x5e3, 0x5e4, 
       0x3, 0x2, 0x2, 0x2, 0x5e4, 0x5e5, 0x3, 0x2, 0x2, 0x2, 0x5e5, 0x5e6, 
       0x5, 0xec, 0x77, 0x2, 0x5e6, 0x5e7, 0x5, 0x15a, 0xae, 0x2, 0x5e7, 
       0xd3, 0x3, 0x2, 0x2, 0x2, 0x5e8, 0x5eb, 0x5, 0x62, 0x32, 0x2, 0x5e9, 
       0x5eb, 0x5, 0x1be, 0xe0, 0x2, 0x5ea, 0x5e8, 0x3, 0x2, 0x2, 0x2, 0x5ea, 
       0x5e9, 0x3, 0x2, 0x2, 0x2, 0x5eb, 0xd5, 0x3, 0x2, 0x2, 0x2, 0x5ec, 
       0x5f6, 0x7, 0x17, 0x2, 0x2, 0x5ed, 0x5f6, 0x7, 0x26, 0x2, 0x2, 0x5ee, 
       0x5f1, 0x7, 0x71, 0x2, 0x2, 0x5ef, 0x5f2, 0x5, 0x62, 0x32, 0x2, 0x5f0, 
       0x5f2, 0x5, 0x1be, 0xe0, 0x2, 0x5f1, 0x5ef, 0x3, 0x2, 0x2, 0x2, 0x5f1, 
       0x5f0, 0x3, 0x2, 0x2, 0x2, 0x5f1, 0x5f2, 0x3, 0x2, 0x2, 0x2, 0x5f2, 
       0x5f6, 0x3, 0x2, 0x2, 0x2, 0x5f3, 0x5f4, 0x7, 0x3e, 0x2, 0x2, 0x5f4, 
       0x5f6, 0x5, 0x4, 0x3, 0x2, 0x5f5, 0x5ec, 0x3, 0x2, 0x2, 0x2, 0x5f5, 
       0x5ed, 0x3, 0x2, 0x2, 0x2, 0x5f5, 0x5ee, 0x3, 0x2, 0x2, 0x2, 0x5f5, 
       0x5f3, 0x3, 0x2, 0x2, 0x2, 0x5f6, 0x5f7, 0x3, 0x2, 0x2, 0x2, 0x5f7, 
       0x5f8, 0x7, 0xc3, 0x2, 0x2, 0x5f8, 0xd7, 0x3, 0x2, 0x2, 0x2, 0x5f9, 
       0x5fa, 0x5, 0xde, 0x70, 0x2, 0x5fa, 0xd9, 0x3, 0x2, 0x2, 0x2, 0x5fb, 
       0x5fd, 0x5, 0xdc, 0x6f, 0x2, 0x5fc, 0x5fb, 0x3, 0x2, 0x2, 0x2, 0x5fd, 
       0x5fe, 0x3, 0x2, 0x2, 0x2, 0x5fe, 0x5fc, 0x3, 0x2, 0x2, 0x2, 0x5fe, 
       0x5ff, 0x3, 0x2, 0x2, 0x2, 0x5ff, 0xdb, 0x3, 0x2, 0x2, 0x2, 0x600, 
       0x60f, 0x5, 0x226, 0x114, 0x2, 0x601, 0x60f, 0x5, 0x182, 0xc2, 0x2, 
       0x602, 0x60f, 0x5, 0x180, 0xc1, 0x2, 0x603, 0x60f, 0x5, 0x1ac, 0xd7, 
       0x2, 0x604, 0x60f, 0x5, 0x1aa, 0xd6, 0x2, 0x605, 0x60f, 0x5, 0x1b0, 
       0xd9, 0x2, 0x606, 0x60f, 0x5, 0xde, 0x70, 0x2, 0x607, 0x60f, 0x5, 
       0x1fa, 0xfe, 0x2, 0x608, 0x60f, 0x5, 0x20e, 0x108, 0x2, 0x609, 0x60f, 
       0x5, 0x210, 0x109, 0x2, 0x60a, 0x60f, 0x5, 0x142, 0xa2, 0x2, 0x60b, 
       0x60f, 0x5, 0x134, 0x9b, 0x2, 0x60c, 0x60f, 0x5, 0xe6, 0x74, 0x2, 
       0x60d, 0x60f, 0x5, 0xe8, 0x75, 0x2, 0x60e, 0x600, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x601, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x602, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x603, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x604, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x605, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x606, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x607, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x608, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x609, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x60a, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x60b, 0x3, 0x2, 0x2, 0x2, 0x60e, 0x60c, 0x3, 0x2, 0x2, 
       0x2, 0x60e, 0x60d, 0x3, 0x2, 0x2, 0x2, 0x60f, 0xdd, 0x3, 0x2, 0x2, 
       0x2, 0x610, 0x619, 0x5, 0xe2, 0x72, 0x2, 0x611, 0x619, 0x5, 0x140, 
       0xa1, 0x2, 0x612, 0x619, 0x5, 0x138, 0x9d, 0x2, 0x613, 0x619, 0x5, 
       0x13c, 0x9f, 0x2, 0x614, 0x619, 0x5, 0x13e, 0xa0, 0x2, 0x615, 0x619, 
       0x5, 0xe4, 0x73, 0x2, 0x616, 0x619, 0x5, 0xe0, 0x71, 0x2, 0x617, 
       0x619, 0x5, 0x124, 0x93, 0x2, 0x618, 0x610, 0x3, 0x2, 0x2, 0x2, 0x618, 
       0x611, 0x3, 0x2, 0x2, 0x2, 0x618, 0x612, 0x3, 0x2, 0x2, 0x2, 0x618, 
       0x613, 0x3, 0x2, 0x2, 0x2, 0x618, 0x614, 0x3, 0x2, 0x2, 0x2, 0x618, 
       0x615, 0x3, 0x2, 0x2, 0x2, 0x618, 0x616, 0x3, 0x2, 0x2, 0x2, 0x618, 
       0x617, 0x3, 0x2, 0x2, 0x2, 0x619, 0xdf, 0x3, 0x2, 0x2, 0x2, 0x61a, 
       0x61b, 0x7, 0x8d, 0x2, 0x2, 0x61b, 0x61d, 0x5, 0x4, 0x3, 0x2, 0x61c, 
       0x61e, 0x5, 0x144, 0xa3, 0x2, 0x61d, 0x61c, 0x3, 0x2, 0x2, 0x2, 0x61d, 
       0x61e, 0x3, 0x2, 0x2, 0x2, 0x61e, 0x61f, 0x3, 0x2, 0x2, 0x2, 0x61f, 
       0x620, 0x7, 0xa8, 0x2, 0x2, 0x620, 0x621, 0x5, 0x16e, 0xb8, 0x2, 
       0x621, 0x622, 0x7, 0xc3, 0x2, 0x2, 0x622, 0xe1, 0x3, 0x2, 0x2, 0x2, 
       0x623, 0x625, 0x5, 0xec, 0x77, 0x2, 0x624, 0x626, 0x5, 0x156, 0xac, 
       0x2, 0x625, 0x624, 0x3, 0x2, 0x2, 0x2, 0x625, 0x626, 0x3, 0x2, 0x2, 
       0x2, 0x626, 0x628, 0x3, 0x2, 0x2, 0x2, 0x627, 0x623, 0x3, 0x2, 0x2, 
       0x2, 0x627, 0x628, 0x3, 0x2, 0x2, 0x2, 0x628, 0x629, 0x3, 0x2, 0x2, 
       0x2, 0x629, 0x630, 0x7, 0xc3, 0x2, 0x2, 0x62a, 0x62b, 0x5, 0x144, 
       0xa3, 0x2, 0x62b, 0x62c, 0x5, 0xec, 0x77, 0x2, 0x62c, 0x62d, 0x5, 
       0x156, 0xac, 0x2, 0x62d, 0x62e, 0x7, 0xc3, 0x2, 0x2, 0x62e, 0x630, 
       0x3, 0x2, 0x2, 0x2, 0x62f, 0x627, 0x3, 0x2, 0x2, 0x2, 0x62f, 0x62a, 
       0x3, 0x2, 0x2, 0x2, 0x630, 0xe3, 0x3, 0x2, 0x2, 0x2, 0x631, 0x632, 
       0x7, 0x7b, 0x2, 0x2, 0x632, 0x633, 0x7, 0x97, 0x2, 0x2, 0x633, 0x634, 
       0x5, 0x64, 0x33, 0x2, 0x634, 0x635, 0x7, 0xbd, 0x2, 0x2, 0x635, 0x636, 
       0x7, 0x6, 0x2, 0x2, 0x636, 0x637, 0x7, 0x98, 0x2, 0x2, 0x637, 0x638, 
       0x7, 0xc3, 0x2, 0x2, 0x638, 0xe5, 0x3, 0x2, 0x2, 0x2, 0x639, 0x63a, 
       0x7, 0xc3, 0x2, 0x2, 0x63a, 0xe7, 0x3, 0x2, 0x2, 0x2, 0x63b, 0x63c, 
       0x5, 0x144, 0xa3, 0x2, 0x63c, 0x63d, 0x7, 0xc3, 0x2, 0x2, 0x63d, 
       0xe9, 0x3, 0x2, 0x2, 0x2, 0x63e, 0x646, 0x7, 0x3a, 0x2, 0x2, 0x63f, 
       0x646, 0x7, 0x88, 0x2, 0x2, 0x640, 0x646, 0x7, 0x4a, 0x2, 0x2, 0x641, 
       0x646, 0x7, 0x24, 0x2, 0x2, 0x642, 0x646, 0x5, 0x104, 0x83, 0x2, 
       0x643, 0x646, 0x5, 0x10a, 0x86, 0x2, 0x644, 0x646, 0x5, 0x106, 0x84, 
       0x2, 0x645, 0x63e, 0x3, 0x2, 0x2, 0x2, 0x645, 0x63f, 0x3, 0x2, 0x2, 
       0x2, 0x645, 0x640, 0x3, 0x2, 0x2, 0x2, 0x645, 0x641, 0x3, 0x2, 0x2, 
       0x2, 0x645, 0x642, 0x3, 0x2, 0x2, 0x2, 0x645, 0x643, 0x3, 0x2, 0x2, 
       0x2, 0x645, 0x644, 0x3, 0x2, 0x2, 0x2, 0x646, 0xeb, 0x3, 0x2, 0x2, 
       0x2, 0x647, 0x649, 0x5, 0xea, 0x76, 0x2, 0x648, 0x647, 0x3, 0x2, 
       0x2, 0x2, 0x649, 0x64a, 0x3, 0x2, 0x2, 0x2, 0x64a, 0x64b, 0x3, 0x2, 
       0x2, 0x2, 0x64a, 0x648, 0x3, 0x2, 0x2, 0x2, 0x64b, 0x64d, 0x3, 0x2, 
       0x2, 0x2, 0x64c, 0x64e, 0x5, 0x144, 0xa3, 0x2, 0x64d, 0x64c, 0x3, 
       0x2, 0x2, 0x2, 0x64d, 0x64e, 0x3, 0x2, 0x2, 0x2, 0x64e, 0xed, 0x3, 
       0x2, 0x2, 0x2, 0x64f, 0x65a, 0x5, 0xf0, 0x79, 0x2, 0x650, 0x65a, 
       0x5, 0xf2, 0x7a, 0x2, 0x651, 0x65a, 0x5, 0xf4, 0x7b, 0x2, 0x652, 
       0x65a, 0x5, 0xf6, 0x7c, 0x2, 0x653, 0x65a, 0x5, 0xf8, 0x7d, 0x2, 
       0x654, 0x65a, 0x5, 0xfa, 0x7e, 0x2, 0x655, 0x65a, 0x5, 0xfc, 0x7f, 
       0x2, 0x656, 0x65a, 0x5, 0xfe, 0x80, 0x2, 0x657, 0x65a, 0x5, 0x100, 
       0x81, 0x2, 0x658, 0x65a, 0x5, 0x102, 0x82, 0x2, 0x659, 0x64f, 0x3, 
       0x2, 0x2, 0x2, 0x659, 0x650, 0x3, 0x2, 0x2, 0x2, 0x659, 0x651, 0x3, 
       0x2, 0x2, 0x2, 0x659, 0x652, 0x3, 0x2, 0x2, 0x2, 0x659, 0x653, 0x3, 
       0x2, 0x2, 0x2, 0x659, 0x654, 0x3, 0x2, 0x2, 0x2, 0x659, 0x655, 0x3, 
       0x2, 0x2, 0x2, 0x659, 0x656, 0x3, 0x2, 0x2, 0x2, 0x659, 0x657, 0x3, 
       0x2, 0x2, 0x2, 0x659, 0x658, 0x3, 0x2, 0x2, 0x2, 0x65a, 0xef, 0x3, 
       0x2, 0x2, 0x2, 0x65b, 0x65c, 0x7, 0x3b, 0x2, 0x2, 0x65c, 0x65d, 0x7, 
       0x97, 0x2, 0x2, 0x65d, 0x65e, 0x9, 0x12, 0x2, 0x2, 0x65e, 0x65f, 
       0x7, 0xbd, 0x2, 0x2, 0x65f, 0x660, 0x5, 0x116, 0x8c, 0x2, 0x660, 
       0x661, 0x7, 0x98, 0x2, 0x2, 0x661, 0xf1, 0x3, 0x2, 0x2, 0x2, 0x662, 
       0x663, 0x7, 0x1a, 0x2, 0x2, 0x663, 0x664, 0x8, 0x7a, 0x1, 0x2, 0x664, 
       0x665, 0x7, 0x97, 0x2, 0x2, 0x665, 0x666, 0x9, 0x12, 0x2, 0x2, 0x666, 
       0x667, 0x7, 0xbd, 0x2, 0x2, 0x667, 0x668, 0x5, 0x116, 0x8c, 0x2, 
       0x668, 0x669, 0x7, 0x98, 0x2, 0x2, 0x669, 0xf3, 0x3, 0x2, 0x2, 0x2, 
       0x66a, 0x66b, 0x7, 0x28, 0x2, 0x2, 0x66b, 0x66c, 0x8, 0x7b, 0x1, 
       0x2, 0x66c, 0x66d, 0x7, 0x97, 0x2, 0x2, 0x66d, 0x66e, 0x5, 0x116, 
       0x8c, 0x2, 0x66e, 0x66f, 0x7, 0x98, 0x2, 0x2, 0x66f, 0xf5, 0x3, 0x2, 
       0x2, 0x2, 0x670, 0x671, 0x7, 0x27, 0x2, 0x2, 0x671, 0x672, 0x8, 0x7c, 
       0x1, 0x2, 0x672, 0xf7, 0x3, 0x2, 0x2, 0x2, 0x673, 0x674, 0x7, 0x76, 
       0x2, 0x2, 0x674, 0x675, 0x7, 0x97, 0x2, 0x2, 0x675, 0x676, 0x5, 0x116, 
       0x8c, 0x2, 0x676, 0x677, 0x7, 0x98, 0x2, 0x2, 0x677, 0xf9, 0x3, 0x2, 
       0x2, 0x2, 0x678, 0x679, 0x7, 0x79, 0x2, 0x2, 0x679, 0x67a, 0x7, 0x97, 
       0x2, 0x2, 0x67a, 0x67b, 0x5, 0x116, 0x8c, 0x2, 0x67b, 0x67c, 0x7, 
       0x98, 0x2, 0x2, 0x67c, 0xfb, 0x3, 0x2, 0x2, 0x2, 0x67d, 0x67e, 0x7, 
       0x77, 0x2, 0x2, 0x67e, 0x67f, 0x7, 0x97, 0x2, 0x2, 0x67f, 0x680, 
       0x5, 0x116, 0x8c, 0x2, 0x680, 0x681, 0x7, 0x98, 0x2, 0x2, 0x681, 
       0xfd, 0x3, 0x2, 0x2, 0x2, 0x682, 0x683, 0x7, 0x78, 0x2, 0x2, 0x683, 
       0x684, 0x7, 0x97, 0x2, 0x2, 0x684, 0x685, 0x5, 0x116, 0x8c, 0x2, 
       0x685, 0x686, 0x7, 0x98, 0x2, 0x2, 0x686, 0xff, 0x3, 0x2, 0x2, 0x2, 
       0x687, 0x688, 0x7, 0x68, 0x2, 0x2, 0x688, 0x689, 0x7, 0x97, 0x2, 
       0x2, 0x689, 0x68a, 0x7, 0xc7, 0x2, 0x2, 0x68a, 0x68b, 0x8, 0x81, 
       0x1, 0x2, 0x68b, 0x68c, 0x7, 0x98, 0x2, 0x2, 0x68c, 0x101, 0x3, 0x2, 
       0x2, 0x2, 0x68d, 0x68e, 0x7, 0x60, 0x2, 0x2, 0x68e, 0x68f, 0x7, 0x97, 
       0x2, 0x2, 0x68f, 0x690, 0x7, 0xc7, 0x2, 0x2, 0x690, 0x691, 0x8, 0x82, 
       0x1, 0x2, 0x691, 0x692, 0x7, 0x98, 0x2, 0x2, 0x692, 0x103, 0x3, 0x2, 
       0x2, 0x2, 0x693, 0x694, 0x9, 0x13, 0x2, 0x2, 0x694, 0x105, 0x3, 0x2, 
       0x2, 0x2, 0x695, 0x696, 0x9, 0x14, 0x2, 0x2, 0x696, 0x107, 0x3, 0x2, 
       0x2, 0x2, 0x697, 0x698, 0x5, 0x4, 0x3, 0x2, 0x698, 0x109, 0x3, 0x2, 
       0x2, 0x2, 0x699, 0x69e, 0x5, 0xee, 0x78, 0x2, 0x69a, 0x69e, 0x5, 
       0x1c2, 0xe2, 0x2, 0x69b, 0x69e, 0x5, 0x10c, 0x87, 0x2, 0x69c, 0x69e, 
       0x5, 0x120, 0x91, 0x2, 0x69d, 0x699, 0x3, 0x2, 0x2, 0x2, 0x69d, 0x69a, 
       0x3, 0x2, 0x2, 0x2, 0x69d, 0x69b, 0x3, 0x2, 0x2, 0x2, 0x69d, 0x69c, 
       0x3, 0x2, 0x2, 0x2, 0x69e, 0x10b, 0x3, 0x2, 0x2, 0x2, 0x69f, 0x6a4, 
       0x5, 0x11c, 0x8f, 0x2, 0x6a0, 0x6a4, 0x5, 0x20c, 0x107, 0x2, 0x6a1, 
       0x6a4, 0x5, 0x168, 0xb5, 0x2, 0x6a2, 0x6a4, 0x5, 0x116, 0x8c, 0x2, 
       0x6a3, 0x69f, 0x3, 0x2, 0x2, 0x2, 0x6a3, 0x6a0, 0x3, 0x2, 0x2, 0x2, 
       0x6a3, 0x6a1, 0x3, 0x2, 0x2, 0x2, 0x6a3, 0x6a2, 0x3, 0x2, 0x2, 0x2, 
       0x6a4, 0x10d, 0x3, 0x2, 0x2, 0x2, 0x6a5, 0x6a7, 0x5, 0x10a, 0x86, 
       0x2, 0x6a6, 0x6a5, 0x3, 0x2, 0x2, 0x2, 0x6a7, 0x6a8, 0x3, 0x2, 0x2, 
       0x2, 0x6a8, 0x6a6, 0x3, 0x2, 0x2, 0x2, 0x6a8, 0x6a9, 0x3, 0x2, 0x2, 
       0x2, 0x6a9, 0x6ab, 0x3, 0x2, 0x2, 0x2, 0x6aa, 0x6ac, 0x5, 0x144, 
       0xa3, 0x2, 0x6ab, 0x6aa, 0x3, 0x2, 0x2, 0x2, 0x6ab, 0x6ac, 0x3, 0x2, 
       0x2, 0x2, 0x6ac, 0x10f, 0x3, 0x2, 0x2, 0x2, 0x6ad, 0x6af, 0x5, 0x10c, 
       0x87, 0x2, 0x6ae, 0x6ad, 0x3, 0x2, 0x2, 0x2, 0x6af, 0x6b0, 0x3, 0x2, 
       0x2, 0x2, 0x6b0, 0x6ae, 0x3, 0x2, 0x2, 0x2, 0x6b0, 0x6b1, 0x3, 0x2, 
       0x2, 0x2, 0x6b1, 0x6b3, 0x3, 0x2, 0x2, 0x2, 0x6b2, 0x6b4, 0x5, 0x144, 
       0xa3, 0x2, 0x6b3, 0x6b2, 0x3, 0x2, 0x2, 0x2, 0x6b3, 0x6b4, 0x3, 0x2, 
       0x2, 0x2, 0x6b4, 0x111, 0x3, 0x2, 0x2, 0x2, 0x6b5, 0x6b6, 0x9, 0x15, 
       0x2, 0x2, 0x6b6, 0x113, 0x3, 0x2, 0x2, 0x2, 0x6b7, 0x6b8, 0x9, 0x16, 
       0x2, 0x2, 0x6b8, 0x115, 0x3, 0x2, 0x2, 0x2, 0x6b9, 0x6bb, 0x5, 0x12, 
       0xa, 0x2, 0x6ba, 0x6b9, 0x3, 0x2, 0x2, 0x2, 0x6ba, 0x6bb, 0x3, 0x2, 
       0x2, 0x2, 0x6bb, 0x6bc, 0x3, 0x2, 0x2, 0x2, 0x6bc, 0x6ee, 0x5, 0x118, 
       0x8d, 0x2, 0x6bd, 0x6be, 0x5, 0x12, 0xa, 0x2, 0x6be, 0x6bf, 0x7, 
       0x7f, 0x2, 0x2, 0x6bf, 0x6c0, 0x5, 0x202, 0x102, 0x2, 0x6c0, 0x6ee, 
       0x3, 0x2, 0x2, 0x2, 0x6c1, 0x6ee, 0x5, 0x114, 0x8b, 0x2, 0x6c2, 0x6c4, 
       0x5, 0x114, 0x8b, 0x2, 0x6c3, 0x6c2, 0x3, 0x2, 0x2, 0x2, 0x6c3, 0x6c4, 
       0x3, 0x2, 0x2, 0x2, 0x6c4, 0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6c5, 0x6c7, 
       0x5, 0x112, 0x8a, 0x2, 0x6c6, 0x6c5, 0x3, 0x2, 0x2, 0x2, 0x6c7, 0x6c8, 
       0x3, 0x2, 0x2, 0x2, 0x6c8, 0x6c6, 0x3, 0x2, 0x2, 0x2, 0x6c8, 0x6c9, 
       0x3, 0x2, 0x2, 0x2, 0x6c9, 0x6ee, 0x3, 0x2, 0x2, 0x2, 0x6ca, 0x6cc, 
       0x5, 0x114, 0x8b, 0x2, 0x6cb, 0x6ca, 0x3, 0x2, 0x2, 0x2, 0x6cb, 0x6cc, 
       0x3, 0x2, 0x2, 0x2, 0x6cc, 0x6cd, 0x3, 0x2, 0x2, 0x2, 0x6cd, 0x6ee, 
       0x7, 0x1c, 0x2, 0x2, 0x6ce, 0x6d0, 0x5, 0x114, 0x8b, 0x2, 0x6cf, 
       0x6ce, 0x3, 0x2, 0x2, 0x2, 0x6cf, 0x6d0, 0x3, 0x2, 0x2, 0x2, 0x6d0, 
       0x6d1, 0x3, 0x2, 0x2, 0x2, 0x6d1, 0x6ee, 0x7, 0x1d, 0x2, 0x2, 0x6d2, 
       0x6d4, 0x5, 0x114, 0x8b, 0x2, 0x6d3, 0x6d2, 0x3, 0x2, 0x2, 0x2, 0x6d3, 
       0x6d4, 0x3, 0x2, 0x2, 0x2, 0x6d4, 0x6d5, 0x3, 0x2, 0x2, 0x2, 0x6d5, 
       0x6ee, 0x7, 0x1e, 0x2, 0x2, 0x6d6, 0x6d8, 0x5, 0x114, 0x8b, 0x2, 
       0x6d7, 0x6d6, 0x3, 0x2, 0x2, 0x2, 0x6d7, 0x6d8, 0x3, 0x2, 0x2, 0x2, 
       0x6d8, 0x6d9, 0x3, 0x2, 0x2, 0x2, 0x6d9, 0x6ee, 0x7, 0x92, 0x2, 0x2, 
       0x6da, 0x6ee, 0x7, 0x16, 0x2, 0x2, 0x6db, 0x6dd, 0x5, 0x114, 0x8b, 
       0x2, 0x6dc, 0x6db, 0x3, 0x2, 0x2, 0x2, 0x6dc, 0x6dd, 0x3, 0x2, 0x2, 
       0x2, 0x6dd, 0x6e1, 0x3, 0x2, 0x2, 0x2, 0x6de, 0x6e0, 0x5, 0x112, 
       0x8a, 0x2, 0x6df, 0x6de, 0x3, 0x2, 0x2, 0x2, 0x6e0, 0x6e3, 0x3, 0x2, 
       0x2, 0x2, 0x6e1, 0x6df, 0x3, 0x2, 0x2, 0x2, 0x6e1, 0x6e2, 0x3, 0x2, 
       0x2, 0x2, 0x6e2, 0x6e4, 0x3, 0x2, 0x2, 0x2, 0x6e3, 0x6e1, 0x3, 0x2, 
       0x2, 0x2, 0x6e4, 0x6ee, 0x7, 0x45, 0x2, 0x2, 0x6e5, 0x6ee, 0x7, 0x38, 
       0x2, 0x2, 0x6e6, 0x6e8, 0x5, 0x112, 0x8a, 0x2, 0x6e7, 0x6e6, 0x3, 
       0x2, 0x2, 0x2, 0x6e7, 0x6e8, 0x3, 0x2, 0x2, 0x2, 0x6e8, 0x6e9, 0x3, 
       0x2, 0x2, 0x2, 0x6e9, 0x6ee, 0x7, 0x2e, 0x2, 0x2, 0x6ea, 0x6ee, 0x7, 
       0x90, 0x2, 0x2, 0x6eb, 0x6ee, 0x7, 0x14, 0x2, 0x2, 0x6ec, 0x6ee, 
       0x5, 0x11a, 0x8e, 0x2, 0x6ed, 0x6ba, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6bd, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6c1, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6c3, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6cb, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6cf, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6d3, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6d7, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6da, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6dc, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6e5, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6e7, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6ea, 0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6eb, 
       0x3, 0x2, 0x2, 0x2, 0x6ed, 0x6ec, 0x3, 0x2, 0x2, 0x2, 0x6ee, 0x117, 
       0x3, 0x2, 0x2, 0x2, 0x6ef, 0x6f3, 0x5, 0x1c0, 0xe1, 0x2, 0x6f0, 0x6f3, 
       0x5, 0x11e, 0x90, 0x2, 0x6f1, 0x6f3, 0x5, 0x108, 0x85, 0x2, 0x6f2, 
       0x6ef, 0x3, 0x2, 0x2, 0x2, 0x6f2, 0x6f0, 0x3, 0x2, 0x2, 0x2, 0x6f2, 
       0x6f1, 0x3, 0x2, 0x2, 0x2, 0x6f3, 0x119, 0x3, 0x2, 0x2, 0x2, 0x6f4, 
       0x6f5, 0x7, 0x29, 0x2, 0x2, 0x6f5, 0x6f8, 0x7, 0x97, 0x2, 0x2, 0x6f6, 
       0x6f9, 0x5, 0x62, 0x32, 0x2, 0x6f7, 0x6f9, 0x7, 0x14, 0x2, 0x2, 0x6f8, 
       0x6f6, 0x3, 0x2, 0x2, 0x2, 0x6f8, 0x6f7, 0x3, 0x2, 0x2, 0x2, 0x6f9, 
       0x6fa, 0x3, 0x2, 0x2, 0x2, 0x6fa, 0x6fb, 0x7, 0x98, 0x2, 0x2, 0x6fb, 
       0x11b, 0x3, 0x2, 0x2, 0x2, 0x6fc, 0x70b, 0x5, 0x1ca, 0xe6, 0x2, 0x6fd, 
       0x6ff, 0x5, 0x144, 0xa3, 0x2, 0x6fe, 0x6fd, 0x3, 0x2, 0x2, 0x2, 0x6fe, 
       0x6ff, 0x3, 0x2, 0x2, 0x2, 0x6ff, 0x701, 0x3, 0x2, 0x2, 0x2, 0x700, 
       0x702, 0x5, 0x12, 0xa, 0x2, 0x701, 0x700, 0x3, 0x2, 0x2, 0x2, 0x701, 
       0x702, 0x3, 0x2, 0x2, 0x2, 0x702, 0x703, 0x3, 0x2, 0x2, 0x2, 0x703, 
       0x70c, 0x5, 0x4, 0x3, 0x2, 0x704, 0x70c, 0x5, 0x202, 0x102, 0x2, 
       0x705, 0x707, 0x5, 0x12, 0xa, 0x2, 0x706, 0x708, 0x7, 0x7f, 0x2, 
       0x2, 0x707, 0x706, 0x3, 0x2, 0x2, 0x2, 0x707, 0x708, 0x3, 0x2, 0x2, 
       0x2, 0x708, 0x709, 0x3, 0x2, 0x2, 0x2, 0x709, 0x70a, 0x5, 0x202, 
       0x102, 0x2, 0x70a, 0x70c, 0x3, 0x2, 0x2, 0x2, 0x70b, 0x6fe, 0x3, 
       0x2, 0x2, 0x2, 0x70b, 0x704, 0x3, 0x2, 0x2, 0x2, 0x70b, 0x705, 0x3, 
       0x2, 0x2, 0x2, 0x70c, 0x713, 0x3, 0x2, 0x2, 0x2, 0x70d, 0x70f, 0x7, 
       0x32, 0x2, 0x2, 0x70e, 0x710, 0x5, 0x12, 0xa, 0x2, 0x70f, 0x70e, 
       0x3, 0x2, 0x2, 0x2, 0x70f, 0x710, 0x3, 0x2, 0x2, 0x2, 0x710, 0x711, 
       0x3, 0x2, 0x2, 0x2, 0x711, 0x713, 0x5, 0x4, 0x3, 0x2, 0x712, 0x6fc, 
       0x3, 0x2, 0x2, 0x2, 0x712, 0x70d, 0x3, 0x2, 0x2, 0x2, 0x713, 0x11d, 
       0x3, 0x2, 0x2, 0x2, 0x714, 0x715, 0x5, 0x4, 0x3, 0x2, 0x715, 0x11f, 
       0x3, 0x2, 0x2, 0x2, 0x716, 0x717, 0x5, 0x122, 0x92, 0x2, 0x717, 0x71c, 
       0x7, 0x9b, 0x2, 0x2, 0x718, 0x71a, 0x5, 0x12a, 0x96, 0x2, 0x719, 
       0x71b, 0x7, 0xbd, 0x2, 0x2, 0x71a, 0x719, 0x3, 0x2, 0x2, 0x2, 0x71a, 
       0x71b, 0x3, 0x2, 0x2, 0x2, 0x71b, 0x71d, 0x3, 0x2, 0x2, 0x2, 0x71c, 
       0x718, 0x3, 0x2, 0x2, 0x2, 0x71c, 0x71d, 0x3, 0x2, 0x2, 0x2, 0x71d, 
       0x71e, 0x3, 0x2, 0x2, 0x2, 0x71e, 0x71f, 0x7, 0x9c, 0x2, 0x2, 0x71f, 
       0x121, 0x3, 0x2, 0x2, 0x2, 0x720, 0x722, 0x5, 0x126, 0x94, 0x2, 0x721, 
       0x723, 0x5, 0x144, 0xa3, 0x2, 0x722, 0x721, 0x3, 0x2, 0x2, 0x2, 0x722, 
       0x723, 0x3, 0x2, 0x2, 0x2, 0x723, 0x728, 0x3, 0x2, 0x2, 0x2, 0x724, 
       0x726, 0x5, 0x12, 0xa, 0x2, 0x725, 0x724, 0x3, 0x2, 0x2, 0x2, 0x725, 
       0x726, 0x3, 0x2, 0x2, 0x2, 0x726, 0x727, 0x3, 0x2, 0x2, 0x2, 0x727, 
       0x729, 0x5, 0x4, 0x3, 0x2, 0x728, 0x725, 0x3, 0x2, 0x2, 0x2, 0x728, 
       0x729, 0x3, 0x2, 0x2, 0x2, 0x729, 0x72b, 0x3, 0x2, 0x2, 0x2, 0x72a, 
       0x72c, 0x5, 0x128, 0x95, 0x2, 0x72b, 0x72a, 0x3, 0x2, 0x2, 0x2, 0x72b, 
       0x72c, 0x3, 0x2, 0x2, 0x2, 0x72c, 0x123, 0x3, 0x2, 0x2, 0x2, 0x72d, 
       0x72f, 0x5, 0x126, 0x94, 0x2, 0x72e, 0x730, 0x5, 0x144, 0xa3, 0x2, 
       0x72f, 0x72e, 0x3, 0x2, 0x2, 0x2, 0x72f, 0x730, 0x3, 0x2, 0x2, 0x2, 
       0x730, 0x731, 0x3, 0x2, 0x2, 0x2, 0x731, 0x733, 0x5, 0x4, 0x3, 0x2, 
       0x732, 0x734, 0x5, 0x128, 0x95, 0x2, 0x733, 0x732, 0x3, 0x2, 0x2, 
       0x2, 0x733, 0x734, 0x3, 0x2, 0x2, 0x2, 0x734, 0x735, 0x3, 0x2, 0x2, 
       0x2, 0x735, 0x736, 0x7, 0xc3, 0x2, 0x2, 0x736, 0x125, 0x3, 0x2, 0x2, 
       0x2, 0x737, 0x739, 0x7, 0x32, 0x2, 0x2, 0x738, 0x73a, 0x9, 0x17, 
       0x2, 0x2, 0x739, 0x738, 0x3, 0x2, 0x2, 0x2, 0x739, 0x73a, 0x3, 0x2, 
       0x2, 0x2, 0x73a, 0x127, 0x3, 0x2, 0x2, 0x2, 0x73b, 0x73c, 0x7, 0xc1, 
       0x2, 0x2, 0x73c, 0x73d, 0x5, 0x10e, 0x88, 0x2, 0x73d, 0x129, 0x3, 
       0x2, 0x2, 0x2, 0x73e, 0x743, 0x5, 0x12c, 0x97, 0x2, 0x73f, 0x740, 
       0x7, 0xbd, 0x2, 0x2, 0x740, 0x742, 0x5, 0x12c, 0x97, 0x2, 0x741, 
       0x73f, 0x3, 0x2, 0x2, 0x2, 0x742, 0x745, 0x3, 0x2, 0x2, 0x2, 0x743, 
       0x741, 0x3, 0x2, 0x2, 0x2, 0x743, 0x744, 0x3, 0x2, 0x2, 0x2, 0x744, 
       0x12b, 0x3, 0x2, 0x2, 0x2, 0x745, 0x743, 0x3, 0x2, 0x2, 0x2, 0x746, 
       0x749, 0x5, 0x12e, 0x98, 0x2, 0x747, 0x748, 0x7, 0xa8, 0x2, 0x2, 
       0x748, 0x74a, 0x5, 0x64, 0x33, 0x2, 0x749, 0x747, 0x3, 0x2, 0x2, 
       0x2, 0x749, 0x74a, 0x3, 0x2, 0x2, 0x2, 0x74a, 0x12d, 0x3, 0x2, 0x2, 
       0x2, 0x74b, 0x74c, 0x5, 0x4, 0x3, 0x2, 0x74c, 0x12f, 0x3, 0x2, 0x2, 
       0x2, 0x74d, 0x750, 0x5, 0x132, 0x9a, 0x2, 0x74e, 0x750, 0x5, 0x136, 
       0x9c, 0x2, 0x74f, 0x74d, 0x3, 0x2, 0x2, 0x2, 0x74f, 0x74e, 0x3, 0x2, 
       0x2, 0x2, 0x750, 0x131, 0x3, 0x2, 0x2, 0x2, 0x751, 0x752, 0x5, 0x4, 
       0x3, 0x2, 0x752, 0x133, 0x3, 0x2, 0x2, 0x2, 0x753, 0x755, 0x7, 0x44, 
       0x2, 0x2, 0x754, 0x753, 0x3, 0x2, 0x2, 0x2, 0x754, 0x755, 0x3, 0x2, 
       0x2, 0x2, 0x755, 0x756, 0x3, 0x2, 0x2, 0x2, 0x756, 0x759, 0x7, 0x4c, 
       0x2, 0x2, 0x757, 0x75a, 0x5, 0x4, 0x3, 0x2, 0x758, 0x75a, 0x5, 0x132, 
       0x9a, 0x2, 0x759, 0x757, 0x3, 0x2, 0x2, 0x2, 0x759, 0x758, 0x3, 0x2, 
       0x2, 0x2, 0x759, 0x75a, 0x3, 0x2, 0x2, 0x2, 0x75a, 0x75b, 0x3, 0x2, 
       0x2, 0x2, 0x75b, 0x75d, 0x7, 0x9b, 0x2, 0x2, 0x75c, 0x75e, 0x5, 0xda, 
       0x6e, 0x2, 0x75d, 0x75c, 0x3, 0x2, 0x2, 0x2, 0x75d, 0x75e, 0x3, 0x2, 
       0x2, 0x2, 0x75e, 0x75f, 0x3, 0x2, 0x2, 0x2, 0x75f, 0x760, 0x7, 0x9c, 
       0x2, 0x2, 0x760, 0x135, 0x3, 0x2, 0x2, 0x2, 0x761, 0x762, 0x5, 0x4, 
       0x3, 0x2, 0x762, 0x137, 0x3, 0x2, 0x2, 0x2, 0x763, 0x764, 0x7, 0x4c, 
       0x2, 0x2, 0x764, 0x765, 0x5, 0x4, 0x3, 0x2, 0x765, 0x766, 0x7, 0xa8, 
       0x2, 0x2, 0x766, 0x767, 0x5, 0x13a, 0x9e, 0x2, 0x767, 0x768, 0x7, 
       0xc3, 0x2, 0x2, 0x768, 0x139, 0x3, 0x2, 0x2, 0x2, 0x769, 0x76b, 0x5, 
       0x12, 0xa, 0x2, 0x76a, 0x769, 0x3, 0x2, 0x2, 0x2, 0x76a, 0x76b, 0x3, 
       0x2, 0x2, 0x2, 0x76b, 0x76c, 0x3, 0x2, 0x2, 0x2, 0x76c, 0x76d, 0x5, 
       0x130, 0x99, 0x2, 0x76d, 0x13b, 0x3, 0x2, 0x2, 0x2, 0x76e, 0x774, 
       0x7, 0x8d, 0x2, 0x2, 0x76f, 0x771, 0x7, 0x8a, 0x2, 0x2, 0x770, 0x76f, 
       0x3, 0x2, 0x2, 0x2, 0x770, 0x771, 0x3, 0x2, 0x2, 0x2, 0x771, 0x772, 
       0x3, 0x2, 0x2, 0x2, 0x772, 0x775, 0x5, 0x12, 0xa, 0x2, 0x773, 0x775, 
       0x7, 0xc2, 0x2, 0x2, 0x774, 0x770, 0x3, 0x2, 0x2, 0x2, 0x774, 0x773, 
       0x3, 0x2, 0x2, 0x2, 0x775, 0x776, 0x3, 0x2, 0x2, 0x2, 0x776, 0x777, 
       0x5, 0xe, 0x8, 0x2, 0x777, 0x778, 0x7, 0xc3, 0x2, 0x2, 0x778, 0x13d, 
       0x3, 0x2, 0x2, 0x2, 0x779, 0x77b, 0x5, 0x144, 0xa3, 0x2, 0x77a, 0x779, 
       0x3, 0x2, 0x2, 0x2, 0x77a, 0x77b, 0x3, 0x2, 0x2, 0x2, 0x77b, 0x77c, 
       0x3, 0x2, 0x2, 0x2, 0x77c, 0x77d, 0x7, 0x8d, 0x2, 0x2, 0x77d, 0x77f, 
       0x7, 0x4c, 0x2, 0x2, 0x77e, 0x780, 0x5, 0x12, 0xa, 0x2, 0x77f, 0x77e, 
       0x3, 0x2, 0x2, 0x2, 0x77f, 0x780, 0x3, 0x2, 0x2, 0x2, 0x780, 0x781, 
       0x3, 0x2, 0x2, 0x2, 0x781, 0x782, 0x5, 0x130, 0x99, 0x2, 0x782, 0x783, 
       0x7, 0xc3, 0x2, 0x2, 0x783, 0x13f, 0x3, 0x2, 0x2, 0x2, 0x784, 0x785, 
       0x7, 0x13, 0x2, 0x2, 0x785, 0x786, 0x7, 0x97, 0x2, 0x2, 0x786, 0x787, 
       0x7, 0x6, 0x2, 0x2, 0x787, 0x788, 0x7, 0x98, 0x2, 0x2, 0x788, 0x789, 
       0x7, 0xc3, 0x2, 0x2, 0x789, 0x141, 0x3, 0x2, 0x2, 0x2, 0x78a, 0x78b, 
       0x7, 0x35, 0x2, 0x2, 0x78b, 0x792, 0x7, 0x6, 0x2, 0x2, 0x78c, 0x78e, 
       0x7, 0x9b, 0x2, 0x2, 0x78d, 0x78f, 0x5, 0xda, 0x6e, 0x2, 0x78e, 0x78d, 
       0x3, 0x2, 0x2, 0x2, 0x78e, 0x78f, 0x3, 0x2, 0x2, 0x2, 0x78f, 0x790, 
       0x3, 0x2, 0x2, 0x2, 0x790, 0x793, 0x7, 0x9c, 0x2, 0x2, 0x791, 0x793, 
       0x5, 0xdc, 0x6f, 0x2, 0x792, 0x78c, 0x3, 0x2, 0x2, 0x2, 0x792, 0x791, 
       0x3, 0x2, 0x2, 0x2, 0x793, 0x143, 0x3, 0x2, 0x2, 0x2, 0x794, 0x796, 
       0x5, 0x146, 0xa4, 0x2, 0x795, 0x794, 0x3, 0x2, 0x2, 0x2, 0x796, 0x797, 
       0x3, 0x2, 0x2, 0x2, 0x797, 0x795, 0x3, 0x2, 0x2, 0x2, 0x797, 0x798, 
       0x3, 0x2, 0x2, 0x2, 0x798, 0x145, 0x3, 0x2, 0x2, 0x2, 0x799, 0x79a, 
       0x7, 0x99, 0x2, 0x2, 0x79a, 0x79c, 0x7, 0x99, 0x2, 0x2, 0x79b, 0x79d, 
       0x5, 0x14a, 0xa6, 0x2, 0x79c, 0x79b, 0x3, 0x2, 0x2, 0x2, 0x79c, 0x79d, 
       0x3, 0x2, 0x2, 0x2, 0x79d, 0x79e, 0x3, 0x2, 0x2, 0x2, 0x79e, 0x79f, 
       0x7, 0x9a, 0x2, 0x2, 0x79f, 0x7a2, 0x7, 0x9a, 0x2, 0x2, 0x7a0, 0x7a2, 
       0x5, 0x148, 0xa5, 0x2, 0x7a1, 0x799, 0x3, 0x2, 0x2, 0x2, 0x7a1, 0x7a0, 
       0x3, 0x2, 0x2, 0x2, 0x7a2, 0x147, 0x3, 0x2, 0x2, 0x2, 0x7a3, 0x7a4, 
       0x7, 0x11, 0x2, 0x2, 0x7a4, 0x7a7, 0x7, 0x97, 0x2, 0x2, 0x7a5, 0x7a8, 
       0x5, 0x16e, 0xb8, 0x2, 0x7a6, 0x7a8, 0x5, 0x64, 0x33, 0x2, 0x7a7, 
       0x7a5, 0x3, 0x2, 0x2, 0x2, 0x7a7, 0x7a6, 0x3, 0x2, 0x2, 0x2, 0x7a8, 
       0x7aa, 0x3, 0x2, 0x2, 0x2, 0x7a9, 0x7ab, 0x7, 0xc6, 0x2, 0x2, 0x7aa, 
       0x7a9, 0x3, 0x2, 0x2, 0x2, 0x7aa, 0x7ab, 0x3, 0x2, 0x2, 0x2, 0x7ab, 
       0x7ac, 0x3, 0x2, 0x2, 0x2, 0x7ac, 0x7ad, 0x7, 0x98, 0x2, 0x2, 0x7ad, 
       0x149, 0x3, 0x2, 0x2, 0x2, 0x7ae, 0x7b3, 0x5, 0x14c, 0xa7, 0x2, 0x7af, 
       0x7b0, 0x7, 0xbd, 0x2, 0x2, 0x7b0, 0x7b2, 0x5, 0x14c, 0xa7, 0x2, 
       0x7b1, 0x7af, 0x3, 0x2, 0x2, 0x2, 0x7b2, 0x7b5, 0x3, 0x2, 0x2, 0x2, 
       0x7b3, 0x7b1, 0x3, 0x2, 0x2, 0x2, 0x7b3, 0x7b4, 0x3, 0x2, 0x2, 0x2, 
       0x7b4, 0x7b7, 0x3, 0x2, 0x2, 0x2, 0x7b5, 0x7b3, 0x3, 0x2, 0x2, 0x2, 
       0x7b6, 0x7b8, 0x7, 0xc6, 0x2, 0x2, 0x7b7, 0x7b6, 0x3, 0x2, 0x2, 0x2, 
       0x7b7, 0x7b8, 0x3, 0x2, 0x2, 0x2, 0x7b8, 0x14b, 0x3, 0x2, 0x2, 0x2, 
       0x7b9, 0x7ba, 0x5, 0x14e, 0xa8, 0x2, 0x7ba, 0x7bb, 0x7, 0xc2, 0x2, 
       0x2, 0x7bb, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bc, 0x7b9, 0x3, 0x2, 0x2, 
       0x2, 0x7bc, 0x7bd, 0x3, 0x2, 0x2, 0x2, 0x7bd, 0x7be, 0x3, 0x2, 0x2, 
       0x2, 0x7be, 0x7c0, 0x5, 0x4, 0x3, 0x2, 0x7bf, 0x7c1, 0x5, 0x150, 
       0xa9, 0x2, 0x7c0, 0x7bf, 0x3, 0x2, 0x2, 0x2, 0x7c0, 0x7c1, 0x3, 0x2, 
       0x2, 0x2, 0x7c1, 0x14d, 0x3, 0x2, 0x2, 0x2, 0x7c2, 0x7c3, 0x5, 0x4, 
       0x3, 0x2, 0x7c3, 0x14f, 0x3, 0x2, 0x2, 0x2, 0x7c4, 0x7c6, 0x7, 0x97, 
       0x2, 0x2, 0x7c5, 0x7c7, 0x5, 0x152, 0xaa, 0x2, 0x7c6, 0x7c5, 0x3, 
       0x2, 0x2, 0x2, 0x7c6, 0x7c7, 0x3, 0x2, 0x2, 0x2, 0x7c7, 0x7c8, 0x3, 
       0x2, 0x2, 0x2, 0x7c8, 0x7c9, 0x7, 0x98, 0x2, 0x2, 0x7c9, 0x151, 0x3, 
       0x2, 0x2, 0x2, 0x7ca, 0x7cc, 0x5, 0x154, 0xab, 0x2, 0x7cb, 0x7ca, 
       0x3, 0x2, 0x2, 0x2, 0x7cc, 0x7cd, 0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7cb, 
       0x3, 0x2, 0x2, 0x2, 0x7cd, 0x7ce, 0x3, 0x2, 0x2, 0x2, 0x7ce, 0x153, 
       0x3, 0x2, 0x2, 0x2, 0x7cf, 0x7d0, 0x7, 0x97, 0x2, 0x2, 0x7d0, 0x7d1, 
       0x5, 0x152, 0xaa, 0x2, 0x7d1, 0x7d2, 0x7, 0x98, 0x2, 0x2, 0x7d2, 
       0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7d3, 0x7d4, 0x7, 0x99, 0x2, 0x2, 0x7d4, 
       0x7d5, 0x5, 0x152, 0xaa, 0x2, 0x7d5, 0x7d6, 0x7, 0x9a, 0x2, 0x2, 
       0x7d6, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7d7, 0x7d8, 0x7, 0x9b, 0x2, 0x2, 
       0x7d8, 0x7d9, 0x5, 0x152, 0xaa, 0x2, 0x7d9, 0x7da, 0x7, 0x9c, 0x2, 
       0x2, 0x7da, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7db, 0x7dd, 0xa, 0x18, 0x2, 
       0x2, 0x7dc, 0x7db, 0x3, 0x2, 0x2, 0x2, 0x7dd, 0x7de, 0x3, 0x2, 0x2, 
       0x2, 0x7de, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7de, 0x7df, 0x3, 0x2, 0x2, 
       0x2, 0x7df, 0x7e1, 0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7cf, 0x3, 0x2, 0x2, 
       0x2, 0x7e0, 0x7d3, 0x3, 0x2, 0x2, 0x2, 0x7e0, 0x7d7, 0x3, 0x2, 0x2, 
       0x2, 0x7e0, 0x7dc, 0x3, 0x2, 0x2, 0x2, 0x7e1, 0x155, 0x3, 0x2, 0x2, 
       0x2, 0x7e2, 0x7e7, 0x5, 0x158, 0xad, 0x2, 0x7e3, 0x7e4, 0x7, 0xbd, 
       0x2, 0x2, 0x7e4, 0x7e6, 0x5, 0x158, 0xad, 0x2, 0x7e5, 0x7e3, 0x3, 
       0x2, 0x2, 0x2, 0x7e6, 0x7e9, 0x3, 0x2, 0x2, 0x2, 0x7e7, 0x7e5, 0x3, 
       0x2, 0x2, 0x2, 0x7e7, 0x7e8, 0x3, 0x2, 0x2, 0x2, 0x7e8, 0x157, 0x3, 
       0x2, 0x2, 0x2, 0x7e9, 0x7e7, 0x3, 0x2, 0x2, 0x2, 0x7ea, 0x7ec, 0x5, 
       0x15a, 0xae, 0x2, 0x7eb, 0x7ed, 0x5, 0x1b6, 0xdc, 0x2, 0x7ec, 0x7eb, 
       0x3, 0x2, 0x2, 0x2, 0x7ec, 0x7ed, 0x3, 0x2, 0x2, 0x2, 0x7ed, 0x159, 
       0x3, 0x2, 0x2, 0x2, 0x7ee, 0x7f4, 0x5, 0x15c, 0xaf, 0x2, 0x7ef, 0x7f0, 
       0x5, 0x15e, 0xb0, 0x2, 0x7f0, 0x7f1, 0x5, 0x160, 0xb1, 0x2, 0x7f1, 
       0x7f2, 0x5, 0x162, 0xb2, 0x2, 0x7f2, 0x7f4, 0x3, 0x2, 0x2, 0x2, 0x7f3, 
       0x7ee, 0x3, 0x2, 0x2, 0x2, 0x7f3, 0x7ef, 0x3, 0x2, 0x2, 0x2, 0x7f4, 
       0x15b, 0x3, 0x2, 0x2, 0x2, 0x7f5, 0x7f7, 0x5, 0x164, 0xb3, 0x2, 0x7f6, 
       0x7f8, 0x7, 0x23, 0x2, 0x2, 0x7f7, 0x7f6, 0x3, 0x2, 0x2, 0x2, 0x7f7, 
       0x7f8, 0x3, 0x2, 0x2, 0x2, 0x7f8, 0x7fa, 0x3, 0x2, 0x2, 0x2, 0x7f9, 
       0x7f5, 0x3, 0x2, 0x2, 0x2, 0x7fa, 0x7fd, 0x3, 0x2, 0x2, 0x2, 0x7fb, 
       0x7f9, 0x3, 0x2, 0x2, 0x2, 0x7fb, 0x7fc, 0x3, 0x2, 0x2, 0x2, 0x7fc, 
       0x7fe, 0x3, 0x2, 0x2, 0x2, 0x7fd, 0x7fb, 0x3, 0x2, 0x2, 0x2, 0x7fe, 
       0x7ff, 0x5, 0x15e, 0xb0, 0x2, 0x7ff, 0x15d, 0x3, 0x2, 0x2, 0x2, 0x800, 
       0x801, 0x8, 0xb0, 0x1, 0x2, 0x801, 0x803, 0x5, 0x16c, 0xb7, 0x2, 
       0x802, 0x804, 0x5, 0x144, 0xa3, 0x2, 0x803, 0x802, 0x3, 0x2, 0x2, 
       0x2, 0x803, 0x804, 0x3, 0x2, 0x2, 0x2, 0x804, 0x80a, 0x3, 0x2, 0x2, 
       0x2, 0x805, 0x806, 0x7, 0x97, 0x2, 0x2, 0x806, 0x807, 0x5, 0x15c, 
       0xaf, 0x2, 0x807, 0x808, 0x7, 0x98, 0x2, 0x2, 0x808, 0x80a, 0x3, 
       0x2, 0x2, 0x2, 0x809, 0x800, 0x3, 0x2, 0x2, 0x2, 0x809, 0x805, 0x3, 
       0x2, 0x2, 0x2, 0x80a, 0x819, 0x3, 0x2, 0x2, 0x2, 0x80b, 0x815, 0xc, 
       0x4, 0x2, 0x2, 0x80c, 0x816, 0x5, 0x160, 0xb1, 0x2, 0x80d, 0x80f, 
       0x7, 0x99, 0x2, 0x2, 0x80e, 0x810, 0x5, 0x64, 0x33, 0x2, 0x80f, 0x80e, 
       0x3, 0x2, 0x2, 0x2, 0x80f, 0x810, 0x3, 0x2, 0x2, 0x2, 0x810, 0x811, 
       0x3, 0x2, 0x2, 0x2, 0x811, 0x813, 0x7, 0x9a, 0x2, 0x2, 0x812, 0x814, 
       0x5, 0x144, 0xa3, 0x2, 0x813, 0x812, 0x3, 0x2, 0x2, 0x2, 0x813, 0x814, 
       0x3, 0x2, 0x2, 0x2, 0x814, 0x816, 0x3, 0x2, 0x2, 0x2, 0x815, 0x80c, 
       0x3, 0x2, 0x2, 0x2, 0x815, 0x80d, 0x3, 0x2, 0x2, 0x2, 0x816, 0x818, 
       0x3, 0x2, 0x2, 0x2, 0x817, 0x80b, 0x3, 0x2, 0x2, 0x2, 0x818, 0x81b, 
       0x3, 0x2, 0x2, 0x2, 0x819, 0x817, 0x3, 0x2, 0x2, 0x2, 0x819, 0x81a, 
       0x3, 0x2, 0x2, 0x2, 0x81a, 0x15f, 0x3, 0x2, 0x2, 0x2, 0x81b, 0x819, 
       0x3, 0x2, 0x2, 0x2, 0x81c, 0x81e, 0x7, 0x97, 0x2, 0x2, 0x81d, 0x81f, 
       0x5, 0x17a, 0xbe, 0x2, 0x81e, 0x81d, 0x3, 0x2, 0x2, 0x2, 0x81e, 0x81f, 
       0x3, 0x2, 0x2, 0x2, 0x81f, 0x820, 0x3, 0x2, 0x2, 0x2, 0x820, 0x822, 
       0x7, 0x98, 0x2, 0x2, 0x821, 0x823, 0x5, 0x166, 0xb4, 0x2, 0x822, 
       0x821, 0x3, 0x2, 0x2, 0x2, 0x822, 0x823, 0x3, 0x2, 0x2, 0x2, 0x823, 
       0x825, 0x3, 0x2, 0x2, 0x2, 0x824, 0x826, 0x5, 0x16a, 0xb6, 0x2, 0x825, 
       0x824, 0x3, 0x2, 0x2, 0x2, 0x825, 0x826, 0x3, 0x2, 0x2, 0x2, 0x826, 
       0x828, 0x3, 0x2, 0x2, 0x2, 0x827, 0x829, 0x5, 0x21e, 0x110, 0x2, 
       0x828, 0x827, 0x3, 0x2, 0x2, 0x2, 0x828, 0x829, 0x3, 0x2, 0x2, 0x2, 
       0x829, 0x82b, 0x3, 0x2, 0x2, 0x2, 0x82a, 0x82c, 0x5, 0x144, 0xa3, 
       0x2, 0x82b, 0x82a, 0x3, 0x2, 0x2, 0x2, 0x82b, 0x82c, 0x3, 0x2, 0x2, 
       0x2, 0x82c, 0x161, 0x3, 0x2, 0x2, 0x2, 0x82d, 0x82e, 0x7, 0xbf, 0x2, 
       0x2, 0x82e, 0x830, 0x5, 0x110, 0x89, 0x2, 0x82f, 0x831, 0x5, 0x170, 
       0xb9, 0x2, 0x830, 0x82f, 0x3, 0x2, 0x2, 0x2, 0x830, 0x831, 0x3, 0x2, 
       0x2, 0x2, 0x831, 0x163, 0x3, 0x2, 0x2, 0x2, 0x832, 0x834, 0x9, 0x19, 
       0x2, 0x2, 0x833, 0x835, 0x5, 0x144, 0xa3, 0x2, 0x834, 0x833, 0x3, 
       0x2, 0x2, 0x2, 0x834, 0x835, 0x3, 0x2, 0x2, 0x2, 0x835, 0x841, 0x3, 
       0x2, 0x2, 0x2, 0x836, 0x838, 0x5, 0x12, 0xa, 0x2, 0x837, 0x836, 0x3, 
       0x2, 0x2, 0x2, 0x837, 0x838, 0x3, 0x2, 0x2, 0x2, 0x838, 0x839, 0x3, 
       0x2, 0x2, 0x2, 0x839, 0x83b, 0x7, 0xa0, 0x2, 0x2, 0x83a, 0x83c, 0x5, 
       0x144, 0xa3, 0x2, 0x83b, 0x83a, 0x3, 0x2, 0x2, 0x2, 0x83b, 0x83c, 
       0x3, 0x2, 0x2, 0x2, 0x83c, 0x83e, 0x3, 0x2, 0x2, 0x2, 0x83d, 0x83f, 
       0x5, 0x166, 0xb4, 0x2, 0x83e, 0x83d, 0x3, 0x2, 0x2, 0x2, 0x83e, 0x83f, 
       0x3, 0x2, 0x2, 0x2, 0x83f, 0x841, 0x3, 0x2, 0x2, 0x2, 0x840, 0x832, 
       0x3, 0x2, 0x2, 0x2, 0x840, 0x837, 0x3, 0x2, 0x2, 0x2, 0x841, 0x165, 
       0x3, 0x2, 0x2, 0x2, 0x842, 0x844, 0x5, 0x168, 0xb5, 0x2, 0x843, 0x842, 
       0x3, 0x2, 0x2, 0x2, 0x844, 0x845, 0x3, 0x2, 0x2, 0x2, 0x845, 0x843, 
       0x3, 0x2, 0x2, 0x2, 0x845, 0x846, 0x3, 0x2, 0x2, 0x2, 0x846, 0x167, 
       0x3, 0x2, 0x2, 0x2, 0x847, 0x848, 0x9, 0x1a, 0x2, 0x2, 0x848, 0x169, 
       0x3, 0x2, 0x2, 0x2, 0x849, 0x84a, 0x9, 0x19, 0x2, 0x2, 0x84a, 0x16b, 
       0x3, 0x2, 0x2, 0x2, 0x84b, 0x84d, 0x7, 0xc6, 0x2, 0x2, 0x84c, 0x84b, 
       0x3, 0x2, 0x2, 0x2, 0x84c, 0x84d, 0x3, 0x2, 0x2, 0x2, 0x84d, 0x84e, 
       0x3, 0x2, 0x2, 0x2, 0x84e, 0x84f, 0x5, 0x8, 0x5, 0x2, 0x84f, 0x850, 
       0x8, 0xb7, 0x1, 0x2, 0x850, 0x16d, 0x3, 0x2, 0x2, 0x2, 0x851, 0x853, 
       0x5, 0x10e, 0x88, 0x2, 0x852, 0x854, 0x5, 0x170, 0xb9, 0x2, 0x853, 
       0x852, 0x3, 0x2, 0x2, 0x2, 0x853, 0x854, 0x3, 0x2, 0x2, 0x2, 0x854, 
       0x16f, 0x3, 0x2, 0x2, 0x2, 0x855, 0x85e, 0x5, 0x172, 0xba, 0x2, 0x856, 
       0x858, 0x5, 0x174, 0xbb, 0x2, 0x857, 0x856, 0x3, 0x2, 0x2, 0x2, 0x857, 
       0x858, 0x3, 0x2, 0x2, 0x2, 0x858, 0x859, 0x3, 0x2, 0x2, 0x2, 0x859, 
       0x85a, 0x5, 0x160, 0xb1, 0x2, 0x85a, 0x85b, 0x5, 0x162, 0xb2, 0x2, 
       0x85b, 0x85e, 0x3, 0x2, 0x2, 0x2, 0x85c, 0x85e, 0x5, 0x176, 0xbc, 
       0x2, 0x85d, 0x855, 0x3, 0x2, 0x2, 0x2, 0x85d, 0x857, 0x3, 0x2, 0x2, 
       0x2, 0x85d, 0x85c, 0x3, 0x2, 0x2, 0x2, 0x85e, 0x171, 0x3, 0x2, 0x2, 
       0x2, 0x85f, 0x869, 0x5, 0x174, 0xbb, 0x2, 0x860, 0x862, 0x5, 0x164, 
       0xb3, 0x2, 0x861, 0x860, 0x3, 0x2, 0x2, 0x2, 0x862, 0x863, 0x3, 0x2, 
       0x2, 0x2, 0x863, 0x861, 0x3, 0x2, 0x2, 0x2, 0x863, 0x864, 0x3, 0x2, 
       0x2, 0x2, 0x864, 0x866, 0x3, 0x2, 0x2, 0x2, 0x865, 0x867, 0x5, 0x174, 
       0xbb, 0x2, 0x866, 0x865, 0x3, 0x2, 0x2, 0x2, 0x866, 0x867, 0x3, 0x2, 
       0x2, 0x2, 0x867, 0x869, 0x3, 0x2, 0x2, 0x2, 0x868, 0x85f, 0x3, 0x2, 
       0x2, 0x2, 0x868, 0x861, 0x3, 0x2, 0x2, 0x2, 0x869, 0x173, 0x3, 0x2, 
       0x2, 0x2, 0x86a, 0x86b, 0x8, 0xbb, 0x1, 0x2, 0x86b, 0x87d, 0x5, 0x160, 
       0xb1, 0x2, 0x86c, 0x86e, 0x7, 0x99, 0x2, 0x2, 0x86d, 0x86f, 0x5, 
       0x64, 0x33, 0x2, 0x86e, 0x86d, 0x3, 0x2, 0x2, 0x2, 0x86e, 0x86f, 
       0x3, 0x2, 0x2, 0x2, 0x86f, 0x870, 0x3, 0x2, 0x2, 0x2, 0x870, 0x872, 
       0x7, 0x9a, 0x2, 0x2, 0x871, 0x86c, 0x3, 0x2, 0x2, 0x2, 0x872, 0x873, 
       0x3, 0x2, 0x2, 0x2, 0x873, 0x871, 0x3, 0x2, 0x2, 0x2, 0x873, 0x874, 
       0x3, 0x2, 0x2, 0x2, 0x874, 0x876, 0x3, 0x2, 0x2, 0x2, 0x875, 0x877, 
       0x5, 0x144, 0xa3, 0x2, 0x876, 0x875, 0x3, 0x2, 0x2, 0x2, 0x876, 0x877, 
       0x3, 0x2, 0x2, 0x2, 0x877, 0x87d, 0x3, 0x2, 0x2, 0x2, 0x878, 0x879, 
       0x7, 0x97, 0x2, 0x2, 0x879, 0x87a, 0x5, 0x172, 0xba, 0x2, 0x87a, 
       0x87b, 0x7, 0x98, 0x2, 0x2, 0x87b, 0x87d, 0x3, 0x2, 0x2, 0x2, 0x87c, 
       0x86a, 0x3, 0x2, 0x2, 0x2, 0x87c, 0x871, 0x3, 0x2, 0x2, 0x2, 0x87c, 
       0x878, 0x3, 0x2, 0x2, 0x2, 0x87d, 0x891, 0x3, 0x2, 0x2, 0x2, 0x87e, 
       0x88d, 0xc, 0x6, 0x2, 0x2, 0x87f, 0x88e, 0x5, 0x160, 0xb1, 0x2, 0x880, 
       0x886, 0x5, 0x174, 0xbb, 0x2, 0x881, 0x883, 0x7, 0x99, 0x2, 0x2, 
       0x882, 0x884, 0x5, 0x64, 0x33, 0x2, 0x883, 0x882, 0x3, 0x2, 0x2, 
       0x2, 0x883, 0x884, 0x3, 0x2, 0x2, 0x2, 0x884, 0x885, 0x3, 0x2, 0x2, 
       0x2, 0x885, 0x887, 0x7, 0x9a, 0x2, 0x2, 0x886, 0x881, 0x3, 0x2, 0x2, 
       0x2, 0x887, 0x888, 0x3, 0x2, 0x2, 0x2, 0x888, 0x886, 0x3, 0x2, 0x2, 
       0x2, 0x888, 0x889, 0x3, 0x2, 0x2, 0x2, 0x889, 0x88b, 0x3, 0x2, 0x2, 
       0x2, 0x88a, 0x88c, 0x5, 0x144, 0xa3, 0x2, 0x88b, 0x88a, 0x3, 0x2, 
       0x2, 0x2, 0x88b, 0x88c, 0x3, 0x2, 0x2, 0x2, 0x88c, 0x88e, 0x3, 0x2, 
       0x2, 0x2, 0x88d, 0x87f, 0x3, 0x2, 0x2, 0x2, 0x88d, 0x880, 0x3, 0x2, 
       0x2, 0x2, 0x88e, 0x890, 0x3, 0x2, 0x2, 0x2, 0x88f, 0x87e, 0x3, 0x2, 
       0x2, 0x2, 0x890, 0x893, 0x3, 0x2, 0x2, 0x2, 0x891, 0x88f, 0x3, 0x2, 
       0x2, 0x2, 0x891, 0x892, 0x3, 0x2, 0x2, 0x2, 0x892, 0x175, 0x3, 0x2, 
       0x2, 0x2, 0x893, 0x891, 0x3, 0x2, 0x2, 0x2, 0x894, 0x896, 0x5, 0x164, 
       0xb3, 0x2, 0x895, 0x894, 0x3, 0x2, 0x2, 0x2, 0x896, 0x899, 0x3, 0x2, 
       0x2, 0x2, 0x897, 0x895, 0x3, 0x2, 0x2, 0x2, 0x897, 0x898, 0x3, 0x2, 
       0x2, 0x2, 0x898, 0x89a, 0x3, 0x2, 0x2, 0x2, 0x899, 0x897, 0x3, 0x2, 
       0x2, 0x2, 0x89a, 0x89b, 0x5, 0x178, 0xbd, 0x2, 0x89b, 0x177, 0x3, 
       0x2, 0x2, 0x2, 0x89c, 0x89d, 0x8, 0xbd, 0x1, 0x2, 0x89d, 0x89e, 0x7, 
       0xc6, 0x2, 0x2, 0x89e, 0x8ad, 0x3, 0x2, 0x2, 0x2, 0x89f, 0x8a9, 0xc, 
       0x4, 0x2, 0x2, 0x8a0, 0x8aa, 0x5, 0x160, 0xb1, 0x2, 0x8a1, 0x8a3, 
       0x7, 0x99, 0x2, 0x2, 0x8a2, 0x8a4, 0x5, 0x64, 0x33, 0x2, 0x8a3, 0x8a2, 
       0x3, 0x2, 0x2, 0x2, 0x8a3, 0x8a4, 0x3, 0x2, 0x2, 0x2, 0x8a4, 0x8a5, 
       0x3, 0x2, 0x2, 0x2, 0x8a5, 0x8a7, 0x7, 0x9a, 0x2, 0x2, 0x8a6, 0x8a8, 
       0x5, 0x144, 0xa3, 0x2, 0x8a7, 0x8a6, 0x3, 0x2, 0x2, 0x2, 0x8a7, 0x8a8, 
       0x3, 0x2, 0x2, 0x2, 0x8a8, 0x8aa, 0x3, 0x2, 0x2, 0x2, 0x8a9, 0x8a0, 
       0x3, 0x2, 0x2, 0x2, 0x8a9, 0x8a1, 0x3, 0x2, 0x2, 0x2, 0x8aa, 0x8ac, 
       0x3, 0x2, 0x2, 0x2, 0x8ab, 0x89f, 0x3, 0x2, 0x2, 0x2, 0x8ac, 0x8af, 
       0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ab, 0x3, 0x2, 0x2, 0x2, 0x8ad, 0x8ae, 
       0x3, 0x2, 0x2, 0x2, 0x8ae, 0x179, 0x3, 0x2, 0x2, 0x2, 0x8af, 0x8ad, 
       0x3, 0x2, 0x2, 0x2, 0x8b0, 0x8b5, 0x5, 0x17c, 0xbf, 0x2, 0x8b1, 0x8b3, 
       0x7, 0xbd, 0x2, 0x2, 0x8b2, 0x8b1, 0x3, 0x2, 0x2, 0x2, 0x8b2, 0x8b3, 
       0x3, 0x2, 0x2, 0x2, 0x8b3, 0x8b4, 0x3, 0x2, 0x2, 0x2, 0x8b4, 0x8b6, 
       0x7, 0xc6, 0x2, 0x2, 0x8b5, 0x8b2, 0x3, 0x2, 0x2, 0x2, 0x8b5, 0x8b6, 
       0x3, 0x2, 0x2, 0x2, 0x8b6, 0x17b, 0x3, 0x2, 0x2, 0x2, 0x8b7, 0x8bc, 
       0x5, 0x17e, 0xc0, 0x2, 0x8b8, 0x8b9, 0x7, 0xbd, 0x2, 0x2, 0x8b9, 
       0x8bb, 0x5, 0x17e, 0xc0, 0x2, 0x8ba, 0x8b8, 0x3, 0x2, 0x2, 0x2, 0x8bb, 
       0x8be, 0x3, 0x2, 0x2, 0x2, 0x8bc, 0x8ba, 0x3, 0x2, 0x2, 0x2, 0x8bc, 
       0x8bd, 0x3, 0x2, 0x2, 0x2, 0x8bd, 0x17d, 0x3, 0x2, 0x2, 0x2, 0x8be, 
       0x8bc, 0x3, 0x2, 0x2, 0x2, 0x8bf, 0x8c1, 0x5, 0x144, 0xa3, 0x2, 0x8c0, 
       0x8bf, 0x3, 0x2, 0x2, 0x2, 0x8c0, 0x8c1, 0x3, 0x2, 0x2, 0x2, 0x8c1, 
       0x8c2, 0x3, 0x2, 0x2, 0x2, 0x8c2, 0x8c7, 0x5, 0xec, 0x77, 0x2, 0x8c3, 
       0x8c8, 0x5, 0x15a, 0xae, 0x2, 0x8c4, 0x8c6, 0x5, 0x170, 0xb9, 0x2, 
       0x8c5, 0x8c4, 0x3, 0x2, 0x2, 0x2, 0x8c5, 0x8c6, 0x3, 0x2, 0x2, 0x2, 
       0x8c6, 0x8c8, 0x3, 0x2, 0x2, 0x2, 0x8c7, 0x8c3, 0x3, 0x2, 0x2, 0x2, 
       0x8c7, 0x8c5, 0x3, 0x2, 0x2, 0x2, 0x8c8, 0x8cb, 0x3, 0x2, 0x2, 0x2, 
       0x8c9, 0x8ca, 0x7, 0xa8, 0x2, 0x2, 0x8ca, 0x8cc, 0x5, 0x1ba, 0xde, 
       0x2, 0x8cb, 0x8c9, 0x3, 0x2, 0x2, 0x2, 0x8cb, 0x8cc, 0x3, 0x2, 0x2, 
       0x2, 0x8cc, 0x17f, 0x3, 0x2, 0x2, 0x2, 0x8cd, 0x8ce, 0x5, 0x184, 
       0xc3, 0x2, 0x8ce, 0x8cf, 0x8, 0xc1, 0x1, 0x2, 0x8cf, 0x8d0, 0x5, 
       0xc6, 0x64, 0x2, 0x8d0, 0x8d1, 0x8, 0xc1, 0x1, 0x2, 0x8d1, 0x181, 
       0x3, 0x2, 0x2, 0x2, 0x8d2, 0x8d3, 0x5, 0x184, 0xc3, 0x2, 0x8d3, 0x8d4, 
       0x8, 0xc2, 0x1, 0x2, 0x8d4, 0x8d5, 0x7, 0xc3, 0x2, 0x2, 0x8d5, 0x183, 
       0x3, 0x2, 0x2, 0x2, 0x8d6, 0x8db, 0x7, 0x6d, 0x2, 0x2, 0x8d7, 0x8d8, 
       0x7, 0x99, 0x2, 0x2, 0x8d8, 0x8d9, 0x5, 0x64, 0x33, 0x2, 0x8d9, 0x8da, 
       0x7, 0x9a, 0x2, 0x2, 0x8da, 0x8dc, 0x3, 0x2, 0x2, 0x2, 0x8db, 0x8d7, 
       0x3, 0x2, 0x2, 0x2, 0x8db, 0x8dc, 0x3, 0x2, 0x2, 0x2, 0x8dc, 0x8dd, 
       0x3, 0x2, 0x2, 0x2, 0x8dd, 0x8e2, 0x8, 0xc3, 0x1, 0x2, 0x8de, 0x8e0, 
       0x7, 0x7a, 0x2, 0x2, 0x8df, 0x8e1, 0x9, 0x1b, 0x2, 0x2, 0x8e0, 0x8df, 
       0x3, 0x2, 0x2, 0x2, 0x8e0, 0x8e1, 0x3, 0x2, 0x2, 0x2, 0x8e1, 0x8e3, 
       0x3, 0x2, 0x2, 0x2, 0x8e2, 0x8de, 0x3, 0x2, 0x2, 0x2, 0x8e2, 0x8e3, 
       0x3, 0x2, 0x2, 0x2, 0x8e3, 0x8e4, 0x3, 0x2, 0x2, 0x2, 0x8e4, 0x8e8, 
       0x5, 0x186, 0xc4, 0x2, 0x8e5, 0x8e7, 0x5, 0x196, 0xcc, 0x2, 0x8e6, 
       0x8e5, 0x3, 0x2, 0x2, 0x2, 0x8e7, 0x8ea, 0x3, 0x2, 0x2, 0x2, 0x8e8, 
       0x8e6, 0x3, 0x2, 0x2, 0x2, 0x8e8, 0x8e9, 0x3, 0x2, 0x2, 0x2, 0x8e9, 
       0x185, 0x3, 0x2, 0x2, 0x2, 0x8ea, 0x8e8, 0x3, 0x2, 0x2, 0x2, 0x8eb, 
       0x8ed, 0x5, 0xec, 0x77, 0x2, 0x8ec, 0x8eb, 0x3, 0x2, 0x2, 0x2, 0x8ec, 
       0x8ed, 0x3, 0x2, 0x2, 0x2, 0x8ed, 0x8ee, 0x3, 0x2, 0x2, 0x2, 0x8ee, 
       0x8ef, 0x5, 0x16c, 0xb7, 0x2, 0x8ef, 0x8f0, 0x8, 0xc4, 0x1, 0x2, 
       0x8f0, 0x8f2, 0x7, 0x97, 0x2, 0x2, 0x8f1, 0x8f3, 0x5, 0x188, 0xc5, 
       0x2, 0x8f2, 0x8f1, 0x3, 0x2, 0x2, 0x2, 0x8f2, 0x8f3, 0x3, 0x2, 0x2, 
       0x2, 0x8f3, 0x8f4, 0x3, 0x2, 0x2, 0x2, 0x8f4, 0x8f5, 0x7, 0x98, 0x2, 
       0x2, 0x8f5, 0x8f6, 0x8, 0xc4, 0x1, 0x2, 0x8f6, 0x187, 0x3, 0x2, 0x2, 
       0x2, 0x8f7, 0x8fc, 0x5, 0x18a, 0xc6, 0x2, 0x8f8, 0x8f9, 0x7, 0xbd, 
       0x2, 0x2, 0x8f9, 0x8fb, 0x5, 0x18a, 0xc6, 0x2, 0x8fa, 0x8f8, 0x3, 
       0x2, 0x2, 0x2, 0x8fb, 0x8fe, 0x3, 0x2, 0x2, 0x2, 0x8fc, 0x8fa, 0x3, 
       0x2, 0x2, 0x2, 0x8fc, 0x8fd, 0x3, 0x2, 0x2, 0x2, 0x8fd, 0x189, 0x3, 
       0x2, 0x2, 0x2, 0x8fe, 0x8fc, 0x3, 0x2, 0x2, 0x2, 0x8ff, 0x904, 0x5, 
       0x18c, 0xc7, 0x2, 0x900, 0x904, 0x5, 0x18e, 0xc8, 0x2, 0x901, 0x904, 
       0x5, 0x190, 0xc9, 0x2, 0x902, 0x904, 0x5, 0x192, 0xca, 0x2, 0x903, 
       0x8ff, 0x3, 0x2, 0x2, 0x2, 0x903, 0x900, 0x3, 0x2, 0x2, 0x2, 0x903, 
       0x901, 0x3, 0x2, 0x2, 0x2, 0x903, 0x902, 0x3, 0x2, 0x2, 0x2, 0x903, 
       0x904, 0x3, 0x2, 0x2, 0x2, 0x904, 0x906, 0x3, 0x2, 0x2, 0x2, 0x905, 
       0x907, 0x5, 0xec, 0x77, 0x2, 0x906, 0x905, 0x3, 0x2, 0x2, 0x2, 0x906, 
       0x907, 0x3, 0x2, 0x2, 0x2, 0x907, 0x908, 0x3, 0x2, 0x2, 0x2, 0x908, 
       0x909, 0x5, 0x15a, 0xae, 0x2, 0x909, 0x90a, 0x8, 0xc6, 0x1, 0x2, 
       0x90a, 0x18b, 0x3, 0x2, 0x2, 0x2, 0x90b, 0x90c, 0x7, 0x41, 0x2, 0x2, 
       0x90c, 0x90d, 0x7, 0x97, 0x2, 0x2, 0x90d, 0x90e, 0x5, 0x64, 0x33, 
       0x2, 0x90e, 0x90f, 0x7, 0x98, 0x2, 0x2, 0x90f, 0x18d, 0x3, 0x2, 0x2, 
       0x2, 0x910, 0x911, 0x7, 0x6c, 0x2, 0x2, 0x911, 0x914, 0x7, 0x97, 
       0x2, 0x2, 0x912, 0x915, 0x5, 0x194, 0xcb, 0x2, 0x913, 0x915, 0x5, 
       0x4, 0x3, 0x2, 0x914, 0x912, 0x3, 0x2, 0x2, 0x2, 0x914, 0x913, 0x3, 
       0x2, 0x2, 0x2, 0x915, 0x916, 0x3, 0x2, 0x2, 0x2, 0x916, 0x917, 0x7, 
       0x98, 0x2, 0x2, 0x917, 0x18f, 0x3, 0x2, 0x2, 0x2, 0x918, 0x919, 0x7, 
       0x3f, 0x2, 0x2, 0x919, 0x91a, 0x8, 0xc9, 0x1, 0x2, 0x91a, 0x91b, 
       0x7, 0x97, 0x2, 0x2, 0x91b, 0x91c, 0x5, 0x5e, 0x30, 0x2, 0x91c, 0x91d, 
       0x7, 0x98, 0x2, 0x2, 0x91d, 0x191, 0x3, 0x2, 0x2, 0x2, 0x91e, 0x91f, 
       0x7, 0x40, 0x2, 0x2, 0x91f, 0x920, 0x8, 0xca, 0x1, 0x2, 0x920, 0x921, 
       0x7, 0x97, 0x2, 0x2, 0x921, 0x922, 0x5, 0x5e, 0x30, 0x2, 0x922, 0x923, 
       0x7, 0x98, 0x2, 0x2, 0x923, 0x924, 0x8, 0xca, 0x1, 0x2, 0x924, 0x193, 
       0x3, 0x2, 0x2, 0x2, 0x925, 0x926, 0x9, 0x1c, 0x2, 0x2, 0x926, 0x195, 
       0x3, 0x2, 0x2, 0x2, 0x927, 0x92c, 0x5, 0x198, 0xcd, 0x2, 0x928, 0x92c, 
       0x5, 0x19a, 0xce, 0x2, 0x929, 0x92c, 0x5, 0x19c, 0xcf, 0x2, 0x92a, 
       0x92c, 0x5, 0x19e, 0xd0, 0x2, 0x92b, 0x927, 0x3, 0x2, 0x2, 0x2, 0x92b, 
       0x928, 0x3, 0x2, 0x2, 0x2, 0x92b, 0x929, 0x3, 0x2, 0x2, 0x2, 0x92b, 
       0x92a, 0x3, 0x2, 0x2, 0x2, 0x92c, 0x197, 0x3, 0x2, 0x2, 0x2, 0x92d, 
       0x92e, 0x7, 0x72, 0x2, 0x2, 0x92e, 0x92f, 0x7, 0x97, 0x2, 0x2, 0x92f, 
       0x930, 0x5, 0x62, 0x32, 0x2, 0x930, 0x931, 0x7, 0x98, 0x2, 0x2, 0x931, 
       0x199, 0x3, 0x2, 0x2, 0x2, 0x932, 0x933, 0x7, 0x70, 0x2, 0x2, 0x933, 
       0x934, 0x7, 0x97, 0x2, 0x2, 0x934, 0x935, 0x5, 0x62, 0x32, 0x2, 0x935, 
       0x936, 0x7, 0x98, 0x2, 0x2, 0x936, 0x19b, 0x3, 0x2, 0x2, 0x2, 0x937, 
       0x938, 0x7, 0x2c, 0x2, 0x2, 0x938, 0x939, 0x7, 0x97, 0x2, 0x2, 0x939, 
       0x93a, 0x5, 0x1a0, 0xd1, 0x2, 0x93a, 0x93b, 0x7, 0x98, 0x2, 0x2, 
       0x93b, 0x19d, 0x3, 0x2, 0x2, 0x2, 0x93c, 0x93d, 0x7, 0x42, 0x2, 0x2, 
       0x93d, 0x93f, 0x7, 0x97, 0x2, 0x2, 0x93e, 0x940, 0x5, 0x1a2, 0xd2, 
       0x2, 0x93f, 0x93e, 0x3, 0x2, 0x2, 0x2, 0x93f, 0x940, 0x3, 0x2, 0x2, 
       0x2, 0x940, 0x941, 0x3, 0x2, 0x2, 0x2, 0x941, 0x942, 0x5, 0x62, 0x32, 
       0x2, 0x942, 0x943, 0x7, 0x98, 0x2, 0x2, 0x943, 0x19f, 0x3, 0x2, 0x2, 
       0x2, 0x944, 0x945, 0x5, 0x1a2, 0xd2, 0x2, 0x945, 0x946, 0x5, 0x1a6, 
       0xd4, 0x2, 0x946, 0x950, 0x3, 0x2, 0x2, 0x2, 0x947, 0x94c, 0x5, 0x1a6, 
       0xd4, 0x2, 0x948, 0x949, 0x7, 0xbd, 0x2, 0x2, 0x949, 0x94b, 0x5, 
       0x1a6, 0xd4, 0x2, 0x94a, 0x948, 0x3, 0x2, 0x2, 0x2, 0x94b, 0x94e, 
       0x3, 0x2, 0x2, 0x2, 0x94c, 0x94a, 0x3, 0x2, 0x2, 0x2, 0x94c, 0x94d, 
       0x3, 0x2, 0x2, 0x2, 0x94d, 0x950, 0x3, 0x2, 0x2, 0x2, 0x94e, 0x94c, 
       0x3, 0x2, 0x2, 0x2, 0x94f, 0x944, 0x3, 0x2, 0x2, 0x2, 0x94f, 0x947, 
       0x3, 0x2, 0x2, 0x2, 0x950, 0x1a1, 0x3, 
  };
  static const uint16_t serializedATNSegment1[] = {
    0x2, 0x2, 0x2, 0x951, 0x952, 0x7, 0x99, 0x2, 0x2, 0x952, 0x953, 0x5, 
       0x1a4, 0xd3, 0x2, 0x953, 0x954, 0x7, 0x9a, 0x2, 0x2, 0x954, 0x1a3, 
       0x3, 0x2, 0x2, 0x2, 0x955, 0x956, 0x7, 0x93, 0x2, 0x2, 0x956, 0x957, 
       0x7, 0x97, 0x2, 0x2, 0x957, 0x958, 0x5, 0xcc, 0x67, 0x2, 0x958, 0x959, 
       0x7, 0x98, 0x2, 0x2, 0x959, 0x96d, 0x3, 0x2, 0x2, 0x2, 0x95a, 0x95b, 
       0x7, 0x39, 0x2, 0x2, 0x95b, 0x968, 0x7, 0x97, 0x2, 0x2, 0x95c, 0x95e, 
       0x5, 0xd0, 0x69, 0x2, 0x95d, 0x95f, 0x5, 0xcc, 0x67, 0x2, 0x95e, 
       0x95d, 0x3, 0x2, 0x2, 0x2, 0x95e, 0x95f, 0x3, 0x2, 0x2, 0x2, 0x95f, 
       0x960, 0x3, 0x2, 0x2, 0x2, 0x960, 0x962, 0x7, 0xc3, 0x2, 0x2, 0x961, 
       0x963, 0x5, 0x62, 0x32, 0x2, 0x962, 0x961, 0x3, 0x2, 0x2, 0x2, 0x962, 
       0x963, 0x3, 0x2, 0x2, 0x2, 0x963, 0x969, 0x3, 0x2, 0x2, 0x2, 0x964, 
       0x965, 0x5, 0xd2, 0x6a, 0x2, 0x965, 0x966, 0x7, 0xc1, 0x2, 0x2, 0x966, 
       0x967, 0x5, 0xd4, 0x6b, 0x2, 0x967, 0x969, 0x3, 0x2, 0x2, 0x2, 0x968, 
       0x95c, 0x3, 0x2, 0x2, 0x2, 0x968, 0x964, 0x3, 0x2, 0x2, 0x2, 0x969, 
       0x96a, 0x3, 0x2, 0x2, 0x2, 0x96a, 0x96b, 0x7, 0x98, 0x2, 0x2, 0x96b, 
       0x96d, 0x3, 0x2, 0x2, 0x2, 0x96c, 0x955, 0x3, 0x2, 0x2, 0x2, 0x96c, 
       0x95a, 0x3, 0x2, 0x2, 0x2, 0x96d, 0x1a5, 0x3, 0x2, 0x2, 0x2, 0x96e, 
       0x96f, 0x7, 0x41, 0x2, 0x2, 0x96f, 0x970, 0x9, 0x7, 0x2, 0x2, 0x970, 
       0x971, 0x5, 0x42, 0x22, 0x2, 0x971, 0x1a7, 0x3, 0x2, 0x2, 0x2, 0x972, 
       0x973, 0x7, 0x82, 0x2, 0x2, 0x973, 0x975, 0x7, 0x97, 0x2, 0x2, 0x974, 
       0x976, 0x5, 0x188, 0xc5, 0x2, 0x975, 0x974, 0x3, 0x2, 0x2, 0x2, 0x975, 
       0x976, 0x3, 0x2, 0x2, 0x2, 0x976, 0x977, 0x3, 0x2, 0x2, 0x2, 0x977, 
       0x978, 0x7, 0x98, 0x2, 0x2, 0x978, 0x1a9, 0x3, 0x2, 0x2, 0x2, 0x979, 
       0x97a, 0x5, 0x1ae, 0xd8, 0x2, 0x97a, 0x97b, 0x8, 0xd6, 0x1, 0x2, 
       0x97b, 0x97c, 0x5, 0xc6, 0x64, 0x2, 0x97c, 0x97d, 0x8, 0xd6, 0x1, 
       0x2, 0x97d, 0x1ab, 0x3, 0x2, 0x2, 0x2, 0x97e, 0x97f, 0x5, 0x1ae, 
       0xd8, 0x2, 0x97f, 0x980, 0x8, 0xd7, 0x1, 0x2, 0x980, 0x981, 0x7, 
       0xc3, 0x2, 0x2, 0x981, 0x1ad, 0x3, 0x2, 0x2, 0x2, 0x982, 0x987, 0x7, 
       0x1b, 0x2, 0x2, 0x983, 0x984, 0x7, 0x99, 0x2, 0x2, 0x984, 0x985, 
       0x5, 0x64, 0x33, 0x2, 0x985, 0x986, 0x7, 0x9a, 0x2, 0x2, 0x986, 0x988, 
       0x3, 0x2, 0x2, 0x2, 0x987, 0x983, 0x3, 0x2, 0x2, 0x2, 0x987, 0x988, 
       0x3, 0x2, 0x2, 0x2, 0x988, 0x989, 0x3, 0x2, 0x2, 0x2, 0x989, 0x98a, 
       0x8, 0xd8, 0x1, 0x2, 0x98a, 0x98c, 0x5, 0x186, 0xc4, 0x2, 0x98b, 
       0x98d, 0x5, 0x1a8, 0xd5, 0x2, 0x98c, 0x98b, 0x3, 0x2, 0x2, 0x2, 0x98c, 
       0x98d, 0x3, 0x2, 0x2, 0x2, 0x98d, 0x991, 0x3, 0x2, 0x2, 0x2, 0x98e, 
       0x990, 0x5, 0x196, 0xcc, 0x2, 0x98f, 0x98e, 0x3, 0x2, 0x2, 0x2, 0x990, 
       0x993, 0x3, 0x2, 0x2, 0x2, 0x991, 0x98f, 0x3, 0x2, 0x2, 0x2, 0x991, 
       0x992, 0x3, 0x2, 0x2, 0x2, 0x992, 0x1af, 0x3, 0x2, 0x2, 0x2, 0x993, 
       0x991, 0x3, 0x2, 0x2, 0x2, 0x994, 0x995, 0x5, 0x1b2, 0xda, 0x2, 0x995, 
       0x997, 0x7, 0x97, 0x2, 0x2, 0x996, 0x998, 0x5, 0x17a, 0xbe, 0x2, 
       0x997, 0x996, 0x3, 0x2, 0x2, 0x2, 0x997, 0x998, 0x3, 0x2, 0x2, 0x2, 
       0x998, 0x999, 0x3, 0x2, 0x2, 0x2, 0x999, 0x99a, 0x7, 0x98, 0x2, 0x2, 
       0x99a, 0x9a6, 0x3, 0x2, 0x2, 0x2, 0x99b, 0x99d, 0x5, 0x144, 0xa3, 
       0x2, 0x99c, 0x99b, 0x3, 0x2, 0x2, 0x2, 0x99c, 0x99d, 0x3, 0x2, 0x2, 
       0x2, 0x99d, 0x99f, 0x3, 0x2, 0x2, 0x2, 0x99e, 0x9a0, 0x5, 0xec, 0x77, 
       0x2, 0x99f, 0x99e, 0x3, 0x2, 0x2, 0x2, 0x99f, 0x9a0, 0x3, 0x2, 0x2, 
       0x2, 0x9a0, 0x9a1, 0x3, 0x2, 0x2, 0x2, 0x9a1, 0x9a3, 0x5, 0x15a, 
       0xae, 0x2, 0x9a2, 0x9a4, 0x5, 0x1d6, 0xec, 0x2, 0x9a3, 0x9a2, 0x3, 
       0x2, 0x2, 0x2, 0x9a3, 0x9a4, 0x3, 0x2, 0x2, 0x2, 0x9a4, 0x9a6, 0x3, 
       0x2, 0x2, 0x2, 0x9a5, 0x994, 0x3, 0x2, 0x2, 0x2, 0x9a5, 0x99c, 0x3, 
       0x2, 0x2, 0x2, 0x9a6, 0x9a7, 0x3, 0x2, 0x2, 0x2, 0x9a7, 0x9a8, 0x5, 
       0x1b4, 0xdb, 0x2, 0x9a8, 0x1b1, 0x3, 0x2, 0x2, 0x2, 0x9a9, 0x9aa, 
       0x5, 0x4, 0x3, 0x2, 0x9aa, 0x9ac, 0x7, 0xc2, 0x2, 0x2, 0x9ab, 0x9ad, 
       0x7, 0xa6, 0x2, 0x2, 0x9ac, 0x9ab, 0x3, 0x2, 0x2, 0x2, 0x9ac, 0x9ad, 
       0x3, 0x2, 0x2, 0x2, 0x9ad, 0x9ae, 0x3, 0x2, 0x2, 0x2, 0x9ae, 0x9af, 
       0x5, 0x4, 0x3, 0x2, 0x9af, 0x1b3, 0x3, 0x2, 0x2, 0x2, 0x9b0, 0x9b2, 
       0x5, 0x1ee, 0xf8, 0x2, 0x9b1, 0x9b0, 0x3, 0x2, 0x2, 0x2, 0x9b1, 0x9b2, 
       0x3, 0x2, 0x2, 0x2, 0x9b2, 0x9b3, 0x3, 0x2, 0x2, 0x2, 0x9b3, 0x9b9, 
       0x5, 0xc6, 0x64, 0x2, 0x9b4, 0x9b9, 0x5, 0x214, 0x10b, 0x2, 0x9b5, 
       0x9b6, 0x7, 0xa8, 0x2, 0x2, 0x9b6, 0x9b7, 0x9, 0x1d, 0x2, 0x2, 0x9b7, 
       0x9b9, 0x7, 0xc3, 0x2, 0x2, 0x9b8, 0x9b1, 0x3, 0x2, 0x2, 0x2, 0x9b8, 
       0x9b4, 0x3, 0x2, 0x2, 0x2, 0x9b8, 0x9b5, 0x3, 0x2, 0x2, 0x2, 0x9b9, 
       0x1b5, 0x3, 0x2, 0x2, 0x2, 0x9ba, 0x9c0, 0x5, 0x1b8, 0xdd, 0x2, 0x9bb, 
       0x9bc, 0x7, 0x97, 0x2, 0x2, 0x9bc, 0x9bd, 0x5, 0x2a, 0x16, 0x2, 0x9bd, 
       0x9be, 0x7, 0x98, 0x2, 0x2, 0x9be, 0x9c0, 0x3, 0x2, 0x2, 0x2, 0x9bf, 
       0x9ba, 0x3, 0x2, 0x2, 0x2, 0x9bf, 0x9bb, 0x3, 0x2, 0x2, 0x2, 0x9c0, 
       0x1b7, 0x3, 0x2, 0x2, 0x2, 0x9c1, 0x9c2, 0x7, 0xa8, 0x2, 0x2, 0x9c2, 
       0x9c5, 0x5, 0x1ba, 0xde, 0x2, 0x9c3, 0x9c5, 0x5, 0x1be, 0xe0, 0x2, 
       0x9c4, 0x9c1, 0x3, 0x2, 0x2, 0x2, 0x9c4, 0x9c3, 0x3, 0x2, 0x2, 0x2, 
       0x9c5, 0x1b9, 0x3, 0x2, 0x2, 0x2, 0x9c6, 0x9c9, 0x5, 0x5e, 0x30, 
       0x2, 0x9c7, 0x9c9, 0x5, 0x1be, 0xe0, 0x2, 0x9c8, 0x9c6, 0x3, 0x2, 
       0x2, 0x2, 0x9c8, 0x9c7, 0x3, 0x2, 0x2, 0x2, 0x9c9, 0x1bb, 0x3, 0x2, 
       0x2, 0x2, 0x9ca, 0x9cc, 0x5, 0x1ba, 0xde, 0x2, 0x9cb, 0x9cd, 0x7, 
       0xc6, 0x2, 0x2, 0x9cc, 0x9cb, 0x3, 0x2, 0x2, 0x2, 0x9cc, 0x9cd, 0x3, 
       0x2, 0x2, 0x2, 0x9cd, 0x9d5, 0x3, 0x2, 0x2, 0x2, 0x9ce, 0x9cf, 0x7, 
       0xbd, 0x2, 0x2, 0x9cf, 0x9d1, 0x5, 0x1ba, 0xde, 0x2, 0x9d0, 0x9d2, 
       0x7, 0xc6, 0x2, 0x2, 0x9d1, 0x9d0, 0x3, 0x2, 0x2, 0x2, 0x9d1, 0x9d2, 
       0x3, 0x2, 0x2, 0x2, 0x9d2, 0x9d4, 0x3, 0x2, 0x2, 0x2, 0x9d3, 0x9ce, 
       0x3, 0x2, 0x2, 0x2, 0x9d4, 0x9d7, 0x3, 0x2, 0x2, 0x2, 0x9d5, 0x9d3, 
       0x3, 0x2, 0x2, 0x2, 0x9d5, 0x9d6, 0x3, 0x2, 0x2, 0x2, 0x9d6, 0x1bd, 
       0x3, 0x2, 0x2, 0x2, 0x9d7, 0x9d5, 0x3, 0x2, 0x2, 0x2, 0x9d8, 0x9dd, 
       0x7, 0x9b, 0x2, 0x2, 0x9d9, 0x9db, 0x5, 0x1bc, 0xdf, 0x2, 0x9da, 
       0x9dc, 0x7, 0xbd, 0x2, 0x2, 0x9db, 0x9da, 0x3, 0x2, 0x2, 0x2, 0x9db, 
       0x9dc, 0x3, 0x2, 0x2, 0x2, 0x9dc, 0x9de, 0x3, 0x2, 0x2, 0x2, 0x9dd, 
       0x9d9, 0x3, 0x2, 0x2, 0x2, 0x9dd, 0x9de, 0x3, 0x2, 0x2, 0x2, 0x9de, 
       0x9df, 0x3, 0x2, 0x2, 0x2, 0x9df, 0x9e0, 0x7, 0x9c, 0x2, 0x2, 0x9e0, 
       0x1bf, 0x3, 0x2, 0x2, 0x2, 0x9e1, 0x9e4, 0x5, 0x202, 0x102, 0x2, 
       0x9e2, 0x9e4, 0x5, 0x4, 0x3, 0x2, 0x9e3, 0x9e1, 0x3, 0x2, 0x2, 0x2, 
       0x9e3, 0x9e2, 0x3, 0x2, 0x2, 0x2, 0x9e4, 0x1c1, 0x3, 0x2, 0x2, 0x2, 
       0x9e5, 0x9e6, 0x5, 0x1c4, 0xe3, 0x2, 0x9e6, 0x9e8, 0x7, 0x9b, 0x2, 
       0x2, 0x9e7, 0x9e9, 0x5, 0x1cc, 0xe7, 0x2, 0x9e8, 0x9e7, 0x3, 0x2, 
       0x2, 0x2, 0x9e8, 0x9e9, 0x3, 0x2, 0x2, 0x2, 0x9e9, 0x9ea, 0x3, 0x2, 
       0x2, 0x2, 0x9ea, 0x9eb, 0x7, 0x9c, 0x2, 0x2, 0x9eb, 0x1c3, 0x3, 0x2, 
       0x2, 0x2, 0x9ec, 0x9ee, 0x5, 0x1ca, 0xe6, 0x2, 0x9ed, 0x9ef, 0x5, 
       0x144, 0xa3, 0x2, 0x9ee, 0x9ed, 0x3, 0x2, 0x2, 0x2, 0x9ee, 0x9ef, 
       0x3, 0x2, 0x2, 0x2, 0x9ef, 0x9f4, 0x3, 0x2, 0x2, 0x2, 0x9f0, 0x9f2, 
       0x5, 0x1c6, 0xe4, 0x2, 0x9f1, 0x9f3, 0x5, 0x1c8, 0xe5, 0x2, 0x9f2, 
       0x9f1, 0x3, 0x2, 0x2, 0x2, 0x9f2, 0x9f3, 0x3, 0x2, 0x2, 0x2, 0x9f3, 
       0x9f5, 0x3, 0x2, 0x2, 0x2, 0x9f4, 0x9f0, 0x3, 0x2, 0x2, 0x2, 0x9f4, 
       0x9f5, 0x3, 0x2, 0x2, 0x2, 0x9f5, 0x9f7, 0x3, 0x2, 0x2, 0x2, 0x9f6, 
       0x9f8, 0x5, 0x1dc, 0xef, 0x2, 0x9f7, 0x9f6, 0x3, 0x2, 0x2, 0x2, 0x9f7, 
       0x9f8, 0x3, 0x2, 0x2, 0x2, 0x9f8, 0xa04, 0x3, 0x2, 0x2, 0x2, 0x9f9, 
       0x9fb, 0x7, 0x8b, 0x2, 0x2, 0x9fa, 0x9fc, 0x5, 0x144, 0xa3, 0x2, 
       0x9fb, 0x9fa, 0x3, 0x2, 0x2, 0x2, 0x9fb, 0x9fc, 0x3, 0x2, 0x2, 0x2, 
       0x9fc, 0xa01, 0x3, 0x2, 0x2, 0x2, 0x9fd, 0x9ff, 0x5, 0x1c6, 0xe4, 
       0x2, 0x9fe, 0xa00, 0x5, 0x1c8, 0xe5, 0x2, 0x9ff, 0x9fe, 0x3, 0x2, 
       0x2, 0x2, 0x9ff, 0xa00, 0x3, 0x2, 0x2, 0x2, 0xa00, 0xa02, 0x3, 0x2, 
       0x2, 0x2, 0xa01, 0x9fd, 0x3, 0x2, 0x2, 0x2, 0xa01, 0xa02, 0x3, 0x2, 
       0x2, 0x2, 0xa02, 0xa04, 0x3, 0x2, 0x2, 0x2, 0xa03, 0x9ec, 0x3, 0x2, 
       0x2, 0x2, 0xa03, 0x9f9, 0x3, 0x2, 0x2, 0x2, 0xa04, 0x1c5, 0x3, 0x2, 
       0x2, 0x2, 0xa05, 0xa07, 0x5, 0x12, 0xa, 0x2, 0xa06, 0xa05, 0x3, 0x2, 
       0x2, 0x2, 0xa06, 0xa07, 0x3, 0x2, 0x2, 0x2, 0xa07, 0xa08, 0x3, 0x2, 
       0x2, 0x2, 0xa08, 0xa09, 0x5, 0x1c0, 0xe1, 0x2, 0xa09, 0x1c7, 0x3, 
       0x2, 0x2, 0x2, 0xa0a, 0xa0b, 0x7, 0x37, 0x2, 0x2, 0xa0b, 0x1c9, 0x3, 
       0x2, 0x2, 0x2, 0xa0c, 0xa0d, 0x9, 0x17, 0x2, 0x2, 0xa0d, 0x1cb, 0x3, 
       0x2, 0x2, 0x2, 0xa0e, 0xa14, 0x5, 0x1ce, 0xe8, 0x2, 0xa0f, 0xa14, 
       0x5, 0x1d0, 0xe9, 0x2, 0xa10, 0xa11, 0x5, 0x1e6, 0xf4, 0x2, 0xa11, 
       0xa12, 0x7, 0xc1, 0x2, 0x2, 0xa12, 0xa14, 0x3, 0x2, 0x2, 0x2, 0xa13, 
       0xa0e, 0x3, 0x2, 0x2, 0x2, 0xa13, 0xa0f, 0x3, 0x2, 0x2, 0x2, 0xa13, 
       0xa10, 0x3, 0x2, 0x2, 0x2, 0xa14, 0xa15, 0x3, 0x2, 0x2, 0x2, 0xa15, 
       0xa13, 0x3, 0x2, 0x2, 0x2, 0xa15, 0xa16, 0x3, 0x2, 0x2, 0x2, 0xa16, 
       0x1cd, 0x3, 0x2, 0x2, 0x2, 0xa17, 0xa20, 0x7, 0x48, 0x2, 0x2, 0xa18, 
       0xa19, 0x7, 0x49, 0x2, 0x2, 0xa19, 0xa1a, 0x7, 0x97, 0x2, 0x2, 0xa1a, 
       0xa1b, 0x5, 0x6, 0x4, 0x2, 0xa1b, 0xa1c, 0x7, 0xbd, 0x2, 0x2, 0xa1c, 
       0xa1d, 0x5, 0x6, 0x4, 0x2, 0xa1d, 0xa1e, 0x7, 0x98, 0x2, 0x2, 0xa1e, 
       0xa20, 0x3, 0x2, 0x2, 0x2, 0xa1f, 0xa17, 0x3, 0x2, 0x2, 0x2, 0xa1f, 
       0xa18, 0x3, 0x2, 0x2, 0x2, 0xa20, 0xa22, 0x3, 0x2, 0x2, 0x2, 0xa21, 
       0xa23, 0x5, 0xec, 0x77, 0x2, 0xa22, 0xa21, 0x3, 0x2, 0x2, 0x2, 0xa22, 
       0xa23, 0x3, 0x2, 0x2, 0x2, 0xa23, 0xa24, 0x3, 0x2, 0x2, 0x2, 0xa24, 
       0xa25, 0x5, 0x15a, 0xae, 0x2, 0xa25, 0xa26, 0x7, 0xc3, 0x2, 0x2, 
       0xa26, 0x1cf, 0x3, 0x2, 0x2, 0x2, 0xa27, 0xa29, 0x5, 0x144, 0xa3, 
       0x2, 0xa28, 0xa27, 0x3, 0x2, 0x2, 0x2, 0xa28, 0xa29, 0x3, 0x2, 0x2, 
       0x2, 0xa29, 0xa2b, 0x3, 0x2, 0x2, 0x2, 0xa2a, 0xa2c, 0x5, 0xec, 0x77, 
       0x2, 0xa2b, 0xa2a, 0x3, 0x2, 0x2, 0x2, 0xa2b, 0xa2c, 0x3, 0x2, 0x2, 
       0x2, 0xa2c, 0xa2e, 0x3, 0x2, 0x2, 0x2, 0xa2d, 0xa2f, 0x5, 0x1d2, 
       0xea, 0x2, 0xa2e, 0xa2d, 0x3, 0x2, 0x2, 0x2, 0xa2e, 0xa2f, 0x3, 0x2, 
       0x2, 0x2, 0xa2f, 0xa30, 0x3, 0x2, 0x2, 0x2, 0xa30, 0xa38, 0x7, 0xc3, 
       0x2, 0x2, 0xa31, 0xa38, 0x5, 0x1b0, 0xd9, 0x2, 0xa32, 0xa38, 0x5, 
       0x13c, 0x9f, 0x2, 0xa33, 0xa38, 0x5, 0xe4, 0x73, 0x2, 0xa34, 0xa38, 
       0x5, 0x1fa, 0xfe, 0x2, 0xa35, 0xa38, 0x5, 0xe0, 0x71, 0x2, 0xa36, 
       0xa38, 0x5, 0xe6, 0x74, 0x2, 0xa37, 0xa28, 0x3, 0x2, 0x2, 0x2, 0xa37, 
       0xa31, 0x3, 0x2, 0x2, 0x2, 0xa37, 0xa32, 0x3, 0x2, 0x2, 0x2, 0xa37, 
       0xa33, 0x3, 0x2, 0x2, 0x2, 0xa37, 0xa34, 0x3, 0x2, 0x2, 0x2, 0xa37, 
       0xa35, 0x3, 0x2, 0x2, 0x2, 0xa37, 0xa36, 0x3, 0x2, 0x2, 0x2, 0xa38, 
       0x1d1, 0x3, 0x2, 0x2, 0x2, 0xa39, 0xa3e, 0x5, 0x1d4, 0xeb, 0x2, 0xa3a, 
       0xa3b, 0x7, 0xbd, 0x2, 0x2, 0xa3b, 0xa3d, 0x5, 0x1d4, 0xeb, 0x2, 
       0xa3c, 0xa3a, 0x3, 0x2, 0x2, 0x2, 0xa3d, 0xa40, 0x3, 0x2, 0x2, 0x2, 
       0xa3e, 0xa3c, 0x3, 0x2, 0x2, 0x2, 0xa3e, 0xa3f, 0x3, 0x2, 0x2, 0x2, 
       0xa3f, 0x1d3, 0x3, 0x2, 0x2, 0x2, 0xa40, 0xa3e, 0x3, 0x2, 0x2, 0x2, 
       0xa41, 0xa4a, 0x5, 0x15a, 0xae, 0x2, 0xa42, 0xa44, 0x5, 0x1d6, 0xec, 
       0x2, 0xa43, 0xa45, 0x5, 0x1da, 0xee, 0x2, 0xa44, 0xa43, 0x3, 0x2, 
       0x2, 0x2, 0xa44, 0xa45, 0x3, 0x2, 0x2, 0x2, 0xa45, 0xa4b, 0x3, 0x2, 
       0x2, 0x2, 0xa46, 0xa49, 0x5, 0x1da, 0xee, 0x2, 0xa47, 0xa49, 0x5, 
       0x1b8, 0xdd, 0x2, 0xa48, 0xa46, 0x3, 0x2, 0x2, 0x2, 0xa48, 0xa47, 
       0x3, 0x2, 0x2, 0x2, 0xa48, 0xa49, 0x3, 0x2, 0x2, 0x2, 0xa49, 0xa4b, 
       0x3, 0x2, 0x2, 0x2, 0xa4a, 0xa42, 0x3, 0x2, 0x2, 0x2, 0xa4a, 0xa48, 
       0x3, 0x2, 0x2, 0x2, 0xa4b, 0xa55, 0x3, 0x2, 0x2, 0x2, 0xa4c, 0xa4e, 
       0x5, 0x4, 0x3, 0x2, 0xa4d, 0xa4c, 0x3, 0x2, 0x2, 0x2, 0xa4d, 0xa4e, 
       0x3, 0x2, 0x2, 0x2, 0xa4e, 0xa50, 0x3, 0x2, 0x2, 0x2, 0xa4f, 0xa51, 
       0x5, 0x144, 0xa3, 0x2, 0xa50, 0xa4f, 0x3, 0x2, 0x2, 0x2, 0xa50, 0xa51, 
       0x3, 0x2, 0x2, 0x2, 0xa51, 0xa52, 0x3, 0x2, 0x2, 0x2, 0xa52, 0xa53, 
       0x7, 0xc1, 0x2, 0x2, 0xa53, 0xa55, 0x5, 0x64, 0x33, 0x2, 0xa54, 0xa41, 
       0x3, 0x2, 0x2, 0x2, 0xa54, 0xa4d, 0x3, 0x2, 0x2, 0x2, 0xa55, 0x1d5, 
       0x3, 0x2, 0x2, 0x2, 0xa56, 0xa58, 0x5, 0x1d8, 0xed, 0x2, 0xa57, 0xa56, 
       0x3, 0x2, 0x2, 0x2, 0xa58, 0xa59, 0x3, 0x2, 0x2, 0x2, 0xa59, 0xa57, 
       0x3, 0x2, 0x2, 0x2, 0xa59, 0xa5a, 0x3, 0x2, 0x2, 0x2, 0xa5a, 0x1d7, 
       0x3, 0x2, 0x2, 0x2, 0xa5b, 0xa5c, 0x9, 0x1e, 0x2, 0x2, 0xa5c, 0x1d9, 
       0x3, 0x2, 0x2, 0x2, 0xa5d, 0xa5e, 0x7, 0xa8, 0x2, 0x2, 0xa5e, 0xa5f, 
       0x7, 0xc9, 0x2, 0x2, 0xa5f, 0xa60, 0x8, 0xee, 0x1, 0x2, 0xa60, 0x1db, 
       0x3, 0x2, 0x2, 0x2, 0xa61, 0xa62, 0x7, 0xc1, 0x2, 0x2, 0xa62, 0xa63, 
       0x5, 0x1de, 0xf0, 0x2, 0xa63, 0x1dd, 0x3, 0x2, 0x2, 0x2, 0xa64, 0xa66, 
       0x5, 0x1e0, 0xf1, 0x2, 0xa65, 0xa67, 0x7, 0xc6, 0x2, 0x2, 0xa66, 
       0xa65, 0x3, 0x2, 0x2, 0x2, 0xa66, 0xa67, 0x3, 0x2, 0x2, 0x2, 0xa67, 
       0xa6f, 0x3, 0x2, 0x2, 0x2, 0xa68, 0xa69, 0x7, 0xbd, 0x2, 0x2, 0xa69, 
       0xa6b, 0x5, 0x1e0, 0xf1, 0x2, 0xa6a, 0xa6c, 0x7, 0xc6, 0x2, 0x2, 
       0xa6b, 0xa6a, 0x3, 0x2, 0x2, 0x2, 0xa6b, 0xa6c, 0x3, 0x2, 0x2, 0x2, 
       0xa6c, 0xa6e, 0x3, 0x2, 0x2, 0x2, 0xa6d, 0xa68, 0x3, 0x2, 0x2, 0x2, 
       0xa6e, 0xa71, 0x3, 0x2, 0x2, 0x2, 0xa6f, 0xa6d, 0x3, 0x2, 0x2, 0x2, 
       0xa6f, 0xa70, 0x3, 0x2, 0x2, 0x2, 0xa70, 0x1df, 0x3, 0x2, 0x2, 0x2, 
       0xa71, 0xa6f, 0x3, 0x2, 0x2, 0x2, 0xa72, 0xa74, 0x5, 0x144, 0xa3, 
       0x2, 0xa73, 0xa72, 0x3, 0x2, 0x2, 0x2, 0xa73, 0xa74, 0x3, 0x2, 0x2, 
       0x2, 0xa74, 0xa81, 0x3, 0x2, 0x2, 0x2, 0xa75, 0xa82, 0x5, 0x1e4, 
       0xf3, 0x2, 0xa76, 0xa78, 0x7, 0x8f, 0x2, 0x2, 0xa77, 0xa79, 0x5, 
       0x1e6, 0xf4, 0x2, 0xa78, 0xa77, 0x3, 0x2, 0x2, 0x2, 0xa78, 0xa79, 
       0x3, 0x2, 0x2, 0x2, 0xa79, 0xa7a, 0x3, 0x2, 0x2, 0x2, 0xa7a, 0xa82, 
       0x5, 0x1e4, 0xf3, 0x2, 0xa7b, 0xa7d, 0x5, 0x1e6, 0xf4, 0x2, 0xa7c, 
       0xa7e, 0x7, 0x8f, 0x2, 0x2, 0xa7d, 0xa7c, 0x3, 0x2, 0x2, 0x2, 0xa7d, 
       0xa7e, 0x3, 0x2, 0x2, 0x2, 0xa7e, 0xa7f, 0x3, 0x2, 0x2, 0x2, 0xa7f, 
       0xa80, 0x5, 0x1e4, 0xf3, 0x2, 0xa80, 0xa82, 0x3, 0x2, 0x2, 0x2, 0xa81, 
       0xa75, 0x3, 0x2, 0x2, 0x2, 0xa81, 0xa76, 0x3, 0x2, 0x2, 0x2, 0xa81, 
       0xa7b, 0x3, 0x2, 0x2, 0x2, 0xa82, 0x1e1, 0x3, 0x2, 0x2, 0x2, 0xa83, 
       0xa85, 0x5, 0x12, 0xa, 0x2, 0xa84, 0xa83, 0x3, 0x2, 0x2, 0x2, 0xa84, 
       0xa85, 0x3, 0x2, 0x2, 0x2, 0xa85, 0xa86, 0x3, 0x2, 0x2, 0x2, 0xa86, 
       0xa89, 0x5, 0x1c0, 0xe1, 0x2, 0xa87, 0xa89, 0x5, 0x11a, 0x8e, 0x2, 
       0xa88, 0xa84, 0x3, 0x2, 0x2, 0x2, 0xa88, 0xa87, 0x3, 0x2, 0x2, 0x2, 
       0xa89, 0x1e3, 0x3, 0x2, 0x2, 0x2, 0xa8a, 0xa8b, 0x5, 0x1e2, 0xf2, 
       0x2, 0xa8b, 0x1e5, 0x3, 0x2, 0x2, 0x2, 0xa8c, 0xa8d, 0x9, 0x1f, 0x2, 
       0x2, 0xa8d, 0x1e7, 0x3, 0x2, 0x2, 0x2, 0xa8e, 0xa8f, 0x7, 0x50, 0x2, 
       0x2, 0xa8f, 0xa90, 0x5, 0x1ea, 0xf6, 0x2, 0xa90, 0x1e9, 0x3, 0x2, 
       0x2, 0x2, 0xa91, 0xa93, 0x5, 0x10e, 0x88, 0x2, 0xa92, 0xa94, 0x5, 
       0x1ec, 0xf7, 0x2, 0xa93, 0xa92, 0x3, 0x2, 0x2, 0x2, 0xa93, 0xa94, 
       0x3, 0x2, 0x2, 0x2, 0xa94, 0x1eb, 0x3, 0x2, 0x2, 0x2, 0xa95, 0xa97, 
       0x5, 0x164, 0xb3, 0x2, 0xa96, 0xa98, 0x5, 0x1ec, 0xf7, 0x2, 0xa97, 
       0xa96, 0x3, 0x2, 0x2, 0x2, 0xa97, 0xa98, 0x3, 0x2, 0x2, 0x2, 0xa98, 
       0x1ed, 0x3, 0x2, 0x2, 0x2, 0xa99, 0xa9a, 0x7, 0xc1, 0x2, 0x2, 0xa9a, 
       0xa9b, 0x5, 0x1f0, 0xf9, 0x2, 0xa9b, 0x1ef, 0x3, 0x2, 0x2, 0x2, 0xa9c, 
       0xa9e, 0x5, 0x1f2, 0xfa, 0x2, 0xa9d, 0xa9f, 0x7, 0xc6, 0x2, 0x2, 
       0xa9e, 0xa9d, 0x3, 0x2, 0x2, 0x2, 0xa9e, 0xa9f, 0x3, 0x2, 0x2, 0x2, 
       0xa9f, 0xaa7, 0x3, 0x2, 0x2, 0x2, 0xaa0, 0xaa1, 0x7, 0xbd, 0x2, 0x2, 
       0xaa1, 0xaa3, 0x5, 0x1f2, 0xfa, 0x2, 0xaa2, 0xaa4, 0x7, 0xc6, 0x2, 
       0x2, 0xaa3, 0xaa2, 0x3, 0x2, 0x2, 0x2, 0xaa3, 0xaa4, 0x3, 0x2, 0x2, 
       0x2, 0xaa4, 0xaa6, 0x3, 0x2, 0x2, 0x2, 0xaa5, 0xaa0, 0x3, 0x2, 0x2, 
       0x2, 0xaa6, 0xaa9, 0x3, 0x2, 0x2, 0x2, 0xaa7, 0xaa5, 0x3, 0x2, 0x2, 
       0x2, 0xaa7, 0xaa8, 0x3, 0x2, 0x2, 0x2, 0xaa8, 0x1f1, 0x3, 0x2, 0x2, 
       0x2, 0xaa9, 0xaa7, 0x3, 0x2, 0x2, 0x2, 0xaaa, 0xab1, 0x5, 0x1f4, 
       0xfb, 0x2, 0xaab, 0xaad, 0x7, 0x97, 0x2, 0x2, 0xaac, 0xaae, 0x5, 
       0x2a, 0x16, 0x2, 0xaad, 0xaac, 0x3, 0x2, 0x2, 0x2, 0xaad, 0xaae, 
       0x3, 0x2, 0x2, 0x2, 0xaae, 0xaaf, 0x3, 0x2, 0x2, 0x2, 0xaaf, 0xab2, 
       0x7, 0x98, 0x2, 0x2, 0xab0, 0xab2, 0x5, 0x1be, 0xe0, 0x2, 0xab1, 
       0xaab, 0x3, 0x2, 0x2, 0x2, 0xab1, 0xab0, 0x3, 0x2, 0x2, 0x2, 0xab2, 
       0x1f3, 0x3, 0x2, 0x2, 0x2, 0xab3, 0xab6, 0x5, 0x1e2, 0xf2, 0x2, 0xab4, 
       0xab6, 0x5, 0x4, 0x3, 0x2, 0xab5, 0xab3, 0x3, 0x2, 0x2, 0x2, 0xab5, 
       0xab4, 0x3, 0x2, 0x2, 0x2, 0xab6, 0x1f5, 0x3, 0x2, 0x2, 0x2, 0xab7, 
       0xab8, 0x7, 0x50, 0x2, 0x2, 0xab8, 0xab9, 0x5, 0x232, 0x11a, 0x2, 
       0xab9, 0x1f7, 0x3, 0x2, 0x2, 0x2, 0xaba, 0xabe, 0x7, 0x50, 0x2, 0x2, 
       0xabb, 0xabc, 0x7, 0x6, 0x2, 0x2, 0xabc, 0xabf, 0x5, 0x4, 0x3, 0x2, 
       0xabd, 0xabf, 0x7, 0xcf, 0x2, 0x2, 0xabe, 0xabb, 0x3, 0x2, 0x2, 0x2, 
       0xabe, 0xabd, 0x3, 0x2, 0x2, 0x2, 0xabf, 0x1f9, 0x3, 0x2, 0x2, 0x2, 
       0xac0, 0xac1, 0x7, 0x7f, 0x2, 0x2, 0xac1, 0xac2, 0x7, 0xa9, 0x2, 
       0x2, 0xac2, 0xac3, 0x5, 0x1fc, 0xff, 0x2, 0xac3, 0xac4, 0x7, 0xaa, 
       0x2, 0x2, 0xac4, 0xac5, 0x5, 0xdc, 0x6f, 0x2, 0xac5, 0x1fb, 0x3, 
       0x2, 0x2, 0x2, 0xac6, 0xacb, 0x5, 0x1fe, 0x100, 0x2, 0xac7, 0xac8, 
       0x7, 0xbd, 0x2, 0x2, 0xac8, 0xaca, 0x5, 0x1fe, 0x100, 0x2, 0xac9, 
       0xac7, 0x3, 0x2, 0x2, 0x2, 0xaca, 0xacd, 0x3, 0x2, 0x2, 0x2, 0xacb, 
       0xac9, 0x3, 0x2, 0x2, 0x2, 0xacb, 0xacc, 0x3, 0x2, 0x2, 0x2, 0xacc, 
       0x1fd, 0x3, 0x2, 0x2, 0x2, 0xacd, 0xacb, 0x3, 0x2, 0x2, 0x2, 0xace, 
       0xad1, 0x5, 0x200, 0x101, 0x2, 0xacf, 0xad1, 0x5, 0x17e, 0xc0, 0x2, 
       0xad0, 0xace, 0x3, 0x2, 0x2, 0x2, 0xad0, 0xacf, 0x3, 0x2, 0x2, 0x2, 
       0xad1, 0x1ff, 0x3, 0x2, 0x2, 0x2, 0xad2, 0xad3, 0x7, 0x7f, 0x2, 0x2, 
       0xad3, 0xad4, 0x7, 0xa9, 0x2, 0x2, 0xad4, 0xad5, 0x5, 0x1fc, 0xff, 
       0x2, 0xad5, 0xad6, 0x7, 0xaa, 0x2, 0x2, 0xad6, 0xad8, 0x3, 0x2, 0x2, 
       0x2, 0xad7, 0xad2, 0x3, 0x2, 0x2, 0x2, 0xad7, 0xad8, 0x3, 0x2, 0x2, 
       0x2, 0xad8, 0xad9, 0x3, 0x2, 0x2, 0x2, 0xad9, 0xadc, 0x7, 0x1f, 0x2, 
       0x2, 0xada, 0xadc, 0x7, 0x8a, 0x2, 0x2, 0xadb, 0xad7, 0x3, 0x2, 0x2, 
       0x2, 0xadb, 0xada, 0x3, 0x2, 0x2, 0x2, 0xadc, 0xae8, 0x3, 0x2, 0x2, 
       0x2, 0xadd, 0xadf, 0x7, 0xc6, 0x2, 0x2, 0xade, 0xadd, 0x3, 0x2, 0x2, 
       0x2, 0xade, 0xadf, 0x3, 0x2, 0x2, 0x2, 0xadf, 0xae1, 0x3, 0x2, 0x2, 
       0x2, 0xae0, 0xae2, 0x5, 0x4, 0x3, 0x2, 0xae1, 0xae0, 0x3, 0x2, 0x2, 
       0x2, 0xae1, 0xae2, 0x3, 0x2, 0x2, 0x2, 0xae2, 0xae9, 0x3, 0x2, 0x2, 
       0x2, 0xae3, 0xae5, 0x5, 0x4, 0x3, 0x2, 0xae4, 0xae3, 0x3, 0x2, 0x2, 
       0x2, 0xae4, 0xae5, 0x3, 0x2, 0x2, 0x2, 0xae5, 0xae6, 0x3, 0x2, 0x2, 
       0x2, 0xae6, 0xae7, 0x7, 0xa8, 0x2, 0x2, 0xae7, 0xae9, 0x5, 0x16e, 
       0xb8, 0x2, 0xae8, 0xade, 0x3, 0x2, 0x2, 0x2, 0xae8, 0xae4, 0x3, 0x2, 
       0x2, 0x2, 0xae9, 0x201, 0x3, 0x2, 0x2, 0x2, 0xaea, 0xaeb, 0x5, 0x206, 
       0x104, 0x2, 0xaeb, 0xaed, 0x7, 0xa9, 0x2, 0x2, 0xaec, 0xaee, 0x5, 
       0x208, 0x105, 0x2, 0xaed, 0xaec, 0x3, 0x2, 0x2, 0x2, 0xaed, 0xaee, 
       0x3, 0x2, 0x2, 0x2, 0xaee, 0xaef, 0x3, 0x2, 0x2, 0x2, 0xaef, 0xaf0, 
       0x7, 0xaa, 0x2, 0x2, 0xaf0, 0xaf1, 0x8, 0x102, 0x1, 0x2, 0xaf1, 0x203, 
       0x3, 0x2, 0x2, 0x2, 0xaf2, 0xafe, 0x5, 0x202, 0x102, 0x2, 0xaf3, 
       0xaf6, 0x5, 0x1f6, 0xfc, 0x2, 0xaf4, 0xaf6, 0x5, 0x1f8, 0xfd, 0x2, 
       0xaf5, 0xaf3, 0x3, 0x2, 0x2, 0x2, 0xaf5, 0xaf4, 0x3, 0x2, 0x2, 0x2, 
       0xaf6, 0xaf7, 0x3, 0x2, 0x2, 0x2, 0xaf7, 0xaf9, 0x7, 0xa9, 0x2, 0x2, 
       0xaf8, 0xafa, 0x5, 0x208, 0x105, 0x2, 0xaf9, 0xaf8, 0x3, 0x2, 0x2, 
       0x2, 0xaf9, 0xafa, 0x3, 0x2, 0x2, 0x2, 0xafa, 0xafb, 0x3, 0x2, 0x2, 
       0x2, 0xafb, 0xafc, 0x7, 0xaa, 0x2, 0x2, 0xafc, 0xafe, 0x3, 0x2, 0x2, 
       0x2, 0xafd, 0xaf2, 0x3, 0x2, 0x2, 0x2, 0xafd, 0xaf5, 0x3, 0x2, 0x2, 
       0x2, 0xafe, 0x205, 0x3, 0x2, 0x2, 0x2, 0xaff, 0xb00, 0x5, 0x4, 0x3, 
       0x2, 0xb00, 0x207, 0x3, 0x2, 0x2, 0x2, 0xb01, 0xb03, 0x5, 0x20a, 
       0x106, 0x2, 0xb02, 0xb04, 0x7, 0xc6, 0x2, 0x2, 0xb03, 0xb02, 0x3, 
       0x2, 0x2, 0x2, 0xb03, 0xb04, 0x3, 0x2, 0x2, 0x2, 0xb04, 0xb0c, 0x3, 
       0x2, 0x2, 0x2, 0xb05, 0xb06, 0x7, 0xbd, 0x2, 0x2, 0xb06, 0xb08, 0x5, 
       0x20a, 0x106, 0x2, 0xb07, 0xb09, 0x7, 0xc6, 0x2, 0x2, 0xb08, 0xb07, 
       0x3, 0x2, 0x2, 0x2, 0xb08, 0xb09, 0x3, 0x2, 0x2, 0x2, 0xb09, 0xb0b, 
       0x3, 0x2, 0x2, 0x2, 0xb0a, 0xb05, 0x3, 0x2, 0x2, 0x2, 0xb0b, 0xb0e, 
       0x3, 0x2, 0x2, 0x2, 0xb0c, 0xb0a, 0x3, 0x2, 0x2, 0x2, 0xb0c, 0xb0d, 
       0x3, 0x2, 0x2, 0x2, 0xb0d, 0x209, 0x3, 0x2, 0x2, 0x2, 0xb0e, 0xb0c, 
       0x3, 0x2, 0x2, 0x2, 0xb0f, 0xb13, 0x5, 0x16e, 0xb8, 0x2, 0xb10, 0xb13, 
       0x5, 0x64, 0x33, 0x2, 0xb11, 0xb13, 0x5, 0x8, 0x5, 0x2, 0xb12, 0xb0f, 
       0x3, 0x2, 0x2, 0x2, 0xb12, 0xb10, 0x3, 0x2, 0x2, 0x2, 0xb12, 0xb11, 
       0x3, 0x2, 0x2, 0x2, 0xb13, 0x20b, 0x3, 0x2, 0x2, 0x2, 0xb14, 0xb15, 
       0x7, 0x8a, 0x2, 0x2, 0xb15, 0xb1b, 0x5, 0x12, 0xa, 0x2, 0xb16, 0xb1c, 
       0x5, 0x4, 0x3, 0x2, 0xb17, 0xb19, 0x7, 0x7f, 0x2, 0x2, 0xb18, 0xb17, 
       0x3, 0x2, 0x2, 0x2, 0xb18, 0xb19, 0x3, 0x2, 0x2, 0x2, 0xb19, 0xb1a, 
       0x3, 0x2, 0x2, 0x2, 0xb1a, 0xb1c, 0x5, 0x202, 0x102, 0x2, 0xb1b, 
       0xb16, 0x3, 0x2, 0x2, 0x2, 0xb1b, 0xb18, 0x3, 0x2, 0x2, 0x2, 0xb1c, 
       0x20d, 0x3, 0x2, 0x2, 0x2, 0xb1d, 0xb1f, 0x7, 0x35, 0x2, 0x2, 0xb1e, 
       0xb1d, 0x3, 0x2, 0x2, 0x2, 0xb1e, 0xb1f, 0x3, 0x2, 0x2, 0x2, 0xb1f, 
       0xb20, 0x3, 0x2, 0x2, 0x2, 0xb20, 0xb21, 0x7, 0x7f, 0x2, 0x2, 0xb21, 
       0xb22, 0x5, 0xdc, 0x6f, 0x2, 0xb22, 0x20f, 0x3, 0x2, 0x2, 0x2, 0xb23, 
       0xb24, 0x7, 0x7f, 0x2, 0x2, 0xb24, 0xb25, 0x7, 0xa9, 0x2, 0x2, 0xb25, 
       0xb26, 0x7, 0xaa, 0x2, 0x2, 0xb26, 0xb27, 0x5, 0xdc, 0x6f, 0x2, 0xb27, 
       0x211, 0x3, 0x2, 0x2, 0x2, 0xb28, 0xb29, 0x7, 0x87, 0x2, 0x2, 0xb29, 
       0xb2a, 0x5, 0xc6, 0x64, 0x2, 0xb2a, 0xb2b, 0x5, 0x216, 0x10c, 0x2, 
       0xb2b, 0x213, 0x3, 0x2, 0x2, 0x2, 0xb2c, 0xb2e, 0x7, 0x87, 0x2, 0x2, 
       0xb2d, 0xb2f, 0x5, 0x1ee, 0xf8, 0x2, 0xb2e, 0xb2d, 0x3, 0x2, 0x2, 
       0x2, 0xb2e, 0xb2f, 0x3, 0x2, 0x2, 0x2, 0xb2f, 0xb30, 0x3, 0x2, 0x2, 
       0x2, 0xb30, 0xb31, 0x5, 0xc6, 0x64, 0x2, 0xb31, 0xb32, 0x5, 0x216, 
       0x10c, 0x2, 0xb32, 0x215, 0x3, 0x2, 0x2, 0x2, 0xb33, 0xb35, 0x5, 
       0x218, 0x10d, 0x2, 0xb34, 0xb33, 0x3, 0x2, 0x2, 0x2, 0xb35, 0xb36, 
       0x3, 0x2, 0x2, 0x2, 0xb36, 0xb34, 0x3, 0x2, 0x2, 0x2, 0xb36, 0xb37, 
       0x3, 0x2, 0x2, 0x2, 0xb37, 0x217, 0x3, 0x2, 0x2, 0x2, 0xb38, 0xb39, 
       0x7, 0x19, 0x2, 0x2, 0xb39, 0xb3a, 0x7, 0x97, 0x2, 0x2, 0xb3a, 0xb3b, 
       0x5, 0x21a, 0x10e, 0x2, 0xb3b, 0xb3c, 0x7, 0x98, 0x2, 0x2, 0xb3c, 
       0xb3d, 0x5, 0xc6, 0x64, 0x2, 0xb3d, 0x219, 0x3, 0x2, 0x2, 0x2, 0xb3e, 
       0xb40, 0x5, 0x144, 0xa3, 0x2, 0xb3f, 0xb3e, 0x3, 0x2, 0x2, 0x2, 0xb3f, 
       0xb40, 0x3, 0x2, 0x2, 0x2, 0xb40, 0xb41, 0x3, 0x2, 0x2, 0x2, 0xb41, 
       0xb44, 0x5, 0x10e, 0x88, 0x2, 0xb42, 0xb45, 0x5, 0x15a, 0xae, 0x2, 
       0xb43, 0xb45, 0x5, 0x170, 0xb9, 0x2, 0xb44, 0xb42, 0x3, 0x2, 0x2, 
       0x2, 0xb44, 0xb43, 0x3, 0x2, 0x2, 0x2, 0xb44, 0xb45, 0x3, 0x2, 0x2, 
       0x2, 0xb45, 0xb48, 0x3, 0x2, 0x2, 0x2, 0xb46, 0xb48, 0x7, 0xc6, 0x2, 
       0x2, 0xb47, 0xb3f, 0x3, 0x2, 0x2, 0x2, 0xb47, 0xb46, 0x3, 0x2, 0x2, 
       0x2, 0xb48, 0x21b, 0x3, 0x2, 0x2, 0x2, 0xb49, 0xb4b, 0x7, 0x82, 0x2, 
       0x2, 0xb4a, 0xb4c, 0x5, 0x5e, 0x30, 0x2, 0xb4b, 0xb4a, 0x3, 0x2, 
       0x2, 0x2, 0xb4b, 0xb4c, 0x3, 0x2, 0x2, 0x2, 0xb4c, 0x21d, 0x3, 0x2, 
       0x2, 0x2, 0xb4d, 0xb50, 0x5, 0x220, 0x111, 0x2, 0xb4e, 0xb50, 0x5, 
       0x224, 0x113, 0x2, 0xb4f, 0xb4d, 0x3, 0x2, 0x2, 0x2, 0xb4f, 0xb4e, 
       0x3, 0x2, 0x2, 0x2, 0xb50, 0x21f, 0x3, 0x2, 0x2, 0x2, 0xb51, 0xb52, 
       0x7, 0x82, 0x2, 0x2, 0xb52, 0xb54, 0x7, 0x97, 0x2, 0x2, 0xb53, 0xb55, 
       0x5, 0x222, 0x112, 0x2, 0xb54, 0xb53, 0x3, 0x2, 0x2, 0x2, 0xb54, 
       0xb55, 0x3, 0x2, 0x2, 0x2, 0xb55, 0xb56, 0x3, 0x2, 0x2, 0x2, 0xb56, 
       0xb57, 0x7, 0x98, 0x2, 0x2, 0xb57, 0x221, 0x3, 0x2, 0x2, 0x2, 0xb58, 
       0xb5a, 0x5, 0x16e, 0xb8, 0x2, 0xb59, 0xb5b, 0x7, 0xc6, 0x2, 0x2, 
       0xb5a, 0xb59, 0x3, 0x2, 0x2, 0x2, 0xb5a, 0xb5b, 0x3, 0x2, 0x2, 0x2, 
       0xb5b, 0xb63, 0x3, 0x2, 0x2, 0x2, 0xb5c, 0xb5d, 0x7, 0xbd, 0x2, 0x2, 
       0xb5d, 0xb5f, 0x5, 0x16e, 0xb8, 0x2, 0xb5e, 0xb60, 0x7, 0xc6, 0x2, 
       0x2, 0xb5f, 0xb5e, 0x3, 0x2, 0x2, 0x2, 0xb5f, 0xb60, 0x3, 0x2, 0x2, 
       0x2, 0xb60, 0xb62, 0x3, 0x2, 0x2, 0x2, 0xb61, 0xb5c, 0x3, 0x2, 0x2, 
       0x2, 0xb62, 0xb65, 0x3, 0x2, 0x2, 0x2, 0xb63, 0xb61, 0x3, 0x2, 0x2, 
       0x2, 0xb63, 0xb64, 0x3, 0x2, 0x2, 0x2, 0xb64, 0x223, 0x3, 0x2, 0x2, 
       0x2, 0xb65, 0xb63, 0x3, 0x2, 0x2, 0x2, 0xb66, 0xb67, 0x7, 0x4e, 0x2, 
       0x2, 0xb67, 0xb68, 0x7, 0x97, 0x2, 0x2, 0xb68, 0xb69, 0x5, 0x64, 
       0x33, 0x2, 0xb69, 0xb6a, 0x7, 0x98, 0x2, 0x2, 0xb6a, 0xb6d, 0x3, 
       0x2, 0x2, 0x2, 0xb6b, 0xb6d, 0x7, 0x4e, 0x2, 0x2, 0xb6c, 0xb66, 0x3, 
       0x2, 0x2, 0x2, 0xb6c, 0xb6b, 0x3, 0x2, 0x2, 0x2, 0xb6d, 0x225, 0x3, 
       0x2, 0x2, 0x2, 0xb6e, 0xb6f, 0x7, 0xa, 0x2, 0x2, 0xb6f, 0xb70, 0x5, 
       0x228, 0x115, 0x2, 0xb70, 0x227, 0x3, 0x2, 0x2, 0x2, 0xb71, 0xb76, 
       0x5, 0x22a, 0x116, 0x2, 0xb72, 0xb76, 0x5, 0x22c, 0x117, 0x2, 0xb73, 
       0xb76, 0x5, 0x22e, 0x118, 0x2, 0xb74, 0xb76, 0x5, 0x230, 0x119, 0x2, 
       0xb75, 0xb71, 0x3, 0x2, 0x2, 0x2, 0xb75, 0xb72, 0x3, 0x2, 0x2, 0x2, 
       0xb75, 0xb73, 0x3, 0x2, 0x2, 0x2, 0xb75, 0xb74, 0x3, 0x2, 0x2, 0x2, 
       0xb76, 0x229, 0x3, 0x2, 0x2, 0x2, 0xb77, 0xb78, 0x7, 0x8e, 0x2, 0x2, 
       0xb78, 0xb79, 0x8, 0x116, 0x1, 0x2, 0xb79, 0x22b, 0x3, 0x2, 0x2, 
       0x2, 0xb7a, 0xb7b, 0x7, 0x21, 0x2, 0x2, 0xb7b, 0xb7c, 0x8, 0x117, 
       0x1, 0x2, 0xb7c, 0x22d, 0x3, 0x2, 0x2, 0x2, 0xb7d, 0xb7e, 0x7, 0x22, 
       0x2, 0x2, 0xb7e, 0xb83, 0x8, 0x118, 0x1, 0x2, 0xb7f, 0xb80, 0x7, 
       0x15, 0x2, 0x2, 0xb80, 0xb84, 0x8, 0x118, 0x1, 0x2, 0xb81, 0xb82, 
       0x7, 0x31, 0x2, 0x2, 0xb82, 0xb84, 0x8, 0x118, 0x1, 0x2, 0xb83, 0xb7f, 
       0x3, 0x2, 0x2, 0x2, 0xb83, 0xb81, 0x3, 0x2, 0x2, 0x2, 0xb84, 0x22f, 
       0x3, 0x2, 0x2, 0x2, 0xb85, 0xb86, 0x7, 0x3d, 0x2, 0x2, 0xb86, 0xb8b, 
       0x8, 0x119, 0x1, 0x2, 0xb87, 0xb88, 0x7, 0x15, 0x2, 0x2, 0xb88, 0xb8c, 
       0x8, 0x119, 0x1, 0x2, 0xb89, 0xb8a, 0x7, 0x31, 0x2, 0x2, 0xb8a, 0xb8c, 
       0x8, 0x119, 0x1, 0x2, 0xb8b, 0xb87, 0x3, 0x2, 0x2, 0x2, 0xb8b, 0xb89, 
       0x3, 0x2, 0x2, 0x2, 0xb8c, 0x231, 0x3, 0x2, 0x2, 0x2, 0xb8d, 0xb90, 
       0x7, 0x4d, 0x2, 0x2, 0xb8e, 0xb8f, 0x7, 0x99, 0x2, 0x2, 0xb8f, 0xb91, 
       0x7, 0x9a, 0x2, 0x2, 0xb90, 0xb8e, 0x3, 0x2, 0x2, 0x2, 0xb90, 0xb91, 
       0x3, 0x2, 0x2, 0x2, 0xb91, 0xbc1, 0x3, 0x2, 0x2, 0x2, 0xb92, 0xb95, 
       0x7, 0x2b, 0x2, 0x2, 0xb93, 0xb94, 0x7, 0x99, 0x2, 0x2, 0xb94, 0xb96, 
       0x7, 0x9a, 0x2, 0x2, 0xb95, 0xb93, 0x3, 0x2, 0x2, 0x2, 0xb95, 0xb96, 
       0x3, 0x2, 0x2, 0x2, 0xb96, 0xbc1, 0x3, 0x2, 0x2, 0x2, 0xb97, 0xbc1, 
       0x7, 0x9e, 0x2, 0x2, 0xb98, 0xbc1, 0x7, 0x9f, 0x2, 0x2, 0xb99, 0xbc1, 
       0x7, 0xa0, 0x2, 0x2, 0xb9a, 0xbc1, 0x7, 0xa1, 0x2, 0x2, 0xb9b, 0xbc1, 
       0x7, 0xa2, 0x2, 0x2, 0xb9c, 0xbc1, 0x7, 0xa3, 0x2, 0x2, 0xb9d, 0xbc1, 
       0x7, 0xa4, 0x2, 0x2, 0xb9e, 0xbc1, 0x7, 0xa5, 0x2, 0x2, 0xb9f, 0xbc1, 
       0x7, 0xa6, 0x2, 0x2, 0xba0, 0xbc1, 0x7, 0xa7, 0x2, 0x2, 0xba1, 0xbc1, 
       0x7, 0xa8, 0x2, 0x2, 0xba2, 0xbc1, 0x7, 0xaa, 0x2, 0x2, 0xba3, 0xbc1, 
       0x7, 0xa9, 0x2, 0x2, 0xba4, 0xbc1, 0x7, 0xb8, 0x2, 0x2, 0xba5, 0xbc1, 
       0x7, 0xab, 0x2, 0x2, 0xba6, 0xbc1, 0x7, 0xac, 0x2, 0x2, 0xba7, 0xbc1, 
       0x7, 0xad, 0x2, 0x2, 0xba8, 0xbc1, 0x7, 0xaf, 0x2, 0x2, 0xba9, 0xbc1, 
       0x7, 0xb0, 0x2, 0x2, 0xbaa, 0xbc1, 0x7, 0xb1, 0x2, 0x2, 0xbab, 0xbc1, 
       0x7, 0xb2, 0x2, 0x2, 0xbac, 0xbad, 0x7, 0xa9, 0x2, 0x2, 0xbad, 0xbc1, 
       0x7, 0xa9, 0x2, 0x2, 0xbae, 0xbaf, 0x7, 0xaa, 0x2, 0x2, 0xbaf, 0xbc1, 
       0x7, 0xaa, 0x2, 0x2, 0xbb0, 0xbc1, 0x7, 0xb4, 0x2, 0x2, 0xbb1, 0xbc1, 
       0x7, 0xb3, 0x2, 0x2, 0xbb2, 0xbc1, 0x7, 0xb5, 0x2, 0x2, 0xbb3, 0xbc1, 
       0x7, 0xb6, 0x2, 0x2, 0xbb4, 0xbc1, 0x7, 0xb7, 0x2, 0x2, 0xbb5, 0xbc1, 
       0x7, 0xb9, 0x2, 0x2, 0xbb6, 0xbc1, 0x7, 0xba, 0x2, 0x2, 0xbb7, 0xbc1, 
       0x7, 0xbb, 0x2, 0x2, 0xbb8, 0xbc1, 0x7, 0xbc, 0x2, 0x2, 0xbb9, 0xbc1, 
       0x7, 0xbd, 0x2, 0x2, 0xbba, 0xbc1, 0x7, 0xbe, 0x2, 0x2, 0xbbb, 0xbc1, 
       0x7, 0xbf, 0x2, 0x2, 0xbbc, 0xbbd, 0x7, 0x97, 0x2, 0x2, 0xbbd, 0xbc1, 
       0x7, 0x98, 0x2, 0x2, 0xbbe, 0xbbf, 0x7, 0x99, 0x2, 0x2, 0xbbf, 0xbc1, 
       0x7, 0x9a, 0x2, 0x2, 0xbc0, 0xb8d, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb92, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb97, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb98, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb99, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb9a, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb9b, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb9c, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb9d, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb9e, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xb9f, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba0, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba1, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba2, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba3, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba4, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba5, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba6, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba7, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba8, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xba9, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbaa, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbab, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbac, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbae, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb0, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb1, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb2, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb3, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb4, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb5, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb6, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb7, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb8, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbb9, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbba, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbbb, 0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbbc, 
       0x3, 0x2, 0x2, 0x2, 0xbc0, 0xbbe, 0x3, 0x2, 0x2, 0x2, 0xbc1, 0x233, 
       0x3, 0x2, 0x2, 0x2, 0xbc2, 0xbc3, 0x9, 0x20, 0x2, 0x2, 0xbc3, 0x235, 
       0x3, 0x2, 0x2, 0x2, 0x170, 0x237, 0x241, 0x24c, 0x250, 0x260, 0x262, 
       0x266, 0x26e, 0x275, 0x278, 0x27e, 0x283, 0x289, 0x291, 0x293, 0x29c, 
       0x2a0, 0x2a4, 0x2a7, 0x2ab, 0x2ae, 0x2b5, 0x2b9, 0x2bc, 0x2bf, 0x2c2, 
       0x2c8, 0x2d9, 0x2dd, 0x2e3, 0x2ea, 0x2f0, 0x2f6, 0x2fa, 0x2fc, 0x304, 
       0x309, 0x316, 0x323, 0x332, 0x337, 0x33b, 0x342, 0x345, 0x34d, 0x351, 
       0x354, 0x35b, 0x362, 0x366, 0x36b, 0x36f, 0x372, 0x377, 0x386, 0x38d, 
       0x395, 0x39d, 0x3a6, 0x3ad, 0x3b4, 0x3bc, 0x3c4, 0x3cc, 0x3d4, 0x3dc, 
       0x3e4, 0x3ed, 0x3f5, 0x3fe, 0x411, 0x419, 0x41b, 0x41e, 0x424, 0x434, 
       0x445, 0x44e, 0x453, 0x45a, 0x46a, 0x46f, 0x4cf, 0x4d4, 0x4d8, 0x4e0, 
       0x4e7, 0x4ec, 0x4f5, 0x4fb, 0x502, 0x50c, 0x51c, 0x528, 0x534, 0x53d, 
       0x544, 0x549, 0x54f, 0x55a, 0x56b, 0x56e, 0x573, 0x578, 0x57e, 0x583, 
       0x588, 0x58e, 0x594, 0x59b, 0x5a4, 0x5ac, 0x5b0, 0x5b7, 0x5b9, 0x5cd, 
       0x5d1, 0x5d7, 0x5dc, 0x5e0, 0x5e3, 0x5ea, 0x5f1, 0x5f5, 0x5fe, 0x60e, 
       0x618, 0x61d, 0x625, 0x627, 0x62f, 0x645, 0x64a, 0x64d, 0x659, 0x69d, 
       0x6a3, 0x6a8, 0x6ab, 0x6b0, 0x6b3, 0x6ba, 0x6c3, 0x6c8, 0x6cb, 0x6cf, 
       0x6d3, 0x6d7, 0x6dc, 0x6e1, 0x6e7, 0x6ed, 0x6f2, 0x6f8, 0x6fe, 0x701, 
       0x707, 0x70b, 0x70f, 0x712, 0x71a, 0x71c, 0x722, 0x725, 0x728, 0x72b, 
       0x72f, 0x733, 0x739, 0x743, 0x749, 0x74f, 0x754, 0x759, 0x75d, 0x76a, 
       0x770, 0x774, 0x77a, 0x77f, 0x78e, 0x792, 0x797, 0x79c, 0x7a1, 0x7a7, 
       0x7aa, 0x7b3, 0x7b7, 0x7bc, 0x7c0, 0x7c6, 0x7cd, 0x7de, 0x7e0, 0x7e7, 
       0x7ec, 0x7f3, 0x7f7, 0x7fb, 0x803, 0x809, 0x80f, 0x813, 0x815, 0x819, 
       0x81e, 0x822, 0x825, 0x828, 0x82b, 0x830, 0x834, 0x837, 0x83b, 0x83e, 
       0x840, 0x845, 0x84c, 0x853, 0x857, 0x85d, 0x863, 0x866, 0x868, 0x86e, 
       0x873, 0x876, 0x87c, 0x883, 0x888, 0x88b, 0x88d, 0x891, 0x897, 0x8a3, 
       0x8a7, 0x8a9, 0x8ad, 0x8b2, 0x8b5, 0x8bc, 0x8c0, 0x8c5, 0x8c7, 0x8cb, 
       0x8db, 0x8e0, 0x8e2, 0x8e8, 0x8ec, 0x8f2, 0x8fc, 0x903, 0x906, 0x914, 
       0x92b, 0x93f, 0x94c, 0x94f, 0x95e, 0x962, 0x968, 0x96c, 0x975, 0x987, 
       0x98c, 0x991, 0x997, 0x99c, 0x99f, 0x9a3, 0x9a5, 0x9ac, 0x9b1, 0x9b8, 
       0x9bf, 0x9c4, 0x9c8, 0x9cc, 0x9d1, 0x9d5, 0x9db, 0x9dd, 0x9e3, 0x9e8, 
       0x9ee, 0x9f2, 0x9f4, 0x9f7, 0x9fb, 0x9ff, 0xa01, 0xa03, 0xa06, 0xa13, 
       0xa15, 0xa1f, 0xa22, 0xa28, 0xa2b, 0xa2e, 0xa37, 0xa3e, 0xa44, 0xa48, 
       0xa4a, 0xa4d, 0xa50, 0xa54, 0xa59, 0xa66, 0xa6b, 0xa6f, 0xa73, 0xa78, 
       0xa7d, 0xa81, 0xa84, 0xa88, 0xa93, 0xa97, 0xa9e, 0xaa3, 0xaa7, 0xaad, 
       0xab1, 0xab5, 0xabe, 0xacb, 0xad0, 0xad7, 0xadb, 0xade, 0xae1, 0xae4, 
       0xae8, 0xaed, 0xaf5, 0xaf9, 0xafd, 0xb03, 0xb08, 0xb0c, 0xb12, 0xb18, 
       0xb1b, 0xb1e, 0xb2e, 0xb36, 0xb3f, 0xb44, 0xb47, 0xb4b, 0xb4f, 0xb54, 
       0xb5a, 0xb5f, 0xb63, 0xb6c, 0xb75, 0xb83, 0xb8b, 0xb90, 0xb95, 0xbc0, 
  };

  _serializedATN.insert(_serializedATN.end(), serializedATNSegment0,
    serializedATNSegment0 + sizeof(serializedATNSegment0) / sizeof(serializedATNSegment0[0]));
  _serializedATN.insert(_serializedATN.end(), serializedATNSegment1,
    serializedATNSegment1 + sizeof(serializedATNSegment1) / sizeof(serializedATNSegment1[0]));


  atn::ATNDeserializer deserializer;
  _atn = deserializer.deserialize(_serializedATN);

  size_t count = _atn.getNumberOfDecisions();
  _decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    _decisionToDFA.emplace_back(_atn.getDecisionState(i), i);
  }
}

ReentParser::Initializer ReentParser::_init;
